{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Generative AI for Teachers This is a course to help teachers use ChatGPT and other generative AI programs to generate content for their classrooms. It is designed to be useful for a broad audience and we include an extensive glossary for people that are new to the field of generative text . Our goal is to demonstrate a wide variety of uses of generative AI from simple lesson plans to generating lesson-appropriate online interactive simulations. YouTube Video Outline of Course Part 1: Introduction to ChatGPT? Ethics: When can we use generative AI? What is ChatGPT and generative AI Legal and ethical issues When to use generative AI vs. finding pre-tested resources Part 2: Key Concepts Prompts and responses Tokens (with lab) Temperature and Randomness Markdown, graph and chart formats In-Context learning Part 3: Prompt design Making prompts clear Giving context Refining prompts Audience: tuning to a grade level Perspective: take a historical perspective Generating analogies and metaphors Part 4: Intermediate Prompts Syllabus Code of Conduct Selecting a License Part 5: Interactive Simulations Generating web pages with interactive Javascript lessons Using p5.js to generate simulations Simulating real-world physics Part 6: Advanced Topics Using Generative AI to Minimize Kit Part Costs Fine-tuning large-language models Embeddings - using similar lesson plans to generate new lesson plans Part 6 The Future of AI AI today - the limits of large-language-models AI in the next 10 years - teachers and simulation guides AI in the long-term - regulation and existential risks This course was originally created to help instructors generate lesson plans for teaching computational thinking.","title":"Home"},{"location":"#generative-ai-for-teachers","text":"This is a course to help teachers use ChatGPT and other generative AI programs to generate content for their classrooms. It is designed to be useful for a broad audience and we include an extensive glossary for people that are new to the field of generative text . Our goal is to demonstrate a wide variety of uses of generative AI from simple lesson plans to generating lesson-appropriate online interactive simulations.","title":"Generative AI for Teachers"},{"location":"#youtube-video","text":"","title":"YouTube Video"},{"location":"#outline-of-course","text":"Part 1: Introduction to ChatGPT? Ethics: When can we use generative AI? What is ChatGPT and generative AI Legal and ethical issues When to use generative AI vs. finding pre-tested resources Part 2: Key Concepts Prompts and responses Tokens (with lab) Temperature and Randomness Markdown, graph and chart formats In-Context learning Part 3: Prompt design Making prompts clear Giving context Refining prompts Audience: tuning to a grade level Perspective: take a historical perspective Generating analogies and metaphors Part 4: Intermediate Prompts Syllabus Code of Conduct Selecting a License Part 5: Interactive Simulations Generating web pages with interactive Javascript lessons Using p5.js to generate simulations Simulating real-world physics Part 6: Advanced Topics Using Generative AI to Minimize Kit Part Costs Fine-tuning large-language models Embeddings - using similar lesson plans to generate new lesson plans Part 6 The Future of AI AI today - the limits of large-language-models AI in the next 10 years - teachers and simulation guides AI in the long-term - regulation and existential risks This course was originally created to help instructors generate lesson plans for teaching computational thinking.","title":"Outline of Course"},{"location":"contacts/","text":"Contacts Dan McCreary","title":"Contacts"},{"location":"contacts/#contacts","text":"Dan McCreary","title":"Contacts"},{"location":"getting-started/","text":"Getting Started You can get started in just a few minutes. To use these materials you will need two things: A valid account on either ChatGPT or an account on the OpenAI Playground. Link to ChatGPT OpenAI Beta Playground A place to put the generated content. We suggest you use GitHub Pages if you would like to share your content with others. To use GitHub Pages you will need a GitHub account. Link to GitHub The way this course runs is that the instructor will show you a suggested prompt and then ask you to try that same prompt on your system. If you are happy with the results, you can then copy and paste the results into your website. Rendering Tools ChatGPT can only generate plain text. If you want to display graphics, tables and charts you will need to copy the text into another tool. No installation web-rendering tools Use these if you have only a web browser or Chromebook. No apps need to be installed. Trinket.io good for rendering basic Python and turtle graphics JSFiddle.com - good for testing HTML, JavaScript and SVG Desktop Installation Thonny - Basic Python and MicroPython Visual Studio Code - Use for rendering charts and plotting done by Python code Directory Structure Here is a suggestion structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 HOME docs index.md lessons lesson01.md lesson02.md glossary.md mkdocs.yml license.md code-of-conduct.md README.md src plot-sine.py The structure of your website (navigation, headers, footers) is controller by the settings in your mkdocs.yml file.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"You can get started in just a few minutes. To use these materials you will need two things: A valid account on either ChatGPT or an account on the OpenAI Playground. Link to ChatGPT OpenAI Beta Playground A place to put the generated content. We suggest you use GitHub Pages if you would like to share your content with others. To use GitHub Pages you will need a GitHub account. Link to GitHub The way this course runs is that the instructor will show you a suggested prompt and then ask you to try that same prompt on your system. If you are happy with the results, you can then copy and paste the results into your website.","title":"Getting Started"},{"location":"getting-started/#rendering-tools","text":"ChatGPT can only generate plain text. If you want to display graphics, tables and charts you will need to copy the text into another tool.","title":"Rendering Tools"},{"location":"getting-started/#no-installation-web-rendering-tools","text":"Use these if you have only a web browser or Chromebook. No apps need to be installed. Trinket.io good for rendering basic Python and turtle graphics JSFiddle.com - good for testing HTML, JavaScript and SVG","title":"No installation web-rendering tools"},{"location":"getting-started/#desktop-installation","text":"Thonny - Basic Python and MicroPython Visual Studio Code - Use for rendering charts and plotting done by Python code","title":"Desktop Installation"},{"location":"getting-started/#directory-structure","text":"Here is a suggestion structure: 1 2 3 4 5 6 7 8 9 10 11 12 13 HOME docs index.md lessons lesson01.md lesson02.md glossary.md mkdocs.yml license.md code-of-conduct.md README.md src plot-sine.py The structure of your website (navigation, headers, footers) is controller by the settings in your mkdocs.yml file.","title":"Directory Structure"},{"location":"glossary/","text":"Glossary of Terms for Course on ChatGPT for Teachers ChatGPT Code Highlighter Computational Thinking Computational thinking is a way of solving problems and analyzing data by breaking it down into smaller parts and using algorithms and other tools to solve the problem. It is a thought process that is used in many different fields, from engineering to economics, and it is often used in computing and programming. Computational thinking involves breaking down a problem into smaller pieces and understanding how the pieces interact with one another, to create a solution. Deep Links The feature of a website that allows any subsection of a document to have its own URL that can be bookmarked and sent via chat. Fine-Tuning Generative Text GPT Generative Pre-Trained machine learning models. This is the model use for both ChatGPT and GPT-3. Grammarly A cloud-based service that helps writers with spelling, grammar and writing style. Grammarly is also created using large langauge machine learning models. Markdown Mermaid Markdown A text format for encoding diagrams. In January of 2022 GitHub announced built-in support for Mermaid diagrams into their Markdown variant rendered for README.md See Mermaid JS Website Natural Language Processing Also know as: NLP OpenAI A small 400-person company (as of 2022) that created the GPT and ChatGPT large-language models. OpenAI has received over a billion dollars of investment from Microsoft for an exclusivity arrangement that prevents OpenAI from working with the other cloud providers (Google and Amazon) Prompt SVG SVG means Scalable Vector Graphics. It is a standard format for generating vector images (not bitmaps) that can be easily generated by ChatGPT. Tokens Common sequences of characters found in text that are assigned numbers and used as inputs to machine learning models. The number of tokens in both prompts and responses are added together and must be under the token budget for a NLP model.","title":"Glossary"},{"location":"glossary/#glossary-of-terms-for-course-on-chatgpt-for-teachers","text":"","title":"Glossary of Terms for Course on ChatGPT for Teachers"},{"location":"glossary/#chatgpt","text":"","title":"ChatGPT"},{"location":"glossary/#code-highlighter","text":"","title":"Code Highlighter"},{"location":"glossary/#computational-thinking","text":"Computational thinking is a way of solving problems and analyzing data by breaking it down into smaller parts and using algorithms and other tools to solve the problem. It is a thought process that is used in many different fields, from engineering to economics, and it is often used in computing and programming. Computational thinking involves breaking down a problem into smaller pieces and understanding how the pieces interact with one another, to create a solution.","title":"Computational Thinking"},{"location":"glossary/#deep-links","text":"The feature of a website that allows any subsection of a document to have its own URL that can be bookmarked and sent via chat.","title":"Deep Links"},{"location":"glossary/#fine-tuning","text":"","title":"Fine-Tuning"},{"location":"glossary/#generative-text","text":"","title":"Generative Text"},{"location":"glossary/#gpt","text":"Generative Pre-Trained machine learning models. This is the model use for both ChatGPT and GPT-3.","title":"GPT"},{"location":"glossary/#grammarly","text":"A cloud-based service that helps writers with spelling, grammar and writing style. Grammarly is also created using large langauge machine learning models.","title":"Grammarly"},{"location":"glossary/#markdown","text":"","title":"Markdown"},{"location":"glossary/#mermaid-markdown","text":"A text format for encoding diagrams. In January of 2022 GitHub announced built-in support for Mermaid diagrams into their Markdown variant rendered for README.md See Mermaid JS Website","title":"Mermaid Markdown"},{"location":"glossary/#natural-language-processing","text":"Also know as: NLP","title":"Natural Language Processing"},{"location":"glossary/#openai","text":"A small 400-person company (as of 2022) that created the GPT and ChatGPT large-language models. OpenAI has received over a billion dollars of investment from Microsoft for an exclusivity arrangement that prevents OpenAI from working with the other cloud providers (Google and Amazon)","title":"OpenAI"},{"location":"glossary/#prompt","text":"","title":"Prompt"},{"location":"glossary/#svg","text":"SVG means Scalable Vector Graphics. It is a standard format for generating vector images (not bitmaps) that can be easily generated by ChatGPT.","title":"SVG"},{"location":"glossary/#tokens","text":"Common sequences of characters found in text that are assigned numbers and used as inputs to machine learning models. The number of tokens in both prompts and responses are added together and must be under the token budget for a NLP model.","title":"Tokens"},{"location":"markdown-summary/","text":"Summary of Markdown Elements Header 1 (Document Title) # Header 1 Header Level 2 ## Header Level 2 Used as the main sections of a document. Header Level 3 ### Header Level 3 Used as the sub-sections of a document. Header Level 4 ### Header Level 3 Used as the sub-sub sections of a document and glossary terms. Bold **bold** Italics *italics* Numbered List One Two Three 1 2 3 1. One 2. Two 3. Three Bullet List Item Item Item 1 2 3 * Item * Item * Item Link 1 2 [Label](destination) [Link to Google](http://google.com) Link to Google Image 1 2 ![Alt Text](../img/path) ![Earth](https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/The_Blue_Marble_%28remastered%29.jpg/240px-The_Blue_Marble_%28remastered%29.jpg) Code Surround code with three backquotes: 1 print ( \"Hello World!) Tables Country Average Life Expectancy Average Annual Cost of Healthcare USA 78.9 years $10,348 Canada 82.2 years $4,826 Mexico 75.9 years $1,845 Brazil 75.2 years $1,845 Chile 79.7 years $2,845 Peru 74.9 years $1,845 Argentina 76.7 years $2,845 Colombia 73.7 years $1,845 Venezuela 73.7 years $1,845 Costa Rica 79.2 years $2,845 Mermaid Diagram","title":"Markdown Summary"},{"location":"markdown-summary/#summary-of-markdown-elements","text":"","title":"Summary of Markdown Elements"},{"location":"markdown-summary/#header-1-document-title","text":"# Header 1","title":"Header 1 (Document Title)"},{"location":"markdown-summary/#header-level-2","text":"## Header Level 2 Used as the main sections of a document.","title":"Header Level 2"},{"location":"markdown-summary/#header-level-3","text":"### Header Level 3 Used as the sub-sections of a document.","title":"Header Level 3"},{"location":"markdown-summary/#header-level-4","text":"### Header Level 3 Used as the sub-sub sections of a document and glossary terms. Bold **bold** Italics *italics* Numbered List One Two Three 1 2 3 1. One 2. Two 3. Three Bullet List Item Item Item 1 2 3 * Item * Item * Item Link 1 2 [Label](destination) [Link to Google](http://google.com) Link to Google Image 1 2 ![Alt Text](../img/path) ![Earth](https://upload.wikimedia.org/wikipedia/commons/thumb/c/cb/The_Blue_Marble_%28remastered%29.jpg/240px-The_Blue_Marble_%28remastered%29.jpg) Code Surround code with three backquotes: 1 print ( \"Hello World!) Tables Country Average Life Expectancy Average Annual Cost of Healthcare USA 78.9 years $10,348 Canada 82.2 years $4,826 Mexico 75.9 years $1,845 Brazil 75.2 years $1,845 Chile 79.7 years $2,845 Peru 74.9 years $1,845 Argentina 76.7 years $2,845 Colombia 73.7 years $1,845 Venezuela 73.7 years $1,845 Costa Rica 79.2 years $2,845 Mermaid Diagram","title":"Header Level 4"},{"location":"references/","text":"ChatGPT for Teachers References Grading GPT-3 For STEM Lesson Plan Content Generation Using AI to Generate Detailed Lesson Plans Dan McCreary's Blog 50 ChatGPT Prompts for Teachers ChatGPT as a Teacher: Where have you been all of my life? by Redditor SquatDeadliftBench on April 2nd, 2023","title":"References"},{"location":"references/#chatgpt-for-teachers-references","text":"Grading GPT-3 For STEM Lesson Plan Content Generation Using AI to Generate Detailed Lesson Plans Dan McCreary's Blog 50 ChatGPT Prompts for Teachers ChatGPT as a Teacher: Where have you been all of my life? by Redditor SquatDeadliftBench on April 2nd, 2023","title":"ChatGPT for Teachers References"},{"location":"slides/","text":"List of Slide Presentations for ChatGPT for Teachers MN Codes April 15th, 2023","title":"Slides"},{"location":"slides/#list-of-slide-presentations-for-chatgpt-for-teachers","text":"MN Codes April 15th, 2023","title":"List of Slide Presentations for ChatGPT for Teachers"},{"location":"tips-and-tricks/","text":"Prompt Guide Provide Context Grade level Tone Vocabulary Give Examples Include in your prompt examples of what you are looking for. If you want a list of things include the first items from a list. 1 2 3 4 5 6 7 Generate a list of topics for a class on Python: 1. Getting started 2. Variables 3. Conditionals 4. Loops 5. Debugging Ask questions To ensure the output is relevant and helpful, ask specific questions within the prompt. This will give the model a better understanding of what you\u2019re looking for. Output Format Most systems don't return results in formats such as MS-Word or MS-Powerpoint. HTML is also hard to read. Try using markdown format. Try Line Art Formats Refine, refine, refine. To get better results, make sure the prompt is specific and concise. Include the questions you want to ask and the context of the conversation, and think about the tone of the conversation as well. Step 6: Use the refined prompt to get better ChatGPT output. Test it out. Use the refined prompt to get a better sense of the output from ChatGPT. Ask the model questions and provide examples of the desired output. The more specific the prompt, the better the results will be. Step 7: Practice making better prompts. Practice makes perfect. Keep practicing and refining your prompts. As you gain more experience with ChatGPT, it will become easier to write better prompts that provide more useful output. With patience and practice, you\u2019ll be a pro at crafting ChatGPT prompts in no time.","title":"Tips and Tricks"},{"location":"tips-and-tricks/#prompt-guide","text":"","title":"Prompt Guide"},{"location":"tips-and-tricks/#provide-context","text":"Grade level Tone Vocabulary","title":"Provide Context"},{"location":"tips-and-tricks/#give-examples","text":"Include in your prompt examples of what you are looking for. If you want a list of things include the first items from a list. 1 2 3 4 5 6 7 Generate a list of topics for a class on Python: 1. Getting started 2. Variables 3. Conditionals 4. Loops 5. Debugging","title":"Give Examples"},{"location":"tips-and-tricks/#ask-questions","text":"To ensure the output is relevant and helpful, ask specific questions within the prompt. This will give the model a better understanding of what you\u2019re looking for.","title":"Ask questions"},{"location":"tips-and-tricks/#output-format","text":"Most systems don't return results in formats such as MS-Word or MS-Powerpoint. HTML is also hard to read. Try using markdown format.","title":"Output Format"},{"location":"tips-and-tricks/#try-line-art-formats","text":"Refine, refine, refine. To get better results, make sure the prompt is specific and concise. Include the questions you want to ask and the context of the conversation, and think about the tone of the conversation as well. Step 6: Use the refined prompt to get better ChatGPT output. Test it out. Use the refined prompt to get a better sense of the output from ChatGPT. Ask the model questions and provide examples of the desired output. The more specific the prompt, the better the results will be. Step 7: Practice making better prompts. Practice makes perfect. Keep practicing and refining your prompts. As you gain more experience with ChatGPT, it will become easier to write better prompts that provide more useful output. With patience and practice, you\u2019ll be a pro at crafting ChatGPT prompts in no time.","title":"Try Line Art Formats"},{"location":"advanced-topics/","text":"Advanced Topics Many of these topics require either complex prompts or Python programming skills. Classification Costs Fine Tuning Embeddings - small numbers that can be placed directly in a prompt","title":"Intro"},{"location":"advanced-topics/#advanced-topics","text":"Many of these topics require either complex prompts or Python programming skills. Classification Costs Fine Tuning Embeddings - small numbers that can be placed directly in a prompt","title":"Advanced Topics"},{"location":"advanced-topics/alternatives/","text":"","title":"Alternatives"},{"location":"advanced-topics/classification/","text":"Classification ChatGPT can be given a list of classifications and then a text item. You can then ask ChatGPT to indicate what classification to give the item. For example, you could have a student feedback form where students fill in a large block of narrative text. You can then create a three-state classification system: Positive Neutral Negative You can then write a program to automatically chart your class sentiment over time. Engine Settings Consistency We want consistent results over time. So we don't want any creativity. Make sure to set Temperature = 0 Difficulty Classification In our CoderDojo classrooms, we have a set of \"Concept Cards\" that are marked as Green, Blue or Black for successive levels of difficulty. We encourage new students to first do the easy green exercises. For each programming exercise, you can classify the lab as beginner, intermediate or advanced. Prompt 1 2 3 Here is a description of a programming task. Classify this task as beginner, intermediate, or adanced. In this lab you will write python code to monitor the voltage on a potentiometer using an ADC pin. The output will be printed to the screen. Response 1 Intermediate Prompt 1 In this lab you will use Python to create a list of colors and then print them out. Response 1 Beginner Feedback Classification Decide whether a Tweet's sentiment is positive, neutral, or negative. Default Classification - works on a single tweet Tweet Feedback Classification Advanced Tweet Classification - works on a large number of tweets in a single file Taxonomy Classification You can give ChatGPT a named taxonomy such as Dewey Decimal system. Prompt What dewey decimal number and classification label would you assign this text: Response The history of computers goes back over 200 years. At first theorized by mathematicians and entrepreneurs, during the 19th century mechanical calculating machines were designed and built to solve the increasingly complex number-crunching challenges. The advancement of technology enabled ever more-complex computers by the early 20th century, and computers became larger and more powerful. 004.093/Technology: History of Computers You can use this","title":"Classification"},{"location":"advanced-topics/classification/#classification","text":"ChatGPT can be given a list of classifications and then a text item. You can then ask ChatGPT to indicate what classification to give the item. For example, you could have a student feedback form where students fill in a large block of narrative text. You can then create a three-state classification system: Positive Neutral Negative You can then write a program to automatically chart your class sentiment over time.","title":"Classification"},{"location":"advanced-topics/classification/#engine-settings","text":"","title":"Engine Settings"},{"location":"advanced-topics/classification/#consistency","text":"We want consistent results over time. So we don't want any creativity. Make sure to set Temperature = 0","title":"Consistency"},{"location":"advanced-topics/classification/#difficulty-classification","text":"In our CoderDojo classrooms, we have a set of \"Concept Cards\" that are marked as Green, Blue or Black for successive levels of difficulty. We encourage new students to first do the easy green exercises. For each programming exercise, you can classify the lab as beginner, intermediate or advanced.","title":"Difficulty Classification"},{"location":"advanced-topics/classification/#prompt","text":"1 2 3 Here is a description of a programming task. Classify this task as beginner, intermediate, or adanced. In this lab you will write python code to monitor the voltage on a potentiometer using an ADC pin. The output will be printed to the screen.","title":"Prompt"},{"location":"advanced-topics/classification/#response","text":"1 Intermediate","title":"Response"},{"location":"advanced-topics/classification/#prompt_1","text":"1 In this lab you will use Python to create a list of colors and then print them out.","title":"Prompt"},{"location":"advanced-topics/classification/#response_1","text":"1 Beginner","title":"Response"},{"location":"advanced-topics/classification/#feedback-classification","text":"Decide whether a Tweet's sentiment is positive, neutral, or negative. Default Classification - works on a single tweet Tweet Feedback Classification Advanced Tweet Classification - works on a large number of tweets in a single file","title":"Feedback Classification"},{"location":"advanced-topics/classification/#taxonomy-classification","text":"You can give ChatGPT a named taxonomy such as Dewey Decimal system.","title":"Taxonomy Classification"},{"location":"advanced-topics/classification/#prompt_2","text":"What dewey decimal number and classification label would you assign this text:","title":"Prompt"},{"location":"advanced-topics/classification/#response_2","text":"The history of computers goes back over 200 years. At first theorized by mathematicians and entrepreneurs, during the 19th century mechanical calculating machines were designed and built to solve the increasingly complex number-crunching challenges. The advancement of technology enabled ever more-complex computers by the early 20th century, and computers became larger and more powerful. 004.093/Technology: History of Computers You can use this","title":"Response"},{"location":"advanced-topics/code-interpreter/","text":"Code interpreter Code Interpreter is a ChatGPT model that can directly execute Python code that it generates. It can match tasks to workflows so that the results of data analysis might pick different next steps. It can also handle uploads and downloads of dataset that is read by Python or written by Python code. We provide our models with a working Python interpreter in a sandboxed, firewalled execution environment, along with some ephemeral disk space. Code run by our interpreter plugin is evaluated in a persistent session that is alive for the duration of a chat conversation (with an upper-bound timeout) and subsequent calls can build on top of each other. We support uploading files to the current conversation workspace and downloading the results of your work. Sample Workflow","title":"Code interpreter"},{"location":"advanced-topics/code-interpreter/#code-interpreter","text":"Code Interpreter is a ChatGPT model that can directly execute Python code that it generates. It can match tasks to workflows so that the results of data analysis might pick different next steps. It can also handle uploads and downloads of dataset that is read by Python or written by Python code. We provide our models with a working Python interpreter in a sandboxed, firewalled execution environment, along with some ephemeral disk space. Code run by our interpreter plugin is evaluated in a persistent session that is alive for the duration of a chat conversation (with an upper-bound timeout) and subsequent calls can build on top of each other. We support uploading files to the current conversation workspace and downloading the results of your work.","title":"Code interpreter"},{"location":"advanced-topics/code-interpreter/#sample-workflow","text":"","title":"Sample Workflow"},{"location":"advanced-topics/costs/","text":"Minimizing Part Costs We can use generative AI to help suggest what parts to purchase for science kits. One kit that is both really fun and has a high ability to teach computational thinking is a collision avoidance robot. Here is how we used ChatGPT to guide our purchasing. Sample Prompt Generate a list of low-cost parts that can be used to build a STEM Robot. Include two DC hobby motors, and a Raspberry Pi Pico. Return the results in a table that has three columns: 1. Part Name 2. Part Description 3. Part Cost Then suggestion some lesson plans that teach computational thinking. Return the entire result in pure raw markdown. Double check to make sure you only return pure raw markdown. Response ChatGPT did return a table, but it put it in a pretty table within the ChatGPT GUI. So I had to ask it to \"regenerate the prior response again only pure raw markdown\" before I could copy and paste the results into this page. Low-Cost Parts for a STEM Robot Part Name Part Description Part Cost Raspberry Pi Pico A microcontroller board with RP2040 chip, widely used in hobby projects $4 DC Hobby Motor (x2) Small motors suitable for driving robot wheels or other moving parts $3 each ($6 total) L298N Motor Driver Allows control of DC motors using the Raspberry Pi Pico $5 2-Wheel Robot Chassis A basic frame with holders for motors and wheels $7 Small Breadboard For prototyping and connecting components without soldering $2 Jumper Wires (M/F & M/M) Wires to connect components on breadboard and Raspberry Pi Pico $3 AA Battery Holder (x2) Holds batteries for powering the motors $1 each ($2 total) AA Batteries (x4) Standard AA batteries to power the motors $2 (for 4) USB Micro Cable To power and program the Raspberry Pi Pico $2 IR Sensor Pair For basic obstacle detection $3 Push Button For triggering specific functions or for starting/stopping the robot $0.50 Total Cost: ~$36.50 (Prices may vary depending on the vendor and location.) Lesson Plans for Computational Thinking: Algorithm Design with Motor Movements: Objective: Students will learn how to write a sequence of instructions to make the robot move in specific patterns. Activity: Provide students with a maze or track. Ask them to write instructions to navigate through it. Looping with Obstacle Avoidance: Objective: Introduce the concept of loops in programming. Activity: Program the robot to move in a square pattern until it detects an obstacle, then stop. Conditional Statements with Sensors: Objective: Understand how to make decisions based on sensor input. Activity: Program the robot to move forward until it detects an obstacle. If an obstacle is detected on the left, turn right, and vice versa. Variables and Data: Objective: Learn how to use variables to store and manipulate data. Activity: Measure the distance the robot travels in a straight line for 5 seconds. Calculate and display the speed of the robot. Functions and Modularity: Objective: Introduce the concept of functions to break down a problem into smaller parts. Activity: Create functions for common movements like turnLeft() , moveForward() , etc., and use them to simplify the robot's control code. Debugging and Problem Solving: Objective: Understand the importance of troubleshooting and refining code. Activity: Introduce intentional errors in a given code. Students should identify and correct them to make the robot function properly. Analysis The result was pretty good. But by doing high-quality sourcing and bundling we can get the costs under $19 by using a \"Smart Car Chassis 2WD\" and a Cytron Maker Pi RP2040 board. The dataset used to train ChatGPT-4 is \"frozen in time\" back in September of 2021. Since then the low-cost $3 VL53L0X IIC I2C To Time-of-flight Infrared measurement Distance Sensor have become very popular and have replace the IR sensors. Because the Cytron boards support IIC interfaces these are a perfect choice for low-cost robots. Note Most Smart Car Chassis kits include two DC motors and the battery holder. Note that although ChatGPT knew that we could build a robot for under $40, it didn't really understand the consequence that the Raspberry Pi Pico supports IIC and that both motor controllers and sensors that use these standards make it easier for students to learn robotics using low-cost parts. References Cytron Maker Pi RP2040 Raspberry Pi Pico Robot in Micropython - note this is an older design that didn't leverage the IIC and Cytron boards. Our 2023 STEM Robot Update","title":"Minimizing Part Costs"},{"location":"advanced-topics/costs/#minimizing-part-costs","text":"We can use generative AI to help suggest what parts to purchase for science kits. One kit that is both really fun and has a high ability to teach computational thinking is a collision avoidance robot. Here is how we used ChatGPT to guide our purchasing.","title":"Minimizing Part Costs"},{"location":"advanced-topics/costs/#sample-prompt","text":"Generate a list of low-cost parts that can be used to build a STEM Robot. Include two DC hobby motors, and a Raspberry Pi Pico. Return the results in a table that has three columns: 1. Part Name 2. Part Description 3. Part Cost Then suggestion some lesson plans that teach computational thinking. Return the entire result in pure raw markdown. Double check to make sure you only return pure raw markdown.","title":"Sample Prompt"},{"location":"advanced-topics/costs/#response","text":"ChatGPT did return a table, but it put it in a pretty table within the ChatGPT GUI. So I had to ask it to \"regenerate the prior response again only pure raw markdown\" before I could copy and paste the results into this page.","title":"Response"},{"location":"advanced-topics/costs/#low-cost-parts-for-a-stem-robot","text":"Part Name Part Description Part Cost Raspberry Pi Pico A microcontroller board with RP2040 chip, widely used in hobby projects $4 DC Hobby Motor (x2) Small motors suitable for driving robot wheels or other moving parts $3 each ($6 total) L298N Motor Driver Allows control of DC motors using the Raspberry Pi Pico $5 2-Wheel Robot Chassis A basic frame with holders for motors and wheels $7 Small Breadboard For prototyping and connecting components without soldering $2 Jumper Wires (M/F & M/M) Wires to connect components on breadboard and Raspberry Pi Pico $3 AA Battery Holder (x2) Holds batteries for powering the motors $1 each ($2 total) AA Batteries (x4) Standard AA batteries to power the motors $2 (for 4) USB Micro Cable To power and program the Raspberry Pi Pico $2 IR Sensor Pair For basic obstacle detection $3 Push Button For triggering specific functions or for starting/stopping the robot $0.50 Total Cost: ~$36.50 (Prices may vary depending on the vendor and location.)","title":"Low-Cost Parts for a STEM Robot"},{"location":"advanced-topics/costs/#lesson-plans-for-computational-thinking","text":"Algorithm Design with Motor Movements: Objective: Students will learn how to write a sequence of instructions to make the robot move in specific patterns. Activity: Provide students with a maze or track. Ask them to write instructions to navigate through it. Looping with Obstacle Avoidance: Objective: Introduce the concept of loops in programming. Activity: Program the robot to move in a square pattern until it detects an obstacle, then stop. Conditional Statements with Sensors: Objective: Understand how to make decisions based on sensor input. Activity: Program the robot to move forward until it detects an obstacle. If an obstacle is detected on the left, turn right, and vice versa. Variables and Data: Objective: Learn how to use variables to store and manipulate data. Activity: Measure the distance the robot travels in a straight line for 5 seconds. Calculate and display the speed of the robot. Functions and Modularity: Objective: Introduce the concept of functions to break down a problem into smaller parts. Activity: Create functions for common movements like turnLeft() , moveForward() , etc., and use them to simplify the robot's control code. Debugging and Problem Solving: Objective: Understand the importance of troubleshooting and refining code. Activity: Introduce intentional errors in a given code. Students should identify and correct them to make the robot function properly.","title":"Lesson Plans for Computational Thinking:"},{"location":"advanced-topics/costs/#analysis","text":"The result was pretty good. But by doing high-quality sourcing and bundling we can get the costs under $19 by using a \"Smart Car Chassis 2WD\" and a Cytron Maker Pi RP2040 board. The dataset used to train ChatGPT-4 is \"frozen in time\" back in September of 2021. Since then the low-cost $3 VL53L0X IIC I2C To Time-of-flight Infrared measurement Distance Sensor have become very popular and have replace the IR sensors. Because the Cytron boards support IIC interfaces these are a perfect choice for low-cost robots. Note Most Smart Car Chassis kits include two DC motors and the battery holder. Note that although ChatGPT knew that we could build a robot for under $40, it didn't really understand the consequence that the Raspberry Pi Pico supports IIC and that both motor controllers and sensors that use these standards make it easier for students to learn robotics using low-cost parts.","title":"Analysis"},{"location":"advanced-topics/costs/#references","text":"Cytron Maker Pi RP2040 Raspberry Pi Pico Robot in Micropython - note this is an older design that didn't leverage the IIC and Cytron boards. Our 2023 STEM Robot Update","title":"References"},{"location":"advanced-topics/data-analysis/","text":"Data Analysis In this lesson, we will use data from the World Bank to look at the corrolation between expenditure on education and literacy rates for different countries around the world. Here is our process: Don't look at the data files. Just have ChatGPT figure out the data formats. Ask ChatGPT to create a data dictionary for each input file Ask ChatGPT to create a 2D scatter plot with a point for each country Ask ChatGPT to \"Find any insights in this data?\" Then ask ChatGPT to look for root causes of the patterns in the data Ask ChatGPT to suggest ways that countries can improve the effectiveness of their spending on education Finally, ask ChatGPT to suggest how countries could improve computer literacy Load CSV Files And Build a Data Dictionary Prompt Computer Literacy Prompt What about computer literacy? How can countries spend wisely to make sure that their students become computer literate? Response Computer literacy, in today's digital age, is fundamental for personal and professional development. Ensuring students are computer literate requires not just investment in infrastructure but also in curriculum development, teacher training, and fostering an environment of digital inclusivity. Here are some strategies and policies countries can pursue to spend wisely on promoting computer literacy: Infrastructure Investment : Affordable Devices : Procure cost-effective computing devices for schools. Consider devices like tablets or Chromebooks, which can be more affordable than traditional PCs. Reliable Internet Access : Ensure schools have reliable and fast internet connectivity. This is essential for accessing online resources and cloud-based applications. Curriculum Integration : Age-Appropriate Introduction : Introduce computer literacy from an early age, with content appropriate for each grade level. Incorporate Coding : Introduce basic coding and computational thinking as part of the curriculum. Tools like Scratch make this accessible even for younger students. Teacher Training : Professional Development : Regularly train teachers in the latest digital tools and educational technologies. Hire Specialists : Consider hiring computer science or IT specialists for advanced courses at higher grade levels. Public-Private Partnerships : Collaborate with tech companies for software licenses, hardware donations, or even training programs. Many companies have initiatives aimed at promoting computer literacy in schools. Online Learning Platforms : Use online platforms and resources, such as Khan Academy, Codecademy, or Coursera, which offer courses in computer science and programming. Inclusive Digital Education : Ensure that digital education resources are accessible to students with disabilities. This includes screen readers, adaptive keyboards, and other assistive technologies. Safe and Responsible Use : Along with computer literacy, teach students about cyber safety, digital etiquette, and the responsible use of technology. Community Engagement : Organize community tech days or hackathons where students can showcase their digital projects. This not only promotes computer literacy but also fosters a community spirit around digital innovation. Engage with local tech communities or groups for mentorship programs. Continuous Evaluation : Regularly assess the computer literacy levels of students to identify areas of improvement. Update the curriculum and teaching methods based on evolving technological trends. Open Source Tools : Utilize open-source software, which can be a cost-effective way to introduce students to a wide range of applications without the burden of licensing fees. Digital Libraries and Labs : Set up digital labs or resource centers where students can access computers and digital resources after school hours. Foster a Culture of Creativity : Encourage students to use technology not just for consumption but for creation. This can be through digital art, coding projects, website design, or any other creative endeavor. Feedback Mechanisms : Implement feedback systems where students and teachers can provide insights into the effectiveness of computer literacy programs. Benchmark and Collaborate : Benchmark against countries with successful computer literacy programs. Collaborate internationally to share resources, training programs, and best practices. By integrating computer literacy seamlessly into the broader educational framework and ensuring that investments are made in both hardware and human capacity building, countries can ensure that their students are well-prepared for the digital age.","title":"Data Analysis"},{"location":"advanced-topics/data-analysis/#data-analysis","text":"In this lesson, we will use data from the World Bank to look at the corrolation between expenditure on education and literacy rates for different countries around the world. Here is our process: Don't look at the data files. Just have ChatGPT figure out the data formats. Ask ChatGPT to create a data dictionary for each input file Ask ChatGPT to create a 2D scatter plot with a point for each country Ask ChatGPT to \"Find any insights in this data?\" Then ask ChatGPT to look for root causes of the patterns in the data Ask ChatGPT to suggest ways that countries can improve the effectiveness of their spending on education Finally, ask ChatGPT to suggest how countries could improve computer literacy","title":"Data Analysis"},{"location":"advanced-topics/data-analysis/#load-csv-files-and-build-a-data-dictionary","text":"Prompt","title":"Load CSV Files And Build a Data Dictionary"},{"location":"advanced-topics/data-analysis/#computer-literacy","text":"","title":"Computer Literacy"},{"location":"advanced-topics/data-analysis/#prompt","text":"What about computer literacy? How can countries spend wisely to make sure that their students become computer literate?","title":"Prompt"},{"location":"advanced-topics/data-analysis/#response","text":"Computer literacy, in today's digital age, is fundamental for personal and professional development. Ensuring students are computer literate requires not just investment in infrastructure but also in curriculum development, teacher training, and fostering an environment of digital inclusivity. Here are some strategies and policies countries can pursue to spend wisely on promoting computer literacy: Infrastructure Investment : Affordable Devices : Procure cost-effective computing devices for schools. Consider devices like tablets or Chromebooks, which can be more affordable than traditional PCs. Reliable Internet Access : Ensure schools have reliable and fast internet connectivity. This is essential for accessing online resources and cloud-based applications. Curriculum Integration : Age-Appropriate Introduction : Introduce computer literacy from an early age, with content appropriate for each grade level. Incorporate Coding : Introduce basic coding and computational thinking as part of the curriculum. Tools like Scratch make this accessible even for younger students. Teacher Training : Professional Development : Regularly train teachers in the latest digital tools and educational technologies. Hire Specialists : Consider hiring computer science or IT specialists for advanced courses at higher grade levels. Public-Private Partnerships : Collaborate with tech companies for software licenses, hardware donations, or even training programs. Many companies have initiatives aimed at promoting computer literacy in schools. Online Learning Platforms : Use online platforms and resources, such as Khan Academy, Codecademy, or Coursera, which offer courses in computer science and programming. Inclusive Digital Education : Ensure that digital education resources are accessible to students with disabilities. This includes screen readers, adaptive keyboards, and other assistive technologies. Safe and Responsible Use : Along with computer literacy, teach students about cyber safety, digital etiquette, and the responsible use of technology. Community Engagement : Organize community tech days or hackathons where students can showcase their digital projects. This not only promotes computer literacy but also fosters a community spirit around digital innovation. Engage with local tech communities or groups for mentorship programs. Continuous Evaluation : Regularly assess the computer literacy levels of students to identify areas of improvement. Update the curriculum and teaching methods based on evolving technological trends. Open Source Tools : Utilize open-source software, which can be a cost-effective way to introduce students to a wide range of applications without the burden of licensing fees. Digital Libraries and Labs : Set up digital labs or resource centers where students can access computers and digital resources after school hours. Foster a Culture of Creativity : Encourage students to use technology not just for consumption but for creation. This can be through digital art, coding projects, website design, or any other creative endeavor. Feedback Mechanisms : Implement feedback systems where students and teachers can provide insights into the effectiveness of computer literacy programs. Benchmark and Collaborate : Benchmark against countries with successful computer literacy programs. Collaborate internationally to share resources, training programs, and best practices. By integrating computer literacy seamlessly into the broader educational framework and ensuring that investments are made in both hardware and human capacity building, countries can ensure that their students are well-prepared for the digital age.","title":"Response"},{"location":"advanced-topics/embeddings/","text":"Embeddings Embeddings are numerical representations of concepts converted to number sequences. They can be used to find out how similar words, sentences, or paragraphs are to each other. They can also be used to find similar lessons or similar code examples. Embeddings make it easy for computers to understand the relationships between any concepts. They are often used increasing the quality of search results. From the OpenAI announcement: Embeddings make it easy to perform natural language and code tasks like semantic search, clustering, topic modeling, and classification. Our embeddings outperform top models in 3 standard benchmarks, including a 20% relative improvement in code search. Understanding Graph Embeddings https://openai.com/blog/introducing-text-and-code-embeddings/ Question Answering using Embeddings","title":"Embeddings"},{"location":"advanced-topics/embeddings/#embeddings","text":"Embeddings are numerical representations of concepts converted to number sequences. They can be used to find out how similar words, sentences, or paragraphs are to each other. They can also be used to find similar lessons or similar code examples. Embeddings make it easy for computers to understand the relationships between any concepts. They are often used increasing the quality of search results. From the OpenAI announcement: Embeddings make it easy to perform natural language and code tasks like semantic search, clustering, topic modeling, and classification. Our embeddings outperform top models in 3 standard benchmarks, including a 20% relative improvement in code search. Understanding Graph Embeddings https://openai.com/blog/introducing-text-and-code-embeddings/ Question Answering using Embeddings","title":"Embeddings"},{"location":"advanced-topics/fine-tuning/","text":"Fine Tuning Some generative tasks like generating multiple-choice questions require large prompts that can use up your token budgets and increase the cost of generating content. We can lower the costs of these task-specific topics by fine-tuning GPT. This is done by creating a file of prompt-response pairs as examples of what you want the large language model to return. As of February of 2023, fine-tuning can only be done by people that have some experience with Python coding. Many startup companies are working to make this easier and build custom applications that non-programmers can use. OpenAI has extensive documentation on how to call the OpenAI APIs for fine-tuning here: References Fine-tuning a Classifier to Improve Truthfulness OpenAI GPT-3 Fine tuning Guide, with examples","title":"Fine Tuning"},{"location":"advanced-topics/fine-tuning/#fine-tuning","text":"Some generative tasks like generating multiple-choice questions require large prompts that can use up your token budgets and increase the cost of generating content. We can lower the costs of these task-specific topics by fine-tuning GPT. This is done by creating a file of prompt-response pairs as examples of what you want the large language model to return. As of February of 2023, fine-tuning can only be done by people that have some experience with Python coding. Many startup companies are working to make this easier and build custom applications that non-programmers can use. OpenAI has extensive documentation on how to call the OpenAI APIs for fine-tuning here:","title":"Fine Tuning"},{"location":"advanced-topics/fine-tuning/#references","text":"Fine-tuning a Classifier to Improve Truthfulness OpenAI GPT-3 Fine tuning Guide, with examples","title":"References"},{"location":"concepts/","text":"ChatGPT Concepts Prompts Tokens Output Formats","title":"Intro"},{"location":"concepts/#chatgpt-concepts","text":"Prompts Tokens Output Formats","title":"ChatGPT Concepts"},{"location":"concepts/abstraction/","text":"Teaching Abstraction Our focus is students that are around 10 years old. Abstraction is a fundamental concept in computer science, and it is important for students to understand it early on in their programming education. Abstraction allows programmers to focus on the important details of a problem, while ignoring the less important details. This can make programs more efficient and easier to understand. There are a number of ways to teach abstraction to 10-year old students. One way is to use analogies and metaphors. For example, you could compare abstraction to building a house. When you build a house, you don't need to worry about the individual atoms that make up the wood, bricks, and concrete. You just need to know how to put those materials together to create a structure that meets your needs. Another way to teach abstraction is to use examples from everyday life. For example, you could ask students to think about how they would describe a chair to someone who has never seen one before. Students would need to identify the important features of a chair, such as its shape, size, and function. They would also need to ignore the less important details, such as the color of the chair or the material it is made of. Once students have a basic understanding of abstraction, you can start to introduce them to more complex concepts, such as functions and objects. Functions are blocks of code that can be reused in different parts of a program. Objects are collections of data and functions that represent real-world objects. Teaching abstraction can be challenging, but it is an important skill for students to learn. By understanding abstraction, students will be able to write more efficient and easier to understand programs. Here are some additional tips for teaching abstraction to 10-year old students: Start with simple examples. Don't try to teach too much too soon. Use analogies and metaphors to help students understand the concept. Make it fun! Abstraction can be a dry topic, so try to make it as engaging as possible. Try using graphics, colors and shapes in your labs. Be patient. It takes time for students to master this concept. Use repetition to reinforce these concepts.","title":"Abstraction"},{"location":"concepts/abstraction/#teaching-abstraction","text":"Our focus is students that are around 10 years old. Abstraction is a fundamental concept in computer science, and it is important for students to understand it early on in their programming education. Abstraction allows programmers to focus on the important details of a problem, while ignoring the less important details. This can make programs more efficient and easier to understand. There are a number of ways to teach abstraction to 10-year old students. One way is to use analogies and metaphors. For example, you could compare abstraction to building a house. When you build a house, you don't need to worry about the individual atoms that make up the wood, bricks, and concrete. You just need to know how to put those materials together to create a structure that meets your needs. Another way to teach abstraction is to use examples from everyday life. For example, you could ask students to think about how they would describe a chair to someone who has never seen one before. Students would need to identify the important features of a chair, such as its shape, size, and function. They would also need to ignore the less important details, such as the color of the chair or the material it is made of. Once students have a basic understanding of abstraction, you can start to introduce them to more complex concepts, such as functions and objects. Functions are blocks of code that can be reused in different parts of a program. Objects are collections of data and functions that represent real-world objects. Teaching abstraction can be challenging, but it is an important skill for students to learn. By understanding abstraction, students will be able to write more efficient and easier to understand programs. Here are some additional tips for teaching abstraction to 10-year old students: Start with simple examples. Don't try to teach too much too soon. Use analogies and metaphors to help students understand the concept. Make it fun! Abstraction can be a dry topic, so try to make it as engaging as possible. Try using graphics, colors and shapes in your labs. Be patient. It takes time for students to master this concept. Use repetition to reinforce these concepts.","title":"Teaching Abstraction"},{"location":"concepts/ethics/","text":"Ethics of Large Language Models and Generative AI Not everyone agrees we should use generative AI tools that are trained on the hard work of others. With any new technology, there are always tradeoffs. Topics for discussion Will being able to quickly generate your own curriculum discourage teachers from working together to share content? Will your generated content use current libraries or will they tend to use older libraries that are being deprecated? Are you violating the spirit of open-source communities if you don't visit their websites for help? How can we guarantee we are using best practices in our code? Can code be too \"dense\" or have too many comments?","title":"Ethics"},{"location":"concepts/ethics/#ethics-of-large-language-models-and-generative-ai","text":"Not everyone agrees we should use generative AI tools that are trained on the hard work of others. With any new technology, there are always tradeoffs.","title":"Ethics of Large Language Models and Generative AI"},{"location":"concepts/ethics/#topics-for-discussion","text":"Will being able to quickly generate your own curriculum discourage teachers from working together to share content? Will your generated content use current libraries or will they tend to use older libraries that are being deprecated? Are you violating the spirit of open-source communities if you don't visit their websites for help? How can we guarantee we are using best practices in our code? Can code be too \"dense\" or have too many comments?","title":"Topics for discussion"},{"location":"concepts/output-formats/","text":"Output Formats Many generative AI applications only return plain text by default. Some user interfaces such as ChatGPT and BARD also can return formatting such as headers, bold, italics, lists and tables. However, unless you are careful, this formatting might get lost as you copy and paste the content into your content authoring system. Here are some tips to retain these formats an also have these tools generate more advanced graphical formats. Text types: Markdown - a standard simple set of formats that can be generated by Markdown tables - a way to preserve tabular data within a markdown file HTML - The markup format of the web. HTML includes links (hypertext) to Markup Languages SVG - a way to encode scalable vector graphics in your output. This works well for simple shapes such as a square, a circle or a grid, but does not work for more complex shape such as a heart. Mermaid - a format for graphical layouts such as shapes connected with arrows Dot - Dot Example from BARD Prompt: Create a causal loop diagram that explains the operation of a thermostat. Return the results in \"dot\" layout format. Label the \"Balancing\" loop. results: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 digraph thermostat { node [shape=box]; \"Set temperature\" -> \"Actual temperature\"; \"Actual temperature\" -> \"Thermostat\"; \"Thermostat\" -> \"Heating\"; \"Heating\" -> \"Actual temperature\"; \"Actual temperature\" -> \"Cooling\"; \"Cooling\" -> \"Actual temperature\"; \"Set temperature\" [label=\"Set temperature\"]; \"Actual temperature\" [label=\"Actual temperature\"]; \"Thermostat\" [label=\"Thermostat\"]; \"Heating\" [label=\"Heating\"]; \"Cooling\" [label=\"Cooling\"]; // Add Balancing label \"Actual temperature\" -> \"Thermostat\" [label=\"Balancing\"]; } Online viewer: https://dreampuf.github.io/GraphvizOnline/ Image result:","title":"Output Formats"},{"location":"concepts/output-formats/#output-formats","text":"Many generative AI applications only return plain text by default. Some user interfaces such as ChatGPT and BARD also can return formatting such as headers, bold, italics, lists and tables. However, unless you are careful, this formatting might get lost as you copy and paste the content into your content authoring system. Here are some tips to retain these formats an also have these tools generate more advanced graphical formats. Text types: Markdown - a standard simple set of formats that can be generated by Markdown tables - a way to preserve tabular data within a markdown file HTML - The markup format of the web. HTML includes links (hypertext) to Markup Languages SVG - a way to encode scalable vector graphics in your output. This works well for simple shapes such as a square, a circle or a grid, but does not work for more complex shape such as a heart. Mermaid - a format for graphical layouts such as shapes connected with arrows Dot -","title":"Output Formats"},{"location":"concepts/output-formats/#dot-example-from-bard","text":"Prompt: Create a causal loop diagram that explains the operation of a thermostat. Return the results in \"dot\" layout format. Label the \"Balancing\" loop. results: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 digraph thermostat { node [shape=box]; \"Set temperature\" -> \"Actual temperature\"; \"Actual temperature\" -> \"Thermostat\"; \"Thermostat\" -> \"Heating\"; \"Heating\" -> \"Actual temperature\"; \"Actual temperature\" -> \"Cooling\"; \"Cooling\" -> \"Actual temperature\"; \"Set temperature\" [label=\"Set temperature\"]; \"Actual temperature\" [label=\"Actual temperature\"]; \"Thermostat\" [label=\"Thermostat\"]; \"Heating\" [label=\"Heating\"]; \"Cooling\" [label=\"Cooling\"]; // Add Balancing label \"Actual temperature\" -> \"Thermostat\" [label=\"Balancing\"]; } Online viewer: https://dreampuf.github.io/GraphvizOnline/ Image result:","title":"Dot Example from BARD"},{"location":"concepts/prompts/","text":"Prompts Prompts are the commands that we give ChatGPT. They are formulated in simple English language and are intuitive to create. You can also tell ChatGPT the output format you want it to return. Sample Output Formats You can add \"as a list\" or \"as a table\" to your prompt. Example: States in the Midwest as a list Maximum Length The ChatGPT released in November 2022 has a maximum length of 4,000 tokens. We will define exactly what tokens are in our next lesson.","title":"Prompts"},{"location":"concepts/prompts/#prompts","text":"Prompts are the commands that we give ChatGPT. They are formulated in simple English language and are intuitive to create. You can also tell ChatGPT the output format you want it to return.","title":"Prompts"},{"location":"concepts/prompts/#sample-output-formats","text":"You can add \"as a list\" or \"as a table\" to your prompt. Example: States in the Midwest as a list","title":"Sample Output Formats"},{"location":"concepts/prompts/#maximum-length","text":"The ChatGPT released in November 2022 has a maximum length of 4,000 tokens. We will define exactly what tokens are in our next lesson.","title":"Maximum Length"},{"location":"concepts/tokens/","text":"Tokens The GPT family of models process text using tokens, which are common sequences of characters found in text. The models understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens. Budget: 4,000 tokens Prompt + Response What are tokens and how to count them? OpenAI GPT Tokenizer","title":"Tokens"},{"location":"concepts/tokens/#tokens","text":"The GPT family of models process text using tokens, which are common sequences of characters found in text. The models understand the statistical relationships between these tokens, and excel at producing the next token in a sequence of tokens. Budget: 4,000 tokens Prompt + Response What are tokens and how to count them? OpenAI GPT Tokenizer","title":"Tokens"},{"location":"demos/","text":"Generative AI Interactive Demos A large number of subjects in a high school curriculum can be enhanced with the use of interactive charts or simulations. Here are a few examples: Physics: Many concepts in physics, such as Newton's laws, motion, gravitational force, electrical circuits, waves, and quantum mechanics, can be difficult to understand from a textbook. Simulations can provide a hands-on understanding of these concepts and phenomena. Chemistry: Molecular structures, reactions, periodic table trends, and the concept of moles and stoichiometry can be easier to grasp with interactive visualizations. Biology: Processes like cellular respiration, photosynthesis, DNA replication, meiosis and mitosis, and ecosystem interactions can be better explained using interactive charts or simulations. Mathematics: Topics like geometry (shapes, angles, transformations), calculus (derivatives, integrals), and statistics (probability distributions, hypothesis testing) can be better understood with the help of interactive visualizations. Geography: Understanding the physical layout of continents, countries, and cities, as well as climatic zones and ocean currents, can be greatly aided by interactive maps. Economics: Concepts like supply and demand, market equilibrium, effects of fiscal and monetary policy, and international trade can be explained using interactive graphs. Computer Science: Algorithms and data structures can be better understood by visualizing them. Coding concepts like loops, functions, and recursion can also be visualized. History: Interactive timelines can be a great way to understand the sequence of historical events, how they overlap, and their impact on each other. Earth Science: Simulations can help in understanding geological processes such as plate tectonics, the water cycle, or weather patterns. Astronomy: The movement of celestial bodies, phases of the moon, solar and lunar eclipses, or understanding constellations are much easier with interactive simulations. These are just a few examples. The potential for interactive teaching and learning is vast and can enhance understanding and retention of complex concepts across virtually any subject. Using Generative AI To Generate Interactive Simulations In the past, most learning happen when students read books and listened to lectures. Today we can use generative AI to generate fun and exciting interactive web pages that allow students to interact with their subjects. There are many libraries of tools to allow us to use tools like ChatGPT to generate these web applications directly from our prompts. We just need to know what library to reference and how to test the apps that generative AI generates. Matter.js Ball Bounce Example Matter.js is a tool that does simple physic simulations. Matter Ball Bounce Cartesian Coordinate Drawing Prompt: Generate a cartesian grid drawing using SVG. Create an SVG canvas of 400x400. Place the origin in the lower-left corner. Draw grids that are solid lines ever 100 and dashed lines every 50. Cartesian 1 Cartesian 1 Processing Processing is a tool for doing 2D animations. I want to thank Val Lockhart and Troy Peterson for suggesting we use ChatGPT to generate processing code. Processing Examples","title":"Intro"},{"location":"demos/#generative-ai-interactive-demos","text":"A large number of subjects in a high school curriculum can be enhanced with the use of interactive charts or simulations. Here are a few examples: Physics: Many concepts in physics, such as Newton's laws, motion, gravitational force, electrical circuits, waves, and quantum mechanics, can be difficult to understand from a textbook. Simulations can provide a hands-on understanding of these concepts and phenomena. Chemistry: Molecular structures, reactions, periodic table trends, and the concept of moles and stoichiometry can be easier to grasp with interactive visualizations. Biology: Processes like cellular respiration, photosynthesis, DNA replication, meiosis and mitosis, and ecosystem interactions can be better explained using interactive charts or simulations. Mathematics: Topics like geometry (shapes, angles, transformations), calculus (derivatives, integrals), and statistics (probability distributions, hypothesis testing) can be better understood with the help of interactive visualizations. Geography: Understanding the physical layout of continents, countries, and cities, as well as climatic zones and ocean currents, can be greatly aided by interactive maps. Economics: Concepts like supply and demand, market equilibrium, effects of fiscal and monetary policy, and international trade can be explained using interactive graphs. Computer Science: Algorithms and data structures can be better understood by visualizing them. Coding concepts like loops, functions, and recursion can also be visualized. History: Interactive timelines can be a great way to understand the sequence of historical events, how they overlap, and their impact on each other. Earth Science: Simulations can help in understanding geological processes such as plate tectonics, the water cycle, or weather patterns. Astronomy: The movement of celestial bodies, phases of the moon, solar and lunar eclipses, or understanding constellations are much easier with interactive simulations. These are just a few examples. The potential for interactive teaching and learning is vast and can enhance understanding and retention of complex concepts across virtually any subject.","title":"Generative AI Interactive Demos"},{"location":"demos/#using-generative-ai-to-generate-interactive-simulations","text":"In the past, most learning happen when students read books and listened to lectures. Today we can use generative AI to generate fun and exciting interactive web pages that allow students to interact with their subjects. There are many libraries of tools to allow us to use tools like ChatGPT to generate these web applications directly from our prompts. We just need to know what library to reference and how to test the apps that generative AI generates.","title":"Using Generative AI To Generate Interactive Simulations"},{"location":"demos/#matterjs-ball-bounce-example","text":"Matter.js is a tool that does simple physic simulations. Matter Ball Bounce","title":"Matter.js Ball Bounce Example"},{"location":"demos/#cartesian-coordinate-drawing","text":"","title":"Cartesian Coordinate Drawing"},{"location":"demos/#prompt","text":"Generate a cartesian grid drawing using SVG. Create an SVG canvas of 400x400. Place the origin in the lower-left corner. Draw grids that are solid lines ever 100 and dashed lines every 50. Cartesian 1 Cartesian 1","title":"Prompt:"},{"location":"demos/#processing","text":"Processing is a tool for doing 2D animations. I want to thank Val Lockhart and Troy Peterson for suggesting we use ChatGPT to generate processing code. Processing Examples","title":"Processing"},{"location":"demos/js-graphics/","text":"JavaScript Graphics W3C Schools Tutorial Canvas Scatter Plot with Canvas Chart.js Chart.js Plotly.js Plotly.js","title":"JavaScript Graphics"},{"location":"demos/js-graphics/#javascript-graphics","text":"W3C Schools Tutorial","title":"JavaScript Graphics"},{"location":"demos/js-graphics/#canvas","text":"Scatter Plot with Canvas","title":"Canvas"},{"location":"demos/js-graphics/#chartjs","text":"Chart.js","title":"Chart.js"},{"location":"demos/js-graphics/#plotlyjs","text":"Plotly.js","title":"Plotly.js"},{"location":"demos/js-graphics/journey-maps/","text":"Journey Maps for Lesson Plans A journey map is a graphical map of how students will navigate your course. It is often represented as a series of steps that are connected through a set of links. Journey maps are an alternative to single-path outlines of your courses or lessons. They reflect the notion that there are often may ways to approach a subject and they offer more freedom to encourage to explore what topics interest them the most. For many less structured classrooms, journey maps allow students to quickly see the steps they have completed and resume where they left off. Journey maps can also allow people to skip over the content they are already familiar with and take alternate routes if their curiosity leads them in another direction. Journey maps, typically are used in fields like user experience design and service design. They are a visual or graphic interpretation of an individual's relationship with a product, service, or organization over time and across different channels. They can also be a valuable tool in the education sector, providing a framework to enhance lesson planning and delivery. Here are are just a few ways you can use Journey maps in your classroom: Understanding Student Perspective: Just as in user experience design, where journey maps help understand a user's interaction with a product, in education they can help understand a student's interaction with a lesson or curriculum. They provide insight into students' experiences, pain points, moments of engagement or disengagement, and areas where they might struggle or excel. Planning: Journey maps can be used as a planning tool for designing a lesson or a unit. They can help educators map out key learning points, activities, assessments, and potential obstacles, making it easier to structure a lesson plan that is engaging and effective. Personalization: Journey maps can be tailored to individual students, helping educators personalize instruction. For example, a journey map could visualize a student's learning process, identifying when they might need extra support or enrichment. This can help teachers better understand and meet the unique needs of each student. Reflection and Improvement: After a lesson is delivered, journey maps can be used as a tool for reflection. Teachers can map out what actually happened during a lesson, compare it to the planned journey, and identify areas for improvement. This can be especially beneficial for ongoing professional development. Communication: Journey maps can be used to communicate a student's learning progress to other stakeholders, such as parents or other educators. They provide a clear, visual way to share information about a student's learning journey. Engaging Students: Journey maps can also be a tool to engage students in their own learning. Students can create their own journey maps to reflect on their learning process, understand how they learn best, and identify areas where they might need more help. In essence, using journey maps in lesson planning involves seeing the learning process from a student's perspective and using that understanding to design more effective and engaging lessons. They provide a concrete, visual way to plan, implement, assess, and improve instruction. Using ChatGPT to Generate Journey Maps One of the challenges Online Image Map Editor Online Image Map Editor 1 2 3 4 5 6 7 8 9 10 11 < map id = \"imgmap2023723133742\" name = \"imgmap2023723133742\" > < area shape = \"rect\" alt = \"\" title = \"\" coords = \"42,47,230,164\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"320,46,501,165\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"592,47,773,167\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"861,46,1042,165\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"54,280,234,399\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"320,280,501,398\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"595,277,775,400\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"864,279,1044,396\" href = \"\" target = \"\" /> <!-- Created by Online Image Map Editor (http://www.maschek.hu/imagemap/index) --> </ map >","title":"Journey Maps for Lesson Plans"},{"location":"demos/js-graphics/journey-maps/#journey-maps-for-lesson-plans","text":"A journey map is a graphical map of how students will navigate your course. It is often represented as a series of steps that are connected through a set of links. Journey maps are an alternative to single-path outlines of your courses or lessons. They reflect the notion that there are often may ways to approach a subject and they offer more freedom to encourage to explore what topics interest them the most. For many less structured classrooms, journey maps allow students to quickly see the steps they have completed and resume where they left off. Journey maps can also allow people to skip over the content they are already familiar with and take alternate routes if their curiosity leads them in another direction. Journey maps, typically are used in fields like user experience design and service design. They are a visual or graphic interpretation of an individual's relationship with a product, service, or organization over time and across different channels. They can also be a valuable tool in the education sector, providing a framework to enhance lesson planning and delivery. Here are are just a few ways you can use Journey maps in your classroom: Understanding Student Perspective: Just as in user experience design, where journey maps help understand a user's interaction with a product, in education they can help understand a student's interaction with a lesson or curriculum. They provide insight into students' experiences, pain points, moments of engagement or disengagement, and areas where they might struggle or excel. Planning: Journey maps can be used as a planning tool for designing a lesson or a unit. They can help educators map out key learning points, activities, assessments, and potential obstacles, making it easier to structure a lesson plan that is engaging and effective. Personalization: Journey maps can be tailored to individual students, helping educators personalize instruction. For example, a journey map could visualize a student's learning process, identifying when they might need extra support or enrichment. This can help teachers better understand and meet the unique needs of each student. Reflection and Improvement: After a lesson is delivered, journey maps can be used as a tool for reflection. Teachers can map out what actually happened during a lesson, compare it to the planned journey, and identify areas for improvement. This can be especially beneficial for ongoing professional development. Communication: Journey maps can be used to communicate a student's learning progress to other stakeholders, such as parents or other educators. They provide a clear, visual way to share information about a student's learning journey. Engaging Students: Journey maps can also be a tool to engage students in their own learning. Students can create their own journey maps to reflect on their learning process, understand how they learn best, and identify areas where they might need more help. In essence, using journey maps in lesson planning involves seeing the learning process from a student's perspective and using that understanding to design more effective and engaging lessons. They provide a concrete, visual way to plan, implement, assess, and improve instruction.","title":"Journey Maps for Lesson Plans"},{"location":"demos/js-graphics/journey-maps/#using-chatgpt-to-generate-journey-maps","text":"One of the challenges","title":"Using ChatGPT to Generate Journey Maps"},{"location":"demos/js-graphics/journey-maps/#online-image-map-editor","text":"Online Image Map Editor 1 2 3 4 5 6 7 8 9 10 11 < map id = \"imgmap2023723133742\" name = \"imgmap2023723133742\" > < area shape = \"rect\" alt = \"\" title = \"\" coords = \"42,47,230,164\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"320,46,501,165\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"592,47,773,167\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"861,46,1042,165\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"54,280,234,399\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"320,280,501,398\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"595,277,775,400\" href = \"\" target = \"\" /> < area shape = \"rect\" alt = \"\" title = \"\" coords = \"864,279,1044,396\" href = \"\" target = \"\" /> <!-- Created by Online Image Map Editor (http://www.maschek.hu/imagemap/index) --> </ map >","title":"Online Image Map Editor"},{"location":"demos/p5/","text":"Processing Examples All of these p5.js examples were inspired by the wonderful Val Lockhart and Troy Peterson . They were the first to get the idea to generate p5.js code using ChatGPT. If you are not familiar with p5.js, it is a high-quality JavaScript library for building interactive animations. It has been around since 2014 and it is supported by a large community of educators and creative people that combine programming with art. Because there is a strong ethos of sharing open-source p5.js scripts there is ample material for ChatGPT to be trained on. There are currently over 21,000 p5.js sketches found on GitHub! Our goal here is to teach you how to write precise ChatGPT prompts that will generate a working p5.js simulation without having to understand how to write JavaScript. Basic Examples We are going to start with some basic examples that ChatGPT can easily handle. To test these examples we ask ChatGPT to generate a single p5.js sketch file that we can easily test and debug using the p5 Editor . You simply copy and paste the code into the editor overwriting the default setup and draw functions. Warning When you press the play button, the sketch runs continually which can quickly drain your battery if you are using a portable device. It does this even if there is no visible motion on the canvas. p5.js continually runs the draw function until you press stop or the battery runs out. My suggestion is to quickly press the stop button if you are on a battery-powered device. TODO Supply and Demand Virus Simulation A classic simulation of the rate that a virus spreads in a network. Virus Simulation TODO - use a force-directed graph to rearrange the network. Sierpinski Fractal Triangle Sierpinski Fractal Triangle Koch Fractal Curve Koch Fractal Curve Rabbit and Foxes Simulate foxes eating rabbits. Rabbit and Foxes Projectile Motion Canon Simulator Mass on A Spring This is a simulator of a mass on the end of a coiled spring. The user can change: The mass amount (M) The spring constant (K) The damping factor (D) Spring Simulator The simulation still needs some UX work. The drag-down operation is not clean and the spring could be compressed more. Simple Maze Runner A simple grid layout of a maze and a mouse that can only move right or down. Simple Maze Runner Maze Generator This sample program was not created by ChatGPT but it demonstrates an algorithm for generating maze diagrams. Videos 1. Coding Challenge #10.1: Maze Generator with p5.js - Part 1 2. Coding Challenge #10.2: Maze Generator with p5.js - Part 2 3. Coding Challenge #10.3: Maze Generator with p5.js - Part 3 4. Coding Challenge #10.4: Maze Generator with p5.js - Part 4 Depth-first search Recursive backtracker Wikipedia Page Maze Generator To Dos Here is a list of small animations that I have yet to do: EE - Simple circuits - battery, switch and light EE - Current measurement - measure the current in an LED circuit EE - H-Bridge - how to make a motor turn both forward and reverse using switches EE - Pulse-Width Modulation - how to send information from a microcontroller to a motor driver indicating the speed of a motor and the direction of a motor. EE - RGB LEDs - make any color by combining red, green a blue LEDs EE - LED Circuit EE - Distance sensor Robotics - Collision avoidance Robotics - Maze solving Robotics - Digital compass EE - Seven-segment display EE - Alphanumeric display EE - Character display (2 rows by 40 characters) EE - LED bar display EE - Addressable LED strip simulator EE - Physical computing - Microcontrollers, sensors, actuators, displays Robotics - Swarm robots EE - Color displays from red, green and blue LEDs Network science - vertices and edge counts - network complexity Network science - average degree Network science - in-degree and out-degree Network science - directed and undirected graphs Network science - acyclic graphs Network science - local communities Network science - traveling salesperson Machine learning - self-driving car Robot arms - degrees of freedom Simple gears AI - perceptron AI - bias and weights AI - activation functions AI - neural network AI - deep neural network AI - network complexity - parameter counting CS - bits, bytes and words CS - data types: strings, bytes, decimals and floats CS - data structures - lists, sets, arrays CS - sorting CS - recursion Tutorials p5.js Learn p5.js wiki Tool on Codecademy.com Other Examples oscillation sandbox","title":"Introduction"},{"location":"demos/p5/#processing-examples","text":"All of these p5.js examples were inspired by the wonderful Val Lockhart and Troy Peterson . They were the first to get the idea to generate p5.js code using ChatGPT. If you are not familiar with p5.js, it is a high-quality JavaScript library for building interactive animations. It has been around since 2014 and it is supported by a large community of educators and creative people that combine programming with art. Because there is a strong ethos of sharing open-source p5.js scripts there is ample material for ChatGPT to be trained on. There are currently over 21,000 p5.js sketches found on GitHub! Our goal here is to teach you how to write precise ChatGPT prompts that will generate a working p5.js simulation without having to understand how to write JavaScript.","title":"Processing Examples"},{"location":"demos/p5/#basic-examples","text":"We are going to start with some basic examples that ChatGPT can easily handle. To test these examples we ask ChatGPT to generate a single p5.js sketch file that we can easily test and debug using the p5 Editor . You simply copy and paste the code into the editor overwriting the default setup and draw functions. Warning When you press the play button, the sketch runs continually which can quickly drain your battery if you are using a portable device. It does this even if there is no visible motion on the canvas. p5.js continually runs the draw function until you press stop or the battery runs out. My suggestion is to quickly press the stop button if you are on a battery-powered device.","title":"Basic Examples"},{"location":"demos/p5/#todo","text":"Supply and Demand","title":"TODO"},{"location":"demos/p5/#virus-simulation","text":"A classic simulation of the rate that a virus spreads in a network. Virus Simulation TODO - use a force-directed graph to rearrange the network.","title":"Virus Simulation"},{"location":"demos/p5/#sierpinski-fractal-triangle","text":"Sierpinski Fractal Triangle","title":"Sierpinski Fractal Triangle"},{"location":"demos/p5/#koch-fractal-curve","text":"Koch Fractal Curve","title":"Koch Fractal Curve"},{"location":"demos/p5/#rabbit-and-foxes","text":"Simulate foxes eating rabbits. Rabbit and Foxes","title":"Rabbit and Foxes"},{"location":"demos/p5/#projectile-motion","text":"Canon Simulator","title":"Projectile Motion"},{"location":"demos/p5/#mass-on-a-spring","text":"This is a simulator of a mass on the end of a coiled spring. The user can change: The mass amount (M) The spring constant (K) The damping factor (D) Spring Simulator The simulation still needs some UX work. The drag-down operation is not clean and the spring could be compressed more.","title":"Mass on A Spring"},{"location":"demos/p5/#simple-maze-runner","text":"A simple grid layout of a maze and a mouse that can only move right or down. Simple Maze Runner","title":"Simple Maze Runner"},{"location":"demos/p5/#maze-generator","text":"This sample program was not created by ChatGPT but it demonstrates an algorithm for generating maze diagrams. Videos 1. Coding Challenge #10.1: Maze Generator with p5.js - Part 1 2. Coding Challenge #10.2: Maze Generator with p5.js - Part 2 3. Coding Challenge #10.3: Maze Generator with p5.js - Part 3 4. Coding Challenge #10.4: Maze Generator with p5.js - Part 4 Depth-first search Recursive backtracker Wikipedia Page Maze Generator","title":"Maze Generator"},{"location":"demos/p5/#to-dos","text":"Here is a list of small animations that I have yet to do: EE - Simple circuits - battery, switch and light EE - Current measurement - measure the current in an LED circuit EE - H-Bridge - how to make a motor turn both forward and reverse using switches EE - Pulse-Width Modulation - how to send information from a microcontroller to a motor driver indicating the speed of a motor and the direction of a motor. EE - RGB LEDs - make any color by combining red, green a blue LEDs EE - LED Circuit EE - Distance sensor Robotics - Collision avoidance Robotics - Maze solving Robotics - Digital compass EE - Seven-segment display EE - Alphanumeric display EE - Character display (2 rows by 40 characters) EE - LED bar display EE - Addressable LED strip simulator EE - Physical computing - Microcontrollers, sensors, actuators, displays Robotics - Swarm robots EE - Color displays from red, green and blue LEDs Network science - vertices and edge counts - network complexity Network science - average degree Network science - in-degree and out-degree Network science - directed and undirected graphs Network science - acyclic graphs Network science - local communities Network science - traveling salesperson Machine learning - self-driving car Robot arms - degrees of freedom Simple gears AI - perceptron AI - bias and weights AI - activation functions AI - neural network AI - deep neural network AI - network complexity - parameter counting CS - bits, bytes and words CS - data types: strings, bytes, decimals and floats CS - data structures - lists, sets, arrays CS - sorting CS - recursion","title":"To Dos"},{"location":"demos/p5/#tutorials","text":"p5.js Learn p5.js wiki Tool on Codecademy.com","title":"Tutorials"},{"location":"demos/p5/#other-examples","text":"oscillation sandbox","title":"Other Examples"},{"location":"demos/p5/7-segment-display/","text":"7-Segment Display Demo","title":"7-Segment Display"},{"location":"demos/p5/7-segment-display/#7-segment-display","text":"Demo","title":"7-Segment Display"},{"location":"demos/p5/battery-circuit/","text":"Battery Circuit In this lesson, we will create an animation of a circuit that includes: A battery An on/off switch A resistor An LED Wires that connect the components in a series loop We will use the Animated Wire demo that we did in a prior lab. We will break the problem down into ChatGPT prompts that animate and test individual components. We will then concatenate the components into a main animation file. This is the most complex program we have generated so far. It requires us to first use ChatGPT to create several functions: A drawBattery function that draws the positive and negative parts of a battery A drawSwitch function that will toggle on or off A resistor function that draws a resistor zig-zag symbol An LED function that is black in the off state and red in the on state An animate wire function that animates the flow of current (see the previous example) Once we have functions for all these components, we can then assemble them together in an entire simulation. You will find that ChatGPT will not usually get the the layout wrong and you will need to adjust the positions of the wires. Battery Circuit Demo","title":"Battery Circuit"},{"location":"demos/p5/battery-circuit/#battery-circuit","text":"In this lesson, we will create an animation of a circuit that includes: A battery An on/off switch A resistor An LED Wires that connect the components in a series loop We will use the Animated Wire demo that we did in a prior lab. We will break the problem down into ChatGPT prompts that animate and test individual components. We will then concatenate the components into a main animation file. This is the most complex program we have generated so far. It requires us to first use ChatGPT to create several functions: A drawBattery function that draws the positive and negative parts of a battery A drawSwitch function that will toggle on or off A resistor function that draws a resistor zig-zag symbol An LED function that is black in the off state and red in the on state An animate wire function that animates the flow of current (see the previous example) Once we have functions for all these components, we can then assemble them together in an entire simulation. You will find that ChatGPT will not usually get the the layout wrong and you will need to adjust the positions of the wires. Battery Circuit Demo","title":"Battery Circuit"},{"location":"demos/p5/brownian-motion/","text":"Brownian Motion A classic physics simulation where the user can adjust the temperature and number of molecules in the simulation. Brownian Motion Prompt Generate a 2D p5.js simulation of Brownian motion on a 600x400 canvas. Simulate a set of gas molecules in a chamber. Add two in-chart range control sliders for temperature and number of molecules. Add labels and values to the range control sliders. Place the labels, values an sliders at the bottom of the canvas.","title":"Brownian Motion"},{"location":"demos/p5/brownian-motion/#brownian-motion","text":"A classic physics simulation where the user can adjust the temperature and number of molecules in the simulation. Brownian Motion Prompt Generate a 2D p5.js simulation of Brownian motion on a 600x400 canvas. Simulate a set of gas molecules in a chamber. Add two in-chart range control sliders for temperature and number of molecules. Add labels and values to the range control sliders. Place the labels, values an sliders at the bottom of the canvas.","title":"Brownian Motion"},{"location":"demos/p5/circle-slider/","text":"Circle Slider Here is a simple example that you can start with. The ChatGPT prompt would be the following: Generate a single p5.js sketch file that draws a blue circle in the center of a 400x400 canvas. Create a range control slider that allows the radius to be adjusted from 0 to 200. Use the text() function within the draw() function to display the label and current value of the radius. Circle Slider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 let radiusSlider ; let radius = 0 ; function setup () { createCanvas ( 400 , 400 ); // Create the radius slider radiusSlider = createSlider ( 0 , 200 , 100 ); radiusSlider . position ( 10 , 10 ); } function draw () { background ( 220 ); // Fetch the current radius from the slider radius = radiusSlider . value (); // Draw the circle fill ( 0 , 0 , 255 ); noStroke (); circle ( width / 2 , height / 2 , radius * 2 ); // Display the radius value fill ( 0 ); text ( \"Radius: \" + radius , 10 , 50 ); } Circle Slider Demo","title":"Circle Slider"},{"location":"demos/p5/circle-slider/#circle-slider","text":"Here is a simple example that you can start with. The ChatGPT prompt would be the following: Generate a single p5.js sketch file that draws a blue circle in the center of a 400x400 canvas. Create a range control slider that allows the radius to be adjusted from 0 to 200. Use the text() function within the draw() function to display the label and current value of the radius. Circle Slider 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 let radiusSlider ; let radius = 0 ; function setup () { createCanvas ( 400 , 400 ); // Create the radius slider radiusSlider = createSlider ( 0 , 200 , 100 ); radiusSlider . position ( 10 , 10 ); } function draw () { background ( 220 ); // Fetch the current radius from the slider radius = radiusSlider . value (); // Draw the circle fill ( 0 , 0 , 255 ); noStroke (); circle ( width / 2 , height / 2 , radius * 2 ); // Display the radius value fill ( 0 ); text ( \"Radius: \" + radius , 10 , 50 ); } Circle Slider Demo","title":"Circle Slider"},{"location":"demos/p5/conways-life/","text":"Conway's Game of Life Conway's Game of Life is a simple simulator of cells. This is a class of simulation called Cellular Automata Demo of Conway's Game of Life","title":"Conway's Game of Life"},{"location":"demos/p5/conways-life/#conways-game-of-life","text":"Conway's Game of Life is a simple simulator of cells. This is a class of simulation called Cellular Automata Demo of Conway's Game of Life","title":"Conway's Game of Life"},{"location":"demos/p5/h-bridge/","text":"H-Bridge Circuit An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction. H-Bridge Demo Generate a single p5.js sketch file. Draw an H-bridge circuit for reversing the direction of a DC motor. Have three state buttons for \"Forward\", \"Stop\" and \"Reverse\". Place the positive power rail at the top of the circuit. Place the negative rail at the bottom of the circuit. Place the motor in the center of the H-brige ciricut. Animate the motor moving clockwise for the Forward state. Animate the motor going counter-clockwise for the Reverse state. Make the motor stopped for the Stop state. Have the upper left and lower right wires animate current for the Forward state. Have the upper right and lower left wires animate current for the Reverse state. Turn off all wire animation for the Stop state. Create four knife switches. Have the upper left and lower right be closed for Forward. Have the upper right and lower left be closed for Reverse. Have all the switches be open for Stop. Use the following function to draw current in a wire: function drawAnimatedWire(x1, y1, x2, y2, speed1, state) { if (state) { let distance = dist(x1, y1, x2, y2); let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1); // lerp generates the percent between two values let x = lerp(x1, x2, circlePos); let y = lerp(y1, y2, circlePos); stroke(0); strokeWeight(lineWidth) line(x1, y1, x2, y2); // Draw the wire fill(255, 0, 0); noStroke(); circle(x, y, 10); // Draw the moving circle (electron) } else { stroke(0); strokeWeight(lineWidth) line(x1, y1, x2, y2); // Draw the wire } } Response Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 let forwardButton ; let stopButton ; let reverseButton ; const lineWidth = 2 ; function setup () { createCanvas ( 400 , 400 ); forwardButton = createButton ( 'Forward' ); forwardButton . position ( 10 , 10 ); forwardButton . mousePressed ( forward ); stopButton = createButton ( 'Stop' ); stopButton . position ( 90 , 10 ); stopButton . mousePressed ( stop ); reverseButton = createButton ( 'Reverse' ); reverseButton . position ( 150 , 10 ); reverseButton . mousePressed ( reverse ); } function forward () { // Code to control the H-bridge for forward motion } function stop () { // Code to stop the motor } function reverse () { // Code to control the H-bridge for reverse motion } function draw () { background ( 220 ); // Draw positive power rail stroke ( 0 ); strokeWeight ( lineWidth ); line ( 40 , 60 , width - 40 , 60 ); // Draw negative power rail stroke ( 0 ); strokeWeight ( lineWidth ); line ( 40 , height - 60 , width - 40 , height - 60 ); // Draw H-bridge circuit stroke ( 0 ); strokeWeight ( lineWidth ); line ( width / 2 - 40 , 60 , width / 2 - 40 , height - 60 ); line ( width / 2 + 40 , 60 , width / 2 + 40 , height - 60 ); line ( width / 2 - 40 , height / 2 , width / 2 + 40 , height / 2 ); // Draw motor noFill (); stroke ( 0 ); strokeWeight ( lineWidth ); rect ( width / 2 - 20 , height / 2 - 20 , 40 , 40 ); // Draw wires with current let speed1 = 0.01 ; drawAnimatedWire ( 40 , 60 , width / 2 - 40 , 60 , speed1 , forwardButton . elt . disabled ); drawAnimatedWire ( width / 2 + 40 , 60 , width - 40 , 60 , speed1 , reverseButton . elt . disabled ); drawAnimatedWire ( 40 , height - 60 , width / 2 - 40 , height - 60 , speed1 , reverseButton . elt . disabled ); drawAnimatedWire ( width / 2 + 40 , height - 60 , width - 40 , height - 60 , speed1 , forwardButton . elt . disabled ); } function drawAnimatedWire ( x1 , y1 , x2 , y2 , speed1 , state ) { if ( state ) { let distance = dist ( x1 , y1 , x2 , y2 ); let circlePos = map (( millis () * speed1 ) % distance , 0 , distance , 0 , 1 ); // lerp generates the percent between two values let x = lerp ( x1 , x2 , circlePos ); let y = lerp ( y1 , y2 , circlePos ); stroke ( 0 ); strokeWeight ( lineWidth ); line ( x1 , y1 , x2 , y2 ); // Draw the wire fill ( 255 , 0 , 0 ); noStroke (); circle ( x , y , 10 ); // Draw the moving circle (electron) } else { stroke ( 0 ); strokeWeight ( lineWidth ); line ( x1 , y1 , x2 , y2 ); // Draw the wire } }","title":"H-Bridge Circuit"},{"location":"demos/p5/h-bridge/#h-bridge-circuit","text":"An H-bridge circuit is four switches around a motor in the shape of the letter \"H\". The motor is at the center of the letter \"H\". When the upper-left and lower-right switches are closed, the motor spins one direction. When the lower-left and upper-right switches are closed, the motor spins in the opposite direction. H-Bridge Demo Generate a single p5.js sketch file. Draw an H-bridge circuit for reversing the direction of a DC motor. Have three state buttons for \"Forward\", \"Stop\" and \"Reverse\". Place the positive power rail at the top of the circuit. Place the negative rail at the bottom of the circuit. Place the motor in the center of the H-brige ciricut. Animate the motor moving clockwise for the Forward state. Animate the motor going counter-clockwise for the Reverse state. Make the motor stopped for the Stop state. Have the upper left and lower right wires animate current for the Forward state. Have the upper right and lower left wires animate current for the Reverse state. Turn off all wire animation for the Stop state. Create four knife switches. Have the upper left and lower right be closed for Forward. Have the upper right and lower left be closed for Reverse. Have all the switches be open for Stop. Use the following function to draw current in a wire: function drawAnimatedWire(x1, y1, x2, y2, speed1, state) { if (state) { let distance = dist(x1, y1, x2, y2); let circlePos = map((millis() * speed1) % distance, 0, distance, 0, 1); // lerp generates the percent between two values let x = lerp(x1, x2, circlePos); let y = lerp(y1, y2, circlePos); stroke(0); strokeWeight(lineWidth) line(x1, y1, x2, y2); // Draw the wire fill(255, 0, 0); noStroke(); circle(x, y, 10); // Draw the moving circle (electron) } else { stroke(0); strokeWeight(lineWidth) line(x1, y1, x2, y2); // Draw the wire } }","title":"H-Bridge Circuit"},{"location":"demos/p5/h-bridge/#response","text":"Sure! Here's a p5.js sketch file that implements the H-bridge circuit with state buttons for \"Forward,\" \"Stop,\" and \"Reverse\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 let forwardButton ; let stopButton ; let reverseButton ; const lineWidth = 2 ; function setup () { createCanvas ( 400 , 400 ); forwardButton = createButton ( 'Forward' ); forwardButton . position ( 10 , 10 ); forwardButton . mousePressed ( forward ); stopButton = createButton ( 'Stop' ); stopButton . position ( 90 , 10 ); stopButton . mousePressed ( stop ); reverseButton = createButton ( 'Reverse' ); reverseButton . position ( 150 , 10 ); reverseButton . mousePressed ( reverse ); } function forward () { // Code to control the H-bridge for forward motion } function stop () { // Code to stop the motor } function reverse () { // Code to control the H-bridge for reverse motion } function draw () { background ( 220 ); // Draw positive power rail stroke ( 0 ); strokeWeight ( lineWidth ); line ( 40 , 60 , width - 40 , 60 ); // Draw negative power rail stroke ( 0 ); strokeWeight ( lineWidth ); line ( 40 , height - 60 , width - 40 , height - 60 ); // Draw H-bridge circuit stroke ( 0 ); strokeWeight ( lineWidth ); line ( width / 2 - 40 , 60 , width / 2 - 40 , height - 60 ); line ( width / 2 + 40 , 60 , width / 2 + 40 , height - 60 ); line ( width / 2 - 40 , height / 2 , width / 2 + 40 , height / 2 ); // Draw motor noFill (); stroke ( 0 ); strokeWeight ( lineWidth ); rect ( width / 2 - 20 , height / 2 - 20 , 40 , 40 ); // Draw wires with current let speed1 = 0.01 ; drawAnimatedWire ( 40 , 60 , width / 2 - 40 , 60 , speed1 , forwardButton . elt . disabled ); drawAnimatedWire ( width / 2 + 40 , 60 , width - 40 , 60 , speed1 , reverseButton . elt . disabled ); drawAnimatedWire ( 40 , height - 60 , width / 2 - 40 , height - 60 , speed1 , reverseButton . elt . disabled ); drawAnimatedWire ( width / 2 + 40 , height - 60 , width - 40 , height - 60 , speed1 , forwardButton . elt . disabled ); } function drawAnimatedWire ( x1 , y1 , x2 , y2 , speed1 , state ) { if ( state ) { let distance = dist ( x1 , y1 , x2 , y2 ); let circlePos = map (( millis () * speed1 ) % distance , 0 , distance , 0 , 1 ); // lerp generates the percent between two values let x = lerp ( x1 , x2 , circlePos ); let y = lerp ( y1 , y2 , circlePos ); stroke ( 0 ); strokeWeight ( lineWidth ); line ( x1 , y1 , x2 , y2 ); // Draw the wire fill ( 255 , 0 , 0 ); noStroke (); circle ( x , y , 10 ); // Draw the moving circle (electron) } else { stroke ( 0 ); strokeWeight ( lineWidth ); line ( x1 , y1 , x2 , y2 ); // Draw the wire } }","title":"Response"},{"location":"demos/p5/logic-gates/","text":"Logic Gates In this example, we will generate a graphical simulation of Boolean logic gates. This example shows how both \"AND\" and \"OR\" gates work. You can easily change the prompt to perform other operations such as \"NOT\", \"NAND\" and \"NOR\". You will note that we are explicit on the horizontal line placement location. Generative AI is not good at doing precise layout. Prompt: Create a single p5.js sketch using a 400x400 canvas. The sketch is a simulation of two simple logic gates, one \"AND\" and one \"OR\". There are two input wires on the left. Label the inputs \"A\" and \"B\" using size 16 black text. Draw input A as a horizontal line at y=50. Draw input B as a horizontal line at y=150. Have both input wires connect to both the \"AND\" and \"OR\" logic gates. The top gate is a Boolean \"AND\" operation. The bottom gate is a Boolean an \"OR\" operation. Add two input toggle buttons on the left side to control the state of the inputs. Initialize the initial states of the inputs to be off. When a wire is high, draw it in red. When a wire is at ground, draw it in black. Place a label \"AND\" in size 16 point test on the \"AND\" gate. Place a label \"OR\" in size 16 point text over the \"AND\" gate. Link to Simulation Demo Sample Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 let inputA = false ; let inputB = false ; let buttonA , buttonB ; function setup () { createCanvas ( 400 , 400 ); // Create input buttons for A and B buttonA = createButton ( 'Toggle A' ); buttonA . position ( 10 , 50 ); buttonA . mousePressed ( toggleA ); buttonB = createButton ( 'Toggle B' ); buttonB . position ( 10 , 150 ); buttonB . mousePressed ( toggleB ); } function draw () { background ( 220 ); textSize ( 24 ) // Draw the labels strokeWeight ( 0 ); fill ( 'black' ); text ( 'A' , 30 , 50 ); text ( 'B' , 30 , 150 ); // Draw input wires strokeWeight ( 5 ) stroke ( inputA ? 'red' : 'black' ); line ( 75 , 50 , 150 , 50 ); line ( 75 , 50 , 150 , 150 ); stroke ( inputB ? 'red' : 'black' ); line ( 75 , 150 , 150 , 150 ); line ( 75 , 150 , 150 , 50 ); // Draw AND gate fill ( 255 ); stroke ( 'black' ) beginShape (); vertex ( 150 , 20 ); vertex ( 200 , 20 ); vertex ( 220 , 50 ); vertex ( 200 , 80 ); vertex ( 150 , 80 ); endShape ( CLOSE ); strokeWeight ( 0 ); fill ( 'black' ); textSize ( 24 ) text ( 'AND' , 155 , 60 ); // Draw OR gate fill ( 255 ); strokeWeight ( 5 ); stroke ( 'black' ) beginShape (); vertex ( 150 , 120 ); vertex ( 200 , 120 ); vertex ( 220 , 150 ); vertex ( 200 , 180 ); vertex ( 150 , 180 ); endShape ( CLOSE ); strokeWeight ( 0 ); fill ( 'black' ); text ( 'OR' , 155 , 160 );","title":"Logic Gates"},{"location":"demos/p5/logic-gates/#logic-gates","text":"In this example, we will generate a graphical simulation of Boolean logic gates. This example shows how both \"AND\" and \"OR\" gates work. You can easily change the prompt to perform other operations such as \"NOT\", \"NAND\" and \"NOR\". You will note that we are explicit on the horizontal line placement location. Generative AI is not good at doing precise layout. Prompt: Create a single p5.js sketch using a 400x400 canvas. The sketch is a simulation of two simple logic gates, one \"AND\" and one \"OR\". There are two input wires on the left. Label the inputs \"A\" and \"B\" using size 16 black text. Draw input A as a horizontal line at y=50. Draw input B as a horizontal line at y=150. Have both input wires connect to both the \"AND\" and \"OR\" logic gates. The top gate is a Boolean \"AND\" operation. The bottom gate is a Boolean an \"OR\" operation. Add two input toggle buttons on the left side to control the state of the inputs. Initialize the initial states of the inputs to be off. When a wire is high, draw it in red. When a wire is at ground, draw it in black. Place a label \"AND\" in size 16 point test on the \"AND\" gate. Place a label \"OR\" in size 16 point text over the \"AND\" gate. Link to Simulation Demo","title":"Logic Gates"},{"location":"demos/p5/logic-gates/#sample-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 let inputA = false ; let inputB = false ; let buttonA , buttonB ; function setup () { createCanvas ( 400 , 400 ); // Create input buttons for A and B buttonA = createButton ( 'Toggle A' ); buttonA . position ( 10 , 50 ); buttonA . mousePressed ( toggleA ); buttonB = createButton ( 'Toggle B' ); buttonB . position ( 10 , 150 ); buttonB . mousePressed ( toggleB ); } function draw () { background ( 220 ); textSize ( 24 ) // Draw the labels strokeWeight ( 0 ); fill ( 'black' ); text ( 'A' , 30 , 50 ); text ( 'B' , 30 , 150 ); // Draw input wires strokeWeight ( 5 ) stroke ( inputA ? 'red' : 'black' ); line ( 75 , 50 , 150 , 50 ); line ( 75 , 50 , 150 , 150 ); stroke ( inputB ? 'red' : 'black' ); line ( 75 , 150 , 150 , 150 ); line ( 75 , 150 , 150 , 50 ); // Draw AND gate fill ( 255 ); stroke ( 'black' ) beginShape (); vertex ( 150 , 20 ); vertex ( 200 , 20 ); vertex ( 220 , 50 ); vertex ( 200 , 80 ); vertex ( 150 , 80 ); endShape ( CLOSE ); strokeWeight ( 0 ); fill ( 'black' ); textSize ( 24 ) text ( 'AND' , 155 , 60 ); // Draw OR gate fill ( 255 ); strokeWeight ( 5 ); stroke ( 'black' ) beginShape (); vertex ( 150 , 120 ); vertex ( 200 , 120 ); vertex ( 220 , 150 ); vertex ( 200 , 180 ); vertex ( 150 , 180 ); endShape ( CLOSE ); strokeWeight ( 0 ); fill ( 'black' ); text ( 'OR' , 155 , 160 );","title":"Sample Code"},{"location":"demos/p5/motor/","text":"Rotating Motor We want to animate a rotating motor as a circle. The motor must have circular arrows on it that show the direction of the rotation of the motor. The arrows must point clockwise when we are going forward and counter-clockwise when we are going in reverse. Draw Rotating Motor Rotating Motor Demo Draw Motor The key here is to be able to make the motor scale to any size. We do this by doing the following three functions: translate() to the center of the motor scale the motor to the correct size rotate the motor so it appers to spin in the right direction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 function drawMotor ( x , y , scaleVal , angle , direction ) { angleMode ( DEGREES ); // Change the mode to push (); // order is key translate ( x , y ); scale ( scaleVal ); rotate ( angle ); // gray fill ( 180 ); strokeWeight ( 2 ); circle ( 0 , 0 , 220 ) strokeWeight ( 10 ); stroke ( 'black' ) noFill (); // top circle x,y w,h start-ang, end-angle arc ( 0 , 0 , 180 , 180 , 180 , 310 , OPEN ); // bottom circle arc ( 0 , 0 , 180 , 180 , 0 , 130 , OPEN ); // forward if ( direction == 1 ) { // up right drawArrowTip ( 50 , - 75 , 140 ) // lower left drawArrowTip ( - 60 , 70 , - 30 ) } // reverse if ( direction == - 1 ) { // up right x,y, ang drawArrowTip ( 90 , 0 , - 20 ) // lower left drawArrowTip ( - 90 , 0 , 164 ) } pop (); } Draw Arrow Tip We use the translate() and rotate() functions to first get into position. Then we use the triangle() function to draw the triangle at the front of the arch. 1 2 3 4 5 6 7 8 9 10 11 12 function drawArrowTip ( x , y , rotationAngle ) { push (); // Save the current drawing style and transformations translate ( x , y ); // Move the origin to the given location rotate ( rotationAngle ); // Rotate by the given angle fill ( 0 ); // Set the fill color to black noStroke (); // Disable drawing an outline // set the size let sz = 20 ; // lower right, top, lower left triangle ( sz , 0 , 0 , - 3 * sz , - sz , 0 ); // Draw the arrow tip pop (); // Restore the previous drawing style and transformations } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // scale motor test // Goal: add a size to the motor drawing to not require only a fixed size hard coded in the draw. let direction = 1 ; let radiusSlider ; let angle = 0 ; let circleRadius = 100 ; // default value let myFrameRate = 24 ; function setup () { const canvas = createCanvas ( 400 , 400 ); canvas . parent ( 'canvas-container' ); // this changes the entire layout let forwardButton = createButton ( 'Fwd' ); forwardButton . position ( 10 , height - 20 ); forwardButton . mousePressed ( forward ); let stopButton = createButton ( 'Stop' ); stopButton . position ( 55 , height - 20 ); stopButton . mousePressed ( stop ); let reverseButton = createButton ( 'Rev' ); reverseButton . position ( 105 , height - 20 ); reverseButton . mousePressed ( turnReverse ); // radiusSlider = createSlider(0, 200, circleRadius); scaleSlider = createSlider ( .1 , 2 , 1 , .1 ); scaleSlider . position ( 215 , height - 35 ); scaleSlider . style ( 'width' , '180px' ); // radiusSlider = createSlider(0, 200, circleRadius); speedSlider = createSlider ( 0 , 20 , 5 , .1 ); speedSlider . position ( 215 , height - 16 ); speedSlider . style ( 'width' , '180px' ); frameRate ( myFrameRate ); } function stop () { direction = 0 ; } function forward () { direction = 1 ; } function turnReverse () { direction = - 1 ; } function draw () { background ( 240 ); // center axis stroke ( 0 ); line ( 0 , height / 2 , width , height / 2 ) line ( width / 2 , 0 , width / 2 , height ) // Update the circle radius based on slider value scaleVal = scaleSlider . value (); motorSpeed = speedSlider . value (); // Center the motor on the canvas angle += direction * motorSpeed ; // x,y, scale, angle, dir, speed drawMotor ( width / 2 , height / 2 , scaleVal , angle , direction ) // Draw the label and the current radius value stroke ( 0 ); strokeWeight ( 0 ); fill ( 0 ); // black color for the text text ( \"Scale: \" + scaleVal , 140 , height - 30 ); text ( \"Speed: \" + motorSpeed , 140 , height - 10 ); } function drawMotor ( x , y , scaleVal , angle , direction ) { angleMode ( DEGREES ); // Change the mode to push (); // order is key translate ( x , y ); scale ( scaleVal ); rotate ( angle ); // gray fill ( 180 ); strokeWeight ( 2 ); circle ( 0 , 0 , 220 ) strokeWeight ( 10 ); stroke ( 'black' ) noFill (); // top circle x,y w,h start-ang, end-angle arc ( 0 , 0 , 180 , 180 , 180 , 310 , OPEN ); // bottom circle arc ( 0 , 0 , 180 , 180 , 0 , 130 , OPEN ); // forward if ( direction == 1 ) { // up right drawArrowTip ( 50 , - 75 , 140 ) // lower left drawArrowTip ( - 60 , 70 , - 30 ) } // reverse if ( direction == - 1 ) { // up right x,y, ang drawArrowTip ( 90 , 0 , - 20 ) // lower left drawArrowTip ( - 90 , 0 , 164 ) } pop (); } // draw a triangle with a base at (x,y) in the direction of rotationAngle function drawArrowTip ( x , y , rotationAngle ) { push (); // Save the current drawing style and transformations translate ( x , y ); // Move the origin to the given location rotate ( rotationAngle ); // Rotate by the given angle fill ( 0 ); // Set the fill color to black noStroke (); // Disable drawing an outline // set the size of the triangle let sz = 10 ; // lower right, top, lower left triangle ( sz , 0 , 0 , - 3 * sz , - sz , 0 ); // Draw the arrow tip pop (); // Restore the previous drawing style and transformations }","title":"Rotating Motor"},{"location":"demos/p5/motor/#rotating-motor","text":"We want to animate a rotating motor as a circle. The motor must have circular arrows on it that show the direction of the rotation of the motor. The arrows must point clockwise when we are going forward and counter-clockwise when we are going in reverse.","title":"Rotating Motor"},{"location":"demos/p5/motor/#draw-rotating-motor","text":"Rotating Motor Demo","title":"Draw Rotating Motor"},{"location":"demos/p5/motor/#draw-motor","text":"The key here is to be able to make the motor scale to any size. We do this by doing the following three functions: translate() to the center of the motor scale the motor to the correct size rotate the motor so it appers to spin in the right direction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 function drawMotor ( x , y , scaleVal , angle , direction ) { angleMode ( DEGREES ); // Change the mode to push (); // order is key translate ( x , y ); scale ( scaleVal ); rotate ( angle ); // gray fill ( 180 ); strokeWeight ( 2 ); circle ( 0 , 0 , 220 ) strokeWeight ( 10 ); stroke ( 'black' ) noFill (); // top circle x,y w,h start-ang, end-angle arc ( 0 , 0 , 180 , 180 , 180 , 310 , OPEN ); // bottom circle arc ( 0 , 0 , 180 , 180 , 0 , 130 , OPEN ); // forward if ( direction == 1 ) { // up right drawArrowTip ( 50 , - 75 , 140 ) // lower left drawArrowTip ( - 60 , 70 , - 30 ) } // reverse if ( direction == - 1 ) { // up right x,y, ang drawArrowTip ( 90 , 0 , - 20 ) // lower left drawArrowTip ( - 90 , 0 , 164 ) } pop (); }","title":"Draw Motor"},{"location":"demos/p5/motor/#draw-arrow-tip","text":"We use the translate() and rotate() functions to first get into position. Then we use the triangle() function to draw the triangle at the front of the arch. 1 2 3 4 5 6 7 8 9 10 11 12 function drawArrowTip ( x , y , rotationAngle ) { push (); // Save the current drawing style and transformations translate ( x , y ); // Move the origin to the given location rotate ( rotationAngle ); // Rotate by the given angle fill ( 0 ); // Set the fill color to black noStroke (); // Disable drawing an outline // set the size let sz = 20 ; // lower right, top, lower left triangle ( sz , 0 , 0 , - 3 * sz , - sz , 0 ); // Draw the arrow tip pop (); // Restore the previous drawing style and transformations } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 // scale motor test // Goal: add a size to the motor drawing to not require only a fixed size hard coded in the draw. let direction = 1 ; let radiusSlider ; let angle = 0 ; let circleRadius = 100 ; // default value let myFrameRate = 24 ; function setup () { const canvas = createCanvas ( 400 , 400 ); canvas . parent ( 'canvas-container' ); // this changes the entire layout let forwardButton = createButton ( 'Fwd' ); forwardButton . position ( 10 , height - 20 ); forwardButton . mousePressed ( forward ); let stopButton = createButton ( 'Stop' ); stopButton . position ( 55 , height - 20 ); stopButton . mousePressed ( stop ); let reverseButton = createButton ( 'Rev' ); reverseButton . position ( 105 , height - 20 ); reverseButton . mousePressed ( turnReverse ); // radiusSlider = createSlider(0, 200, circleRadius); scaleSlider = createSlider ( .1 , 2 , 1 , .1 ); scaleSlider . position ( 215 , height - 35 ); scaleSlider . style ( 'width' , '180px' ); // radiusSlider = createSlider(0, 200, circleRadius); speedSlider = createSlider ( 0 , 20 , 5 , .1 ); speedSlider . position ( 215 , height - 16 ); speedSlider . style ( 'width' , '180px' ); frameRate ( myFrameRate ); } function stop () { direction = 0 ; } function forward () { direction = 1 ; } function turnReverse () { direction = - 1 ; } function draw () { background ( 240 ); // center axis stroke ( 0 ); line ( 0 , height / 2 , width , height / 2 ) line ( width / 2 , 0 , width / 2 , height ) // Update the circle radius based on slider value scaleVal = scaleSlider . value (); motorSpeed = speedSlider . value (); // Center the motor on the canvas angle += direction * motorSpeed ; // x,y, scale, angle, dir, speed drawMotor ( width / 2 , height / 2 , scaleVal , angle , direction ) // Draw the label and the current radius value stroke ( 0 ); strokeWeight ( 0 ); fill ( 0 ); // black color for the text text ( \"Scale: \" + scaleVal , 140 , height - 30 ); text ( \"Speed: \" + motorSpeed , 140 , height - 10 ); } function drawMotor ( x , y , scaleVal , angle , direction ) { angleMode ( DEGREES ); // Change the mode to push (); // order is key translate ( x , y ); scale ( scaleVal ); rotate ( angle ); // gray fill ( 180 ); strokeWeight ( 2 ); circle ( 0 , 0 , 220 ) strokeWeight ( 10 ); stroke ( 'black' ) noFill (); // top circle x,y w,h start-ang, end-angle arc ( 0 , 0 , 180 , 180 , 180 , 310 , OPEN ); // bottom circle arc ( 0 , 0 , 180 , 180 , 0 , 130 , OPEN ); // forward if ( direction == 1 ) { // up right drawArrowTip ( 50 , - 75 , 140 ) // lower left drawArrowTip ( - 60 , 70 , - 30 ) } // reverse if ( direction == - 1 ) { // up right x,y, ang drawArrowTip ( 90 , 0 , - 20 ) // lower left drawArrowTip ( - 90 , 0 , 164 ) } pop (); } // draw a triangle with a base at (x,y) in the direction of rotationAngle function drawArrowTip ( x , y , rotationAngle ) { push (); // Save the current drawing style and transformations translate ( x , y ); // Move the origin to the given location rotate ( rotationAngle ); // Rotate by the given angle fill ( 0 ); // Set the fill color to black noStroke (); // Disable drawing an outline // set the size of the triangle let sz = 10 ; // lower right, top, lower left triangle ( sz , 0 , 0 , - 3 * sz , - sz , 0 ); // Draw the arrow tip pop (); // Restore the previous drawing style and transformations }","title":"Draw Arrow Tip"},{"location":"demos/p5/polygon/","text":"Polygon In this example, we will use a more detailed prompt to control the placement of the sliders and their values. Prompt: Generate a p5.js sketch file that draws filled polygons on a 400x400 canvas. Create one range control slider that allows the number of points on the polygon to vary from 3 to 10 in steps of 1. Make the default be 10. Create a second range control slider that allows the color inside the polygon to be changed to any color. Make the default value be 170 (blue). Make the sliders be the width of the canvas less the width of the labels and values. Place the sliders at the bottom of the canvas 100 points in from the left. Use the text() function at the end of the draw() function to display the name and current values of the sliders in the bottom left of the screen. Polygon Demonstration","title":"Polygon"},{"location":"demos/p5/polygon/#polygon","text":"In this example, we will use a more detailed prompt to control the placement of the sliders and their values. Prompt: Generate a p5.js sketch file that draws filled polygons on a 400x400 canvas. Create one range control slider that allows the number of points on the polygon to vary from 3 to 10 in steps of 1. Make the default be 10. Create a second range control slider that allows the color inside the polygon to be changed to any color. Make the default value be 170 (blue). Make the sliders be the width of the canvas less the width of the labels and values. Place the sliders at the bottom of the canvas 100 points in from the left. Use the text() function at the end of the draw() function to display the name and current values of the sliders in the bottom left of the screen. Polygon Demonstration","title":"Polygon"},{"location":"demos/p5/prompt-templates/","text":"Prompt Templates Stem 1: Generate a File Generate a single p5.js sketch file that draws on a 400x400 canvas. ## Step 2: Add Controls and Buttons ```linenums=\"0\" Add range control sliders at the bottom of the canvas for changing the X and Y. Add range control sliders at the bottom of the canvas for changing the X and Y. Include the label and values for the sliders. Add buttons for \"Run\", \"Stop\", \"Step\" and \"Reset\" at the bottom of the canvas. Step 3: Specify Label, Value and Slider Layout 1 2 Add the slider labels and values to the left of the sliders. Have the sliders begin at x=100 and span the rest of the width of the canvas. Add the Canvas Const and Reference Add the following at the start of the draw function: const canvas = createCanvas(600, 200); // remove comment to place in HTML page with a canvas-container ID // canvas.parent('canvas-container'); Example ```linenums=\"0\" Generate a p5.js sketch file that teaches trigonometry concepts on a 400x400 canvas. Allow the user to change two values using range control sliders placed at the bottom of the canvas. The canvas contains a plot of a sine wave from -2 PI to 2 PI. The first slider should control the amplitude of a sine curve ranging from .1 to 2 in .1 steps and the default amplitude of 1.0 The second slider should control the frequency of the sine wave. The third slider should control the phase of the sine wave. At the end of the draw() function use the text() function to draw the labels and values of the sliders. Make the sliders span the width of the canvas minus the label and values.","title":"Prompt Templates"},{"location":"demos/p5/prompt-templates/#prompt-templates","text":"","title":"Prompt Templates"},{"location":"demos/p5/prompt-templates/#stem-1-generate-a-file","text":"Generate a single p5.js sketch file that draws on a 400x400 canvas. ## Step 2: Add Controls and Buttons ```linenums=\"0\" Add range control sliders at the bottom of the canvas for changing the X and Y. Add range control sliders at the bottom of the canvas for changing the X and Y. Include the label and values for the sliders. Add buttons for \"Run\", \"Stop\", \"Step\" and \"Reset\" at the bottom of the canvas.","title":"Stem 1: Generate a File"},{"location":"demos/p5/prompt-templates/#step-3-specify-label-value-and-slider-layout","text":"1 2 Add the slider labels and values to the left of the sliders. Have the sliders begin at x=100 and span the rest of the width of the canvas.","title":"Step 3: Specify Label, Value and Slider Layout"},{"location":"demos/p5/prompt-templates/#add-the-canvas-const-and-reference","text":"Add the following at the start of the draw function: const canvas = createCanvas(600, 200); // remove comment to place in HTML page with a canvas-container ID // canvas.parent('canvas-container');","title":"Add the Canvas Const and Reference"},{"location":"demos/p5/prompt-templates/#example","text":"```linenums=\"0\" Generate a p5.js sketch file that teaches trigonometry concepts on a 400x400 canvas. Allow the user to change two values using range control sliders placed at the bottom of the canvas. The canvas contains a plot of a sine wave from -2 PI to 2 PI. The first slider should control the amplitude of a sine curve ranging from .1 to 2 in .1 steps and the default amplitude of 1.0 The second slider should control the frequency of the sine wave. The third slider should control the phase of the sine wave. At the end of the draw() function use the text() function to draw the labels and values of the sliders. Make the sliders span the width of the canvas minus the label and values.","title":"Example"},{"location":"demos/p5/pwm/","text":"Pulse-Width Modulation Pulse-width modulation is the way that microcontrollers send a precise signal to a device such as a motor controller. This simulation models an old CRT oscilloscope display with a bright green line on a black background. Pulse-Width Modulation","title":"Pulse-Width Modulation"},{"location":"demos/p5/pwm/#pulse-width-modulation","text":"Pulse-width modulation is the way that microcontrollers send a precise signal to a device such as a motor controller. This simulation models an old CRT oscilloscope display with a bright green line on a black background. Pulse-Width Modulation","title":"Pulse-Width Modulation"},{"location":"demos/p5/rainbow-tree/","text":"Rainbow Tree Generating a fractal tree is a fun way to demonstrate recursion. This example has two sliders: One changes the length of the branch of a tree The second changes the angle between the branches Rainbow Tree Demo","title":"Rainbow Tree"},{"location":"demos/p5/rainbow-tree/#rainbow-tree","text":"Generating a fractal tree is a fun way to demonstrate recursion. This example has two sliders: One changes the length of the branch of a tree The second changes the angle between the branches Rainbow Tree Demo","title":"Rainbow Tree"},{"location":"demos/p5/sine/","text":"Sine Wave In this demo, we use three range control sliders to change the: amplitude period and phase of a sine wave. Sine Wave Demo Challenge Create your own trigonometry demos by drawing the cosine and tangent functions.","title":"Sine Wave"},{"location":"demos/p5/sine/#sine-wave","text":"In this demo, we use three range control sliders to change the: amplitude period and phase of a sine wave. Sine Wave Demo Challenge Create your own trigonometry demos by drawing the cosine and tangent functions.","title":"Sine Wave"},{"location":"demos/p5/sketch-structure/","text":"Structure of a p5.js Sketch Each sketch (the name of a p5.js program) is usually a single JavaScript file that has an extension of .js. It has two main functions: setup() - which is run once on sketch startup. draw() - which run continually with a default redraw interval of 60 frames per second. A sketch runs in an area called a canvas which typically has a size such as 400x500 to indicate a size of width of 400 and height of 500. Like most other web drawing programs, the origin is the upper-left corner. This is different from most of the other cartesian drawing systems where the origin is the lower-left or center of the page. Canvas Layout The p5.js canvas uses the upper-left corner as the origin. Prompting Tips My suggestion is to always start your p5.js prompts with a statement such as: Generate a single file p5.js sketch on a 400x400 canvas. ChatGPT is very good at generating algorithms, but it is not good at doing layout. This is also compounded by the fact that many programs are designed to draw on a cartesian coordinate system with the origin being placed in the lower left corner of a canvas. Unfortunately, p5.js (like other HTML rendering tools) assumes that the origin is in the upper right corner of the screen. This causes ChatGPT to get confused and requires us to flip our diagrams on the y-axis by hand. See p5.js Coordinates and The p5.js Coordinate System and Shapes for some details. Here are some of my tips. Range Control Sliders Sliders are the input range controls that allow users to change a value of a simulation. I use sliders extensively in my examples because they are visible and intuitive. To get the sliders to work you need to give ChatGPT clear instructions to include both the slider, its label and its current value in the program. Note that many p5.js examples don't use sliders, but they use a mouse position on the canvas. This is usually a poor design choice since there is no clear hints the simulation us using the values and there is no label or feedback on what the current value is. Sliders have the following properties: Their initial position (x and y) Their min and max values The default value The step or increment (default is 1) The width of a slider 1 2 3 4 5 6 7 8 let mySliderDefault = 100 ; function setup () { // min, max, default mySlider = createSlider ( 0 , 255 , mySliderDefault ); mySlider . position ( 10 , 10 ); mySlider . style ( 'width' , '80px' ); } See the p5.js createSlider page for details. Unfortunately, there is no simple way to change many of the display details such as drawing the min, max and tick marks below the slider range control. You also can't easily change the color of the background or the knob on the slider. Here are two examples. Simple Slider with Label and Value Here is some sample text you can give ChatGPT to precisely create and position sliders. ChatGPT Prompt: Add a slider that controls the radius at the bottom of the canvas. The slider has values that ranges from 0 to 200 with a default value of 100. Place the slider to the right of the slider label and value at the bottom of the canvas. Place a label of \"Radius:\" and the current radius value using text() at the end of the draw() function. Here is the full prompt: Generate a single file p5.js sketch on a 400x400 canvas. The sketch will draw a blue circle at the center of the canvas. Add a slider that controls the radius of the circle at the bottom of the canvas. The slider has values that ranges from 0 to 200 with a default value of 100. Place the slider at the bottom of the canvas. Place a label of \"Radius:\" and the current radius value using text() at the end of the draw() function. Demo of Single Slider Radius Example Sketch Container Placement ChatGPT is not really good at placing graphic components on the screen and placing the canvas so it renders well within an HTML file. We focus on just getting ChatGPT to generate the correct sketch and then we place the sketch within an HTML file. Here is an example of placing a canvas within an HTML table. To do this, within the setup() function we can use the canvas.parent() method to indicate the ID of the enclosing HTML div id. Here is some sample `setup() code: 1 2 3 4 5 function setup () { // Create a p5.js canvas inside the div with id \"sketch-container\" const canvas = createCanvas ( 400 , 400 ); canvas . parent ( 'canvas-container' ); }","title":"Sketch Structure"},{"location":"demos/p5/sketch-structure/#structure-of-a-p5js-sketch","text":"Each sketch (the name of a p5.js program) is usually a single JavaScript file that has an extension of .js. It has two main functions: setup() - which is run once on sketch startup. draw() - which run continually with a default redraw interval of 60 frames per second. A sketch runs in an area called a canvas which typically has a size such as 400x500 to indicate a size of width of 400 and height of 500. Like most other web drawing programs, the origin is the upper-left corner. This is different from most of the other cartesian drawing systems where the origin is the lower-left or center of the page.","title":"Structure of a p5.js Sketch"},{"location":"demos/p5/sketch-structure/#canvas-layout","text":"The p5.js canvas uses the upper-left corner as the origin.","title":"Canvas Layout"},{"location":"demos/p5/sketch-structure/#prompting-tips","text":"My suggestion is to always start your p5.js prompts with a statement such as: Generate a single file p5.js sketch on a 400x400 canvas. ChatGPT is very good at generating algorithms, but it is not good at doing layout. This is also compounded by the fact that many programs are designed to draw on a cartesian coordinate system with the origin being placed in the lower left corner of a canvas. Unfortunately, p5.js (like other HTML rendering tools) assumes that the origin is in the upper right corner of the screen. This causes ChatGPT to get confused and requires us to flip our diagrams on the y-axis by hand. See p5.js Coordinates and The p5.js Coordinate System and Shapes for some details. Here are some of my tips.","title":"Prompting Tips"},{"location":"demos/p5/sketch-structure/#range-control-sliders","text":"Sliders are the input range controls that allow users to change a value of a simulation. I use sliders extensively in my examples because they are visible and intuitive. To get the sliders to work you need to give ChatGPT clear instructions to include both the slider, its label and its current value in the program. Note that many p5.js examples don't use sliders, but they use a mouse position on the canvas. This is usually a poor design choice since there is no clear hints the simulation us using the values and there is no label or feedback on what the current value is. Sliders have the following properties: Their initial position (x and y) Their min and max values The default value The step or increment (default is 1) The width of a slider 1 2 3 4 5 6 7 8 let mySliderDefault = 100 ; function setup () { // min, max, default mySlider = createSlider ( 0 , 255 , mySliderDefault ); mySlider . position ( 10 , 10 ); mySlider . style ( 'width' , '80px' ); } See the p5.js createSlider page for details. Unfortunately, there is no simple way to change many of the display details such as drawing the min, max and tick marks below the slider range control. You also can't easily change the color of the background or the knob on the slider. Here are two examples.","title":"Range Control Sliders"},{"location":"demos/p5/sketch-structure/#simple-slider-with-label-and-value","text":"Here is some sample text you can give ChatGPT to precisely create and position sliders. ChatGPT Prompt: Add a slider that controls the radius at the bottom of the canvas. The slider has values that ranges from 0 to 200 with a default value of 100. Place the slider to the right of the slider label and value at the bottom of the canvas. Place a label of \"Radius:\" and the current radius value using text() at the end of the draw() function. Here is the full prompt: Generate a single file p5.js sketch on a 400x400 canvas. The sketch will draw a blue circle at the center of the canvas. Add a slider that controls the radius of the circle at the bottom of the canvas. The slider has values that ranges from 0 to 200 with a default value of 100. Place the slider at the bottom of the canvas. Place a label of \"Radius:\" and the current radius value using text() at the end of the draw() function. Demo of Single Slider Radius Example","title":"Simple Slider with Label and Value"},{"location":"demos/p5/sketch-structure/#sketch-container-placement","text":"ChatGPT is not really good at placing graphic components on the screen and placing the canvas so it renders well within an HTML file. We focus on just getting ChatGPT to generate the correct sketch and then we place the sketch within an HTML file. Here is an example of placing a canvas within an HTML table. To do this, within the setup() function we can use the canvas.parent() method to indicate the ID of the enclosing HTML div id. Here is some sample `setup() code: 1 2 3 4 5 function setup () { // Create a p5.js canvas inside the div with id \"sketch-container\" const canvas = createCanvas ( 400 , 400 ); canvas . parent ( 'canvas-container' ); }","title":"Sketch Container Placement"},{"location":"demos/p5/sliders/","text":"Two Sliders Demo Run Two Slider Demo Sample ChatGPT Prompt Generate a single file p5.js sketch on a 400x400 canvas. The sketch draws a green rectangle at (50,50). Add two sliders placed on the bottom of the canvas to the right of the labels and values. One slider controls the height of a rectangle and one slider controls the width of the rectangle. The labels are \"Height:\" and \"Width:\". The values are placed to the right of the labels. Place both the slider labels and their values to the left of the sliders. Make the sliders widths span the remaining width of the canvas after the label and values. Challenges Modify the program to include sliders that change the x and y points. Add a slider that changes the color Add a checkbox to add a border around the rectangle Add a slider that changes the color of the border Add a slider that changes the width of the border","title":"Dual Sliders"},{"location":"demos/p5/sliders/#two-sliders-demo","text":"Run Two Slider Demo","title":"Two Sliders Demo"},{"location":"demos/p5/sliders/#sample-chatgpt-prompt","text":"Generate a single file p5.js sketch on a 400x400 canvas. The sketch draws a green rectangle at (50,50). Add two sliders placed on the bottom of the canvas to the right of the labels and values. One slider controls the height of a rectangle and one slider controls the width of the rectangle. The labels are \"Height:\" and \"Width:\". The values are placed to the right of the labels. Place both the slider labels and their values to the left of the sliders. Make the sliders widths span the remaining width of the canvas after the label and values. Challenges Modify the program to include sliders that change the x and y points. Add a slider that changes the color Add a checkbox to add a border around the rectangle Add a slider that changes the color of the border Add a slider that changes the width of the border","title":"Sample ChatGPT Prompt"},{"location":"demos/p5/slope/","text":"Slope and Intercept Students that are learning charts and plotting will learn about the slope and intercept of a line. This one is tricky since processing uses the upper-left corner as the origin and y increases as we move down the page. Slope and Intercept","title":"Slope and Intercept"},{"location":"demos/p5/slope/#slope-and-intercept","text":"Students that are learning charts and plotting will learn about the slope and intercept of a line. This one is tricky since processing uses the upper-left corner as the origin and y increases as we move down the page. Slope and Intercept","title":"Slope and Intercept"},{"location":"demos/p5/star/","text":"Multi-pointed Star Here is a p5 sketch that generates a multi-pointed star. Multi-pointed Star Here is the prompt I used to generate this program. Generate a p5.js sketch that draws a star at the center of a 400x400 canvas. Add a slider for the number of points on the star that ranges from 4 to 20 with a default of 10. Make the slider width be 360px and display the label and number of points by using the text() function at the end of the draw() function. Place the label, value and slider at the bottom of the canvas.","title":"Star"},{"location":"demos/p5/star/#multi-pointed-star","text":"Here is a p5 sketch that generates a multi-pointed star. Multi-pointed Star Here is the prompt I used to generate this program. Generate a p5.js sketch that draws a star at the center of a 400x400 canvas. Add a slider for the number of points on the star that ranges from 4 to 20 with a default of 10. Make the slider width be 360px and display the label and number of points by using the text() function at the end of the draw() function. Place the label, value and slider at the bottom of the canvas.","title":"Multi-pointed Star"},{"location":"demos/p5/switch/","text":"Draw Switches In this lab, we create functions that draw switches. The switches have a state of \"on\" (closed) or \"off\" (open). There are two versions: drawSwitchHoriz(x, y, w, isClosed) - for drawing a horizontal switch drawSwitchVert(x, y, w, isClosed) - for drawing a vertical swich Demo of Switch Drawing Full Test 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // draw switches on off horiz and vert let topLine = 100 ; let leftLine = 100 ; function setup () { noLoop (); const canvas = createCanvas ( 400 , 400 ); background ( 220 ); hline ( 0 , topLine , 100 ); // closed - on - 1 drawSwitchHoriz ( 100 , topLine , 50 , 1 ); hline ( 150 , topLine , 50 ); // open - off - 0 drawSwitchHoriz ( 200 , topLine , 50 , 0 ); hline ( 250 , topLine , 150 ); vline ( leftLine , 150 , 50 ); // on drawSwitchVert ( leftLine , 200 , 50 , 1 ); vline ( leftLine , 250 , 50 ); // off drawSwitchVert ( leftLine , 300 , 50 , 0 ); vline ( leftLine , 350 , 50 ); } function draw () { } function hline ( x , y , w ) { strokeWeight ( 1 ); line ( x , y , x + w , y ); } function vline ( x , y , w ) { strokeWeight ( 1 ); line ( x , y , x , y + w ); } function drawSwitchHoriz ( x , y , w , isClosed ) { circle ( x , y , 3 ) circle ( x + w , y , 3 ) stroke ( 0 ); strokeWeight ( 3 ); if ( isClosed ) { line ( x , y , x + w , y ); strokeWeight ( 0 ); text ( 'on' , x + 10 , y - 20 ) } else { line ( x , y , x + w * .8 , y - w * .6 ); strokeWeight ( 0 ); text ( 'off' , x + 20 , y ) } } function drawSwitchVert ( x , y , w , isClosed ) { circle ( x , y , 3 ) circle ( x , y + w , 3 ) stroke ( 0 ); strokeWeight ( 2 ); if ( isClosed ) { line ( x , y , x , y + w ); } else { line ( x , y , x + w * .8 , y + w * .6 ); } }","title":"Electrical Switch"},{"location":"demos/p5/switch/#draw-switches","text":"In this lab, we create functions that draw switches. The switches have a state of \"on\" (closed) or \"off\" (open). There are two versions: drawSwitchHoriz(x, y, w, isClosed) - for drawing a horizontal switch drawSwitchVert(x, y, w, isClosed) - for drawing a vertical swich Demo of Switch Drawing","title":"Draw Switches"},{"location":"demos/p5/switch/#full-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 // draw switches on off horiz and vert let topLine = 100 ; let leftLine = 100 ; function setup () { noLoop (); const canvas = createCanvas ( 400 , 400 ); background ( 220 ); hline ( 0 , topLine , 100 ); // closed - on - 1 drawSwitchHoriz ( 100 , topLine , 50 , 1 ); hline ( 150 , topLine , 50 ); // open - off - 0 drawSwitchHoriz ( 200 , topLine , 50 , 0 ); hline ( 250 , topLine , 150 ); vline ( leftLine , 150 , 50 ); // on drawSwitchVert ( leftLine , 200 , 50 , 1 ); vline ( leftLine , 250 , 50 ); // off drawSwitchVert ( leftLine , 300 , 50 , 0 ); vline ( leftLine , 350 , 50 ); } function draw () { } function hline ( x , y , w ) { strokeWeight ( 1 ); line ( x , y , x + w , y ); } function vline ( x , y , w ) { strokeWeight ( 1 ); line ( x , y , x , y + w ); } function drawSwitchHoriz ( x , y , w , isClosed ) { circle ( x , y , 3 ) circle ( x + w , y , 3 ) stroke ( 0 ); strokeWeight ( 3 ); if ( isClosed ) { line ( x , y , x + w , y ); strokeWeight ( 0 ); text ( 'on' , x + 10 , y - 20 ) } else { line ( x , y , x + w * .8 , y - w * .6 ); strokeWeight ( 0 ); text ( 'off' , x + 20 , y ) } } function drawSwitchVert ( x , y , w , isClosed ) { circle ( x , y , 3 ) circle ( x , y + w , 3 ) stroke ( 0 ); strokeWeight ( 2 ); if ( isClosed ) { line ( x , y , x , y + w ); } else { line ( x , y , x + w * .8 , y + w * .6 ); } }","title":"Full Test"},{"location":"demos/p5/the-office-dvd-logo/","text":"The Office DVD Logo Inspired by The Office and Project.jdm , we have an example of a program that has a small 20x20 rectangle moving diagonally on a rectangle that is not quite exactly square. The Office DVD Logo Demo Here is the prompt we started with: Generate a single file p5.js sketch on a 410x400 canvas. The p5.js sketch is an animation of a small 20x20 square moving diagonally on the canvas. The square starts in the lower-left corner of the screen and moves to the upper right corner. When the square hits the edge of the canvas it will bounce off the side. Make the square leave a colored rainbow pattern as it moves. ChatGPT Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // define square and velocity let square = { x : 0 , y : 400 , // should be 380 w : 20 , h : 20 , }; let velocity = { x : 2 , y : - 2 , }; let hueValue = 0 ; function setup () { createCanvas ( 410 , 400 ); colorMode ( HSB ); } function draw () { // noStroke is used to not have a border around the square noStroke (); // Incrementing hue value to create a rainbow effect hueValue = ( hueValue + 1 ) % 360 ; // Filling square with color and transparency fill ( hueValue , 100 , 100 , 0.1 ); // draw the square rect ( square . x , square . y , square . w , square . h ); // update square position square . x += velocity . x ; square . y += velocity . y ; // check for collision with edges and reverse if collided if ( square . x > width - square . w || square . x < 0 ) { velocity . x = - velocity . x ; } if ( square . y > height - square . h || square . y < 0 ) { velocity . y = - velocity . y ; } } The only bug is the y coordinate of the original rectangle. It is 400 and it should be 380. After we fixed that it worked!","title":"The Office DVD Logo"},{"location":"demos/p5/the-office-dvd-logo/#the-office-dvd-logo","text":"Inspired by The Office and Project.jdm , we have an example of a program that has a small 20x20 rectangle moving diagonally on a rectangle that is not quite exactly square. The Office DVD Logo Demo Here is the prompt we started with: Generate a single file p5.js sketch on a 410x400 canvas. The p5.js sketch is an animation of a small 20x20 square moving diagonally on the canvas. The square starts in the lower-left corner of the screen and moves to the upper right corner. When the square hits the edge of the canvas it will bounce off the side. Make the square leave a colored rainbow pattern as it moves.","title":"The Office DVD Logo"},{"location":"demos/p5/the-office-dvd-logo/#chatgpt-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 // define square and velocity let square = { x : 0 , y : 400 , // should be 380 w : 20 , h : 20 , }; let velocity = { x : 2 , y : - 2 , }; let hueValue = 0 ; function setup () { createCanvas ( 410 , 400 ); colorMode ( HSB ); } function draw () { // noStroke is used to not have a border around the square noStroke (); // Incrementing hue value to create a rainbow effect hueValue = ( hueValue + 1 ) % 360 ; // Filling square with color and transparency fill ( hueValue , 100 , 100 , 0.1 ); // draw the square rect ( square . x , square . y , square . w , square . h ); // update square position square . x += velocity . x ; square . y += velocity . y ; // check for collision with edges and reverse if collided if ( square . x > width - square . w || square . x < 0 ) { velocity . x = - velocity . x ; } if ( square . y > height - square . h || square . y < 0 ) { velocity . y = - velocity . y ; } } The only bug is the y coordinate of the original rectangle. It is 400 and it should be 380. After we fixed that it worked!","title":"ChatGPT Response"},{"location":"demos/p5/wave-sums/","text":"Wave Sums This lab demonstrates calculating the sum of sine waves of different lengths. Understanding how to convert waves from spacial domains into frequency domains is a key component of signal processing and understanding the FFT algorithm for doing Fast-Fourier Transforms. Wave Sums Demo","title":"Wave Sums"},{"location":"demos/p5/wave-sums/#wave-sums","text":"This lab demonstrates calculating the sum of sine waves of different lengths. Understanding how to convert waves from spacial domains into frequency domains is a key component of signal processing and understanding the FFT algorithm for doing Fast-Fourier Transforms. Wave Sums Demo","title":"Wave Sums"},{"location":"demos/p5/wire-animate/","text":"Wire Animate Wire Animation When animating circuits, we need an animation of electrons moving down a wire. In this lesson, we use ChatGPT to generate a function to help us draw a wire that has an animation of small circles (think electrons) going through the wire when the wire is carrying a current. Requesting ChatGPT to generate an explicit function is a great way to break larger problems into smaller tasks that ChatGPT can be successful at. Run the Wire Animation Demo Sample drawAnimatedWire() Function 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Function for drawing an animated wire function drawAnimatedWire ( x1 , y1 , x2 , y2 , speed1 , state ) { if ( state ) { let distance = dist ( x1 , y1 , x2 , y2 ); let circlePos = map (( millis () * speed1 ) % distance , 0 , distance , 0 , 1 ); // lerp generates the percent between two values let x = lerp ( x1 , x2 , circlePos ); let y = lerp ( y1 , y2 , circlePos ); stroke ( 0 ); strokeWeight ( lineWidth ) line ( x1 , y1 , x2 , y2 ); // Draw the wire fill ( 255 , 0 , 0 ); noStroke (); circle ( x , y , 10 ); // Draw the moving circle (electron) } else { stroke ( 0 ); strokeWeight ( lineWidth ) line ( x1 , y1 , x2 , y2 ); // Draw the wire } }","title":"Wire Animation"},{"location":"demos/p5/wire-animate/#wire-animate","text":"","title":"Wire Animate"},{"location":"demos/p5/wire-animate/#wire-animation","text":"When animating circuits, we need an animation of electrons moving down a wire. In this lesson, we use ChatGPT to generate a function to help us draw a wire that has an animation of small circles (think electrons) going through the wire when the wire is carrying a current. Requesting ChatGPT to generate an explicit function is a great way to break larger problems into smaller tasks that ChatGPT can be successful at. Run the Wire Animation Demo","title":"Wire Animation"},{"location":"demos/p5/wire-animate/#sample-drawanimatedwire-function","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // Function for drawing an animated wire function drawAnimatedWire ( x1 , y1 , x2 , y2 , speed1 , state ) { if ( state ) { let distance = dist ( x1 , y1 , x2 , y2 ); let circlePos = map (( millis () * speed1 ) % distance , 0 , distance , 0 , 1 ); // lerp generates the percent between two values let x = lerp ( x1 , x2 , circlePos ); let y = lerp ( y1 , y2 , circlePos ); stroke ( 0 ); strokeWeight ( lineWidth ) line ( x1 , y1 , x2 , y2 ); // Draw the wire fill ( 255 , 0 , 0 ); noStroke (); circle ( x , y , 10 ); // Draw the moving circle (electron) } else { stroke ( 0 ); strokeWeight ( lineWidth ) line ( x1 , y1 , x2 , y2 ); // Draw the wire } }","title":"Sample drawAnimatedWire() Function"},{"location":"future/","text":"The Future of AI in Education In our last chapter, we will take a look at the limitations of our current systems and then speculate on what the future holds for AI technologies in education. We will first look at what the next ten years hold and then speculate on how super-intelligent systems will impact education. AI Today Near Term Long Term","title":"Introduction"},{"location":"future/#the-future-of-ai-in-education","text":"In our last chapter, we will take a look at the limitations of our current systems and then speculate on what the future holds for AI technologies in education. We will first look at what the next ten years hold and then speculate on how super-intelligent systems will impact education. AI Today Near Term Long Term","title":"The Future of AI in Education"},{"location":"future/ai-today/","text":"AI in Education Today Despite the wonders in productivity that spell checkers, grammar checkers and Large-Language-Models have given us, they have fundamental limitations. They have no \"models of the world\" in their memory. They can't really simulate the consequences of their decisions. They are only \"smart parrots\" that repeat what they have been trained on and combined this knowledge in ways that are useful. Here are some of the challenges in AI: Data bias: AI models are only as good as the data they are trained on. If the data is biased or incomplete, then the AI system will produce biased results. Explainability: Many AI systems, especially deep neural networks, are considered black boxes, meaning that it can be challenging to understand how they arrive at their decisions. This lack of transparency makes it challenging for humans to trust and use AI systems in critical applications. Humans can make recommendations and give you detailed reasoning about why they recommend specific decisions. Generalization: AI systems often perform well on tasks they were trained on, but they may not generalize well to new tasks or domains. This means that AI models may need to be retrained for every new use case. Ethics and morality: As AI systems become more advanced and start making decisions that impact people's lives, ethical considerations become more critical. There is a need for guidelines and regulations to ensure that AI is used ethically and for the benefit of humanity. Energy consumption: The human brain only consumes about 12 watts. This is about the power of an energy-efficient LED lightbulb. AI systems require significant amounts of computing power, which can lead to high energy consumption and carbon emissions. Training GPT-3 was estimated to take over 1.2 gigawatt hours. This is a concern given the pressing need to address climate change.","title":"Today"},{"location":"future/ai-today/#ai-in-education-today","text":"Despite the wonders in productivity that spell checkers, grammar checkers and Large-Language-Models have given us, they have fundamental limitations. They have no \"models of the world\" in their memory. They can't really simulate the consequences of their decisions. They are only \"smart parrots\" that repeat what they have been trained on and combined this knowledge in ways that are useful. Here are some of the challenges in AI: Data bias: AI models are only as good as the data they are trained on. If the data is biased or incomplete, then the AI system will produce biased results. Explainability: Many AI systems, especially deep neural networks, are considered black boxes, meaning that it can be challenging to understand how they arrive at their decisions. This lack of transparency makes it challenging for humans to trust and use AI systems in critical applications. Humans can make recommendations and give you detailed reasoning about why they recommend specific decisions. Generalization: AI systems often perform well on tasks they were trained on, but they may not generalize well to new tasks or domains. This means that AI models may need to be retrained for every new use case. Ethics and morality: As AI systems become more advanced and start making decisions that impact people's lives, ethical considerations become more critical. There is a need for guidelines and regulations to ensure that AI is used ethically and for the benefit of humanity. Energy consumption: The human brain only consumes about 12 watts. This is about the power of an energy-efficient LED lightbulb. AI systems require significant amounts of computing power, which can lead to high energy consumption and carbon emissions. Training GPT-3 was estimated to take over 1.2 gigawatt hours. This is a concern given the pressing need to address climate change.","title":"AI in Education Today"},{"location":"future/long-term/","text":"The Long-Term of AI in Education Now let's pause and reflect on what the world of education might look like ten years from now. We anticipate that the cost of language understanding will drop to almost zero and the quality of the models will be 1,000x what it is today. Super-Intelligence Around the year 2030, we expect to see AI systems that will be able to not only understand our language but plan and analyze learning strategies in ways we can't anticipate today. We also anticipate that almost everyone will have access to these systems. We hope that access to low-cost adaptive learning will be commonplace. Rapid Feedback Systems One of the key limitations of today's systems is their limited ability to scan the brain and see if new concepts have landed in our brains. We expect low-cost non-invasive brain-scanning systems to provide feedback and adaptive strategies to help students learn concepts faster and link concepts together. Hybrid Human-Machines We also expect new innovative ways to communicate between human and machines potentially restructuring the connections in our brains to promote rapid learning. Although we don't expect the ability to download programs like in The Matrix, we expect","title":"Long Term"},{"location":"future/long-term/#the-long-term-of-ai-in-education","text":"Now let's pause and reflect on what the world of education might look like ten years from now. We anticipate that the cost of language understanding will drop to almost zero and the quality of the models will be 1,000x what it is today.","title":"The Long-Term of AI in Education"},{"location":"future/long-term/#super-intelligence","text":"Around the year 2030, we expect to see AI systems that will be able to not only understand our language but plan and analyze learning strategies in ways we can't anticipate today. We also anticipate that almost everyone will have access to these systems. We hope that access to low-cost adaptive learning will be commonplace.","title":"Super-Intelligence"},{"location":"future/long-term/#rapid-feedback-systems","text":"One of the key limitations of today's systems is their limited ability to scan the brain and see if new concepts have landed in our brains. We expect low-cost non-invasive brain-scanning systems to provide feedback and adaptive strategies to help students learn concepts faster and link concepts together.","title":"Rapid Feedback Systems"},{"location":"future/long-term/#hybrid-human-machines","text":"We also expect new innovative ways to communicate between human and machines potentially restructuring the connections in our brains to promote rapid learning. Although we don't expect the ability to download programs like in The Matrix, we expect","title":"Hybrid Human-Machines"},{"location":"future/near-term/","text":"AI Education in the Next Ten Years Language Understanding In the next few years, we will be able to assume that low-cost language models will be able to be integrated into all our learning and desktop applications. Personalized and Adaptive Learning AI systems will be used to create personalized and adaptive learning experiences for students. Central to this will be the availability of low-cost knowledge graphs that understand educational concepts and their dependencies. When these knowledge graphs can overlay what students already know and their learning objectives, learning management systems will be able to create precise recommendations on learning content. This will allow students to learn more efficiently and effectively. Regulation and Existential Threats We know that it can be difficult to predict how bad actors will use AI and if regulatory agencies will do their part to prevent harm from coming to individuals. Just like regulators need to control access to our phone systems with tools like CallerID to prevent SPAM phone calls and fraudsters from calling us, regulators will need to aggressively prosecute organizations that are using AI for nefarious purposes. 20 years from now, it is almost impossible to know how technology will evolve. Many people feel that AI will become a threat to humanity and that future AI will decide that human beings are no longer needed to achieve their goals. And we can't rule out that this will happen. But what we can do is make sure that the goals of humans will align with the goals of future AI systems. Educating future students to put in guardrails for keeping AI safe is one of the key elements we will continue to teach.","title":"Near Term"},{"location":"future/near-term/#ai-education-in-the-next-ten-years","text":"","title":"AI Education in the Next Ten Years"},{"location":"future/near-term/#language-understanding","text":"In the next few years, we will be able to assume that low-cost language models will be able to be integrated into all our learning and desktop applications.","title":"Language Understanding"},{"location":"future/near-term/#personalized-and-adaptive-learning","text":"AI systems will be used to create personalized and adaptive learning experiences for students. Central to this will be the availability of low-cost knowledge graphs that understand educational concepts and their dependencies. When these knowledge graphs can overlay what students already know and their learning objectives, learning management systems will be able to create precise recommendations on learning content. This will allow students to learn more efficiently and effectively.","title":"Personalized and Adaptive Learning"},{"location":"future/near-term/#regulation-and-existential-threats","text":"We know that it can be difficult to predict how bad actors will use AI and if regulatory agencies will do their part to prevent harm from coming to individuals. Just like regulators need to control access to our phone systems with tools like CallerID to prevent SPAM phone calls and fraudsters from calling us, regulators will need to aggressively prosecute organizations that are using AI for nefarious purposes. 20 years from now, it is almost impossible to know how technology will evolve. Many people feel that AI will become a threat to humanity and that future AI will decide that human beings are no longer needed to achieve their goals. And we can't rule out that this will happen. But what we can do is make sure that the goals of humans will align with the goals of future AI systems. Educating future students to put in guardrails for keeping AI safe is one of the key elements we will continue to teach.","title":"Regulation and Existential Threats"},{"location":"prompts/","text":"Prompts A prompt is written instructions you give to a language model like ChatGPT. Prompts can begin as a short instruction such as generate a lesson plan on Python loops . If the results are not what you want, then you can add more text. The more context you put in your prompts and the more specific you are about what you want in the response the more you are likely to get what you desire. Prompt Design Tips Here are a few tips to help you get started. Give Context You are teaching a 6th-grade class in Python programming. The students don't have any background in coding. Specify Your Audience Generate an explanation of this program at the 8th-grade level. Describe The Tone Use a relaxed and friendly tone. Provide Examples Here is a sample list of colors: 1 colors = [ \"red\" , \"orange\" , \"yellow\" ] generate 10 more colors in this format Use Precise Specific Phrases Note: There is a bug. Try: There is a compile error on line 10. Regression Line Regression Line","title":"Intro"},{"location":"prompts/#prompts","text":"A prompt is written instructions you give to a language model like ChatGPT. Prompts can begin as a short instruction such as generate a lesson plan on Python loops . If the results are not what you want, then you can add more text. The more context you put in your prompts and the more specific you are about what you want in the response the more you are likely to get what you desire.","title":"Prompts"},{"location":"prompts/#prompt-design-tips","text":"Here are a few tips to help you get started.","title":"Prompt Design Tips"},{"location":"prompts/#give-context","text":"You are teaching a 6th-grade class in Python programming. The students don't have any background in coding.","title":"Give Context"},{"location":"prompts/#specify-your-audience","text":"Generate an explanation of this program at the 8th-grade level.","title":"Specify Your Audience"},{"location":"prompts/#describe-the-tone","text":"Use a relaxed and friendly tone.","title":"Describe The Tone"},{"location":"prompts/#provide-examples","text":"Here is a sample list of colors: 1 colors = [ \"red\" , \"orange\" , \"yellow\" ] generate 10 more colors in this format","title":"Provide Examples"},{"location":"prompts/#use-precise-specific-phrases","text":"Note: There is a bug. Try: There is a compile error on line 10.","title":"Use Precise Specific Phrases"},{"location":"prompts/#regression-line","text":"Regression Line","title":"Regression Line"},{"location":"prompts/01-syllabus/","text":"Syllabus Settings model:davinci temperature 0.2 length: 1000 Prompt 1 2 3 4 Create a syllabus for a 10-week course for junior high school students on computational thinking. Provide the first four lessons. For each lesson, include a summary of the topics covered, prerequisites, and learning objectives. Results in markdown format. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # Computational Thinking Course Syllabus ## Course Description This 10-week course is designed to introduce junior high school students to the fundamentals of computational thinking. Students will learn the basics of problem solving, algorithms, and programming. ## Prerequisites No prior knowledge of programming is required. ## Course Objectives By the end of this course, students will be able to: - Understand the fundamentals of problem solving - Identify and create algorithms - Write basic programs in a programming language ## Lesson 1: Introduction to Problem Solving **Topics Covered:** - Overview of problem solving - Identifying and defining problems - Brainstorming solutions **Prerequisites:** None **Learning Objectives:** - Understand the fundamentals of problem solving - Identify and define a problem - Generate possible solutions to a problem ## Lesson 2: Algorithms **Topics Covered:** - Overview of algorithms - Identifying and defining algorithms - Creating algorithms **Prerequisites:** Introduction to Problem Solving **Learning Objectives:** - Understand the fundamentals of algorithms - Identify and define an algorithm - Create an algorithm to solve a problem ## Lesson 3: Programming Basics **Topics Covered:** - Overview of programming - Identifying and defining programming languages - Writing basic programs **Prerequisites:** Algorithms **Learning Objectives:** - Understand the fundamentals of programming - Identify and define a programming language - Write a basic program to solve a problem ## Lesson 4: Debugging **Topics Covered:** - Overview of debugging - Identifying and fixing errors - Debugging programs **Prerequisites:** Programming Basics **Learning Objectives:** - Understand the fundamentals of debugging - Identify and fix errors in a program - Debug a program to solve a problem","title":"Syllabus"},{"location":"prompts/01-syllabus/#syllabus","text":"","title":"Syllabus"},{"location":"prompts/01-syllabus/#settings","text":"model:davinci temperature 0.2 length: 1000","title":"Settings"},{"location":"prompts/01-syllabus/#prompt","text":"1 2 3 4 Create a syllabus for a 10-week course for junior high school students on computational thinking. Provide the first four lessons. For each lesson, include a summary of the topics covered, prerequisites, and learning objectives. Results in markdown format.","title":"Prompt"},{"location":"prompts/01-syllabus/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 # Computational Thinking Course Syllabus ## Course Description This 10-week course is designed to introduce junior high school students to the fundamentals of computational thinking. Students will learn the basics of problem solving, algorithms, and programming. ## Prerequisites No prior knowledge of programming is required. ## Course Objectives By the end of this course, students will be able to: - Understand the fundamentals of problem solving - Identify and create algorithms - Write basic programs in a programming language ## Lesson 1: Introduction to Problem Solving **Topics Covered:** - Overview of problem solving - Identifying and defining problems - Brainstorming solutions **Prerequisites:** None **Learning Objectives:** - Understand the fundamentals of problem solving - Identify and define a problem - Generate possible solutions to a problem ## Lesson 2: Algorithms **Topics Covered:** - Overview of algorithms - Identifying and defining algorithms - Creating algorithms **Prerequisites:** Introduction to Problem Solving **Learning Objectives:** - Understand the fundamentals of algorithms - Identify and define an algorithm - Create an algorithm to solve a problem ## Lesson 3: Programming Basics **Topics Covered:** - Overview of programming - Identifying and defining programming languages - Writing basic programs **Prerequisites:** Algorithms **Learning Objectives:** - Understand the fundamentals of programming - Identify and define a programming language - Write a basic program to solve a problem ## Lesson 4: Debugging **Topics Covered:** - Overview of debugging - Identifying and fixing errors - Debugging programs **Prerequisites:** Programming Basics **Learning Objectives:** - Understand the fundamentals of debugging - Identify and fix errors in a program - Debug a program to solve a problem","title":"Response"},{"location":"prompts/02-code-of-conduct/","text":"Generating a Code of Conduct ChatGPT can generate a code of conduct for your classroom that can be easily customized. High School Example Prompt 1 Create a code of conduct for a high school programming class. I added the \"return in markdown\" to get the response below\" Result Code of Conduct for High School Programming Class Respect: Respect yourself, your classmates, and your teacher. Treat everyone with courtesy and kindness. Attendance: Attendance is mandatory. If you are unable to attend, notify your teacher in advance. Participation: Participate in class discussions and activities. Ask questions and offer help to your classmates. Academic Integrity: All work must be your own. Plagiarism and cheating will not be tolerated. **Technology: Use of technology should be limited to class activities. No personal devices should be used during class time. Safety: Follow all safety protocols and procedures. Respect the Environment: Keep the classroom clean and organized. Respect the Equipment: Treat all equipment with care. Respect Deadlines: All assignments must be completed on time. Respect the Rules: Follow all rules and regulations set by the school and teacher. Failure to adhere to this code of conduct may result in disciplinary action. 1 2 3 4 5 6 7 8 ### Junior High Grouped Prompt In this example we ask ChatGPT to group the code into topics. ```linenums=\"0\" Create a code of conduct for a junior high school classroom. Include topics of values, diversity and respect. Return the results in markdown format. Response Code of Conduct for Junior High School Classroom Values: 1. Respect yourself, your peers, and your teachers. 2. Bring a positive attitude and be open to learning new things. 3. Be honest and responsible. Diversity: 1. Respect and value the diversity of the classroom. 2. Avoid making any comments or jokes that could be taken as offensive or disrespectful. 3. Treat everyone equally regardless of race, gender, religion, or any other characteristics. Respect: 1. Listen and pay attention when others are speaking. 2. Respect the opinions and viewpoints of others, even if you disagree. 3. Refrain from using any kind of violence or verbal abuse, including bullying or harassment. 4. Follow the teacher\u2019s instructions and rules. 5. Respect the property of the school and others. Failure to adhere to this code of conduct may result in disciplinary action. Discussion What is the variation for grade levels? What are the pros and cons of having student work with ChatGPT to create a code of conduct? Will a code of conduct generated by an AI be more or less respected by students? What cultural and regional differences might be relevant for your classroom. How would you change the prompt? Prompt 1 A student named Jimmy has been doing well in class up to the past week. Since then Jimmy has been late to class and has been acting out in class. Write a letter to the parents making them aware of this behavior and suggesting interventions. Online Classes For online classrooms add the words \"Contributor Covenant Code of Conduct\" to your prompt Contributor Covenant","title":"Code of Conduct"},{"location":"prompts/02-code-of-conduct/#generating-a-code-of-conduct","text":"ChatGPT can generate a code of conduct for your classroom that can be easily customized.","title":"Generating a Code of Conduct"},{"location":"prompts/02-code-of-conduct/#high-school-example","text":"","title":"High School Example"},{"location":"prompts/02-code-of-conduct/#prompt-1","text":"Create a code of conduct for a high school programming class. I added the \"return in markdown\" to get the response below\"","title":"Prompt 1"},{"location":"prompts/02-code-of-conduct/#result","text":"","title":"Result"},{"location":"prompts/02-code-of-conduct/#code-of-conduct-for-high-school-programming-class","text":"Respect: Respect yourself, your classmates, and your teacher. Treat everyone with courtesy and kindness. Attendance: Attendance is mandatory. If you are unable to attend, notify your teacher in advance. Participation: Participate in class discussions and activities. Ask questions and offer help to your classmates. Academic Integrity: All work must be your own. Plagiarism and cheating will not be tolerated. **Technology: Use of technology should be limited to class activities. No personal devices should be used during class time. Safety: Follow all safety protocols and procedures. Respect the Environment: Keep the classroom clean and organized. Respect the Equipment: Treat all equipment with care. Respect Deadlines: All assignments must be completed on time. Respect the Rules: Follow all rules and regulations set by the school and teacher. Failure to adhere to this code of conduct may result in disciplinary action. 1 2 3 4 5 6 7 8 ### Junior High Grouped Prompt In this example we ask ChatGPT to group the code into topics. ```linenums=\"0\" Create a code of conduct for a junior high school classroom. Include topics of values, diversity and respect. Return the results in markdown format.","title":"Code of Conduct for High School Programming Class"},{"location":"prompts/02-code-of-conduct/#response","text":"Code of Conduct for Junior High School Classroom Values: 1. Respect yourself, your peers, and your teachers. 2. Bring a positive attitude and be open to learning new things. 3. Be honest and responsible. Diversity: 1. Respect and value the diversity of the classroom. 2. Avoid making any comments or jokes that could be taken as offensive or disrespectful. 3. Treat everyone equally regardless of race, gender, religion, or any other characteristics. Respect: 1. Listen and pay attention when others are speaking. 2. Respect the opinions and viewpoints of others, even if you disagree. 3. Refrain from using any kind of violence or verbal abuse, including bullying or harassment. 4. Follow the teacher\u2019s instructions and rules. 5. Respect the property of the school and others. Failure to adhere to this code of conduct may result in disciplinary action.","title":"Response"},{"location":"prompts/02-code-of-conduct/#discussion","text":"What is the variation for grade levels? What are the pros and cons of having student work with ChatGPT to create a code of conduct? Will a code of conduct generated by an AI be more or less respected by students? What cultural and regional differences might be relevant for your classroom. How would you change the prompt?","title":"Discussion"},{"location":"prompts/02-code-of-conduct/#prompt","text":"1 A student named Jimmy has been doing well in class up to the past week. Since then Jimmy has been late to class and has been acting out in class. Write a letter to the parents making them aware of this behavior and suggesting interventions.","title":"Prompt"},{"location":"prompts/02-code-of-conduct/#online-classes","text":"For online classrooms add the words \"Contributor Covenant Code of Conduct\" to your prompt Contributor Covenant","title":"Online Classes"},{"location":"prompts/03-license/","text":"Using ChatGPT to Select the Right License There are hundreds of licensing options for you when you put your course information on the web. But which license is right for you> Why should we be concerned about licenses? You may put a lot of work into your course only to have someone else resell it for money. That might not be fair to you. You also want other teachers to use your materials but acknowledge the work you did with attribution. Legal Issues Here are the top three issues. Sharing with other teachers - do you want other teachers to reuse and remix your work? Attribution - do you want others to recognize your work? Non-commercial - is it ok if a commercial publisher takes your work and sells it. Sample Prompt I am a teacher that is creating new lesson plans. I want other teachers to be able to reuse my content and modify it for their classrooms. However, I want them to give me attribution and I don't want anyone to be able to resell my content. What creative commons license should I use? Sample Response The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license would be the best option for you. This license allows others to reuse and modify your content for non-commercial purposes, as long as they give you attribution and share their modified content under the same license. It also prevents anyone from reselling your content. You can then look-up this name and provide a link to it: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Adding the License to Each Page In the next session, we will see how you can add this license information to each page in your website.","title":"License"},{"location":"prompts/03-license/#using-chatgpt-to-select-the-right-license","text":"There are hundreds of licensing options for you when you put your course information on the web. But which license is right for you>","title":"Using ChatGPT to Select the Right License"},{"location":"prompts/03-license/#why-should-we-be-concerned-about-licenses","text":"You may put a lot of work into your course only to have someone else resell it for money. That might not be fair to you. You also want other teachers to use your materials but acknowledge the work you did with attribution.","title":"Why should we be concerned about licenses?"},{"location":"prompts/03-license/#legal-issues","text":"Here are the top three issues. Sharing with other teachers - do you want other teachers to reuse and remix your work? Attribution - do you want others to recognize your work? Non-commercial - is it ok if a commercial publisher takes your work and sells it.","title":"Legal Issues"},{"location":"prompts/03-license/#sample-prompt","text":"I am a teacher that is creating new lesson plans. I want other teachers to be able to reuse my content and modify it for their classrooms. However, I want them to give me attribution and I don't want anyone to be able to resell my content. What creative commons license should I use?","title":"Sample Prompt"},{"location":"prompts/03-license/#sample-response","text":"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license would be the best option for you. This license allows others to reuse and modify your content for non-commercial purposes, as long as they give you attribution and share their modified content under the same license. It also prevents anyone from reselling your content. You can then look-up this name and provide a link to it: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International","title":"Sample Response"},{"location":"prompts/03-license/#adding-the-license-to-each-page","text":"In the next session, we will see how you can add this license information to each page in your website.","title":"Adding the License to Each Page"},{"location":"prompts/04-license-footer/","text":"Adding a License to the Footer mkdocs material footer Prompt I want to create a web page with a license on the footer of each page. I am using mkdocs. How can I add some HTML to the footer to indicate my license is covered under \"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\"? Response 1 2 3 4 5 You can add a footer to your web page using the mkdocs-footer-plugin. This plugin allows you to add custom HTML to the footer of your page. To add the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license to the footer, you can add the following HTML code to the footer.html file: <div> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. </div>","title":"License Footer"},{"location":"prompts/04-license-footer/#adding-a-license-to-the-footer","text":"mkdocs material footer","title":"Adding a License to the Footer"},{"location":"prompts/04-license-footer/#prompt","text":"I want to create a web page with a license on the footer of each page. I am using mkdocs. How can I add some HTML to the footer to indicate my license is covered under \"The Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)\"?","title":"Prompt"},{"location":"prompts/04-license-footer/#response","text":"1 2 3 4 5 You can add a footer to your web page using the mkdocs-footer-plugin. This plugin allows you to add custom HTML to the footer of your page. To add the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) license to the footer, you can add the following HTML code to the footer.html file: <div> <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><br />This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>. </div>","title":"Response"},{"location":"prompts/04b-static-site-generator/","text":"Static Website Generators If you want to generate a website using Markdown, there are numerous static site generators and tools available. Here are some of the most popular ones I found using the following prompt: Prompt What software can generate a website using markdown format? Response MkDocs Description : Specifically designed for building project documentation sites from Markdown files. Language : Python Note MkDocs is the preferred tool used by most Python developers and data scientists because it has extensive support for Python documentation sites and can easily be integrated with Jupyter Notebooks. MkDocs also has an extensive library of themes such as the Material Theme Docusaurus Description : Developed by Facebook, it's great for documentation, leveraging React and Markdown. Docusaurus is more flexible than Mkdocs but it does require some knowlege of React to be customized. Language : JavaScript (React) Jekyll Description : One of the most popular static site generators. Known for its integration with GitHub Pages. Language : Ruby Hugo Description : Extremely fast and is becoming increasingly popular for generating static sites from Markdown files. Language : Go 3. Hexo Description : Popular among Node.js users for its speed and flexibility. Language : JavaScript (Node.js) 4. Pelican Description : A versatile tool for generating static sites from Markdown, reStructuredText, or AsciiDoc content. Language : Python 6. Middleman Description : A flexible static site generator that supports Markdown and other formats. Language : Ruby 7. Gatsby Description : Can work with a variety of data sources but can be used to build sites from Markdown files. Uses React for its frontend framework. Language : JavaScript (React) 8. VuePress Description : Designed for writing technical documentation. Generates a static site from Markdown files using Vue.js for frontend components. Language : JavaScript (Vue.js) 10. Gridsome Description : A Vue-powered static site generator that can work with Markdown and other data sources. Language : JavaScript (Vue.js) 11. Eleventy (11ty) Description : A simpler, more flexible tool that supports multiple template formats including Markdown. Language : JavaScript 12. Zola Description : Fast and feature-rich static site generator that supports Markdown. Language : Rust Hosting : After generating your static site, you can host it using services like GitHub Pages, Netlify, Vercel, or any traditional web host since you're essentially dealing with static HTML, CSS, and JavaScript files.","title":"Static Website Generators"},{"location":"prompts/04b-static-site-generator/#static-website-generators","text":"If you want to generate a website using Markdown, there are numerous static site generators and tools available. Here are some of the most popular ones I found using the following prompt:","title":"Static Website Generators"},{"location":"prompts/04b-static-site-generator/#prompt","text":"What software can generate a website using markdown format?","title":"Prompt"},{"location":"prompts/04b-static-site-generator/#response","text":"","title":"Response"},{"location":"prompts/04b-static-site-generator/#mkdocs","text":"Description : Specifically designed for building project documentation sites from Markdown files. Language : Python Note MkDocs is the preferred tool used by most Python developers and data scientists because it has extensive support for Python documentation sites and can easily be integrated with Jupyter Notebooks. MkDocs also has an extensive library of themes such as the Material Theme","title":"MkDocs"},{"location":"prompts/04b-static-site-generator/#docusaurus","text":"Description : Developed by Facebook, it's great for documentation, leveraging React and Markdown. Docusaurus is more flexible than Mkdocs but it does require some knowlege of React to be customized. Language : JavaScript (React)","title":"Docusaurus"},{"location":"prompts/04b-static-site-generator/#jekyll","text":"Description : One of the most popular static site generators. Known for its integration with GitHub Pages. Language : Ruby","title":"Jekyll"},{"location":"prompts/04b-static-site-generator/#hugo","text":"Description : Extremely fast and is becoming increasingly popular for generating static sites from Markdown files. Language : Go","title":"Hugo"},{"location":"prompts/04b-static-site-generator/#3-hexo","text":"Description : Popular among Node.js users for its speed and flexibility. Language : JavaScript (Node.js)","title":"3. Hexo"},{"location":"prompts/04b-static-site-generator/#4-pelican","text":"Description : A versatile tool for generating static sites from Markdown, reStructuredText, or AsciiDoc content. Language : Python","title":"4. Pelican"},{"location":"prompts/04b-static-site-generator/#6-middleman","text":"Description : A flexible static site generator that supports Markdown and other formats. Language : Ruby","title":"6. Middleman"},{"location":"prompts/04b-static-site-generator/#7-gatsby","text":"Description : Can work with a variety of data sources but can be used to build sites from Markdown files. Uses React for its frontend framework. Language : JavaScript (React)","title":"7. Gatsby"},{"location":"prompts/04b-static-site-generator/#8-vuepress","text":"Description : Designed for writing technical documentation. Generates a static site from Markdown files using Vue.js for frontend components. Language : JavaScript (Vue.js)","title":"8. VuePress"},{"location":"prompts/04b-static-site-generator/#10-gridsome","text":"Description : A Vue-powered static site generator that can work with Markdown and other data sources. Language : JavaScript (Vue.js)","title":"10. Gridsome"},{"location":"prompts/04b-static-site-generator/#11-eleventy-11ty","text":"Description : A simpler, more flexible tool that supports multiple template formats including Markdown. Language : JavaScript","title":"11. Eleventy (11ty)"},{"location":"prompts/04b-static-site-generator/#12-zola","text":"Description : Fast and feature-rich static site generator that supports Markdown. Language : Rust Hosting : After generating your static site, you can host it using services like GitHub Pages, Netlify, Vercel, or any traditional web host since you're essentially dealing with static HTML, CSS, and JavaScript files.","title":"12. Zola"},{"location":"prompts/05-mkdocs/","text":"Mkdoc Configuration File You want to generate a mkdocs configuration file that includes: Navigation Custom footer with license Prompt 1 2 3 4 5 I want to create a new microsite using mkdocs and the material theme. Generate a sample mkdocs.yml file that includes a left-side nav bar and pages for home, lessons, a glossary, references and contacts. Add extensions that allows me to create a custom html footer for my license on every page. Add an extension for code highlighting. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 site_name: ChatGPT for Teachers theme: name: 'material' language: en nav: - Home: index.md - Lessons: lessons.md - Glossary: glossary.md - References: references.md - Contacts: contacts.md extra_css: - custom.css extra_javascript: - custom.js markdown_extensions: - footnotes - codehilite footer_html: - <p>Copyright \u00a9 2020 My Microsite. All rights reserved.</p> Additional Parameters Include site_description, site_author, repo_name, repo_url, edit_uri","title":"Mkdocs Config"},{"location":"prompts/05-mkdocs/#mkdoc-configuration-file","text":"You want to generate a mkdocs configuration file that includes: Navigation Custom footer with license","title":"Mkdoc Configuration File"},{"location":"prompts/05-mkdocs/#prompt","text":"1 2 3 4 5 I want to create a new microsite using mkdocs and the material theme. Generate a sample mkdocs.yml file that includes a left-side nav bar and pages for home, lessons, a glossary, references and contacts. Add extensions that allows me to create a custom html footer for my license on every page. Add an extension for code highlighting.","title":"Prompt"},{"location":"prompts/05-mkdocs/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 site_name: ChatGPT for Teachers theme: name: 'material' language: en nav: - Home: index.md - Lessons: lessons.md - Glossary: glossary.md - References: references.md - Contacts: contacts.md extra_css: - custom.css extra_javascript: - custom.js markdown_extensions: - footnotes - codehilite footer_html: - <p>Copyright \u00a9 2020 My Microsite. All rights reserved.</p>","title":"Response"},{"location":"prompts/05-mkdocs/#additional-parameters","text":"Include site_description, site_author, repo_name, repo_url, edit_uri","title":"Additional Parameters"},{"location":"prompts/06-lessons/","text":"Generating Lessons Lessons are individual units of learning within a course. In order to generate detailed lesson plans we need to give ChatGPT some context about: The audience (grade level) The subject or topic The background The output format (markdown) Sample Prompt Create a detailed lesson plan for teaching loops in Python for a junior high-school student about 12 years old. Assume the student has already had a basic introduction to Python and has had lessons on: 1. Syntax 2. Conditionals Generate sample Python code within markdown that will include an input list of colors (red, green blue etc.) and show how to loop through the list of colors to print them each out. Sample Response Below is the sample response. Because the response includes markdown and sample code, we don't make it a simple text object. Lesson Plan: Loops in Python Objectives Understand the concept of loops in Python Learn how to use loops to iterate through a list of items Create a program that uses a loop to print out a list of colors Materials Computer with Python installed Sample code Introduction Welcome to our lesson on loops in Python! In this lesson, we will learn how to use loops to iterate through a list of items. We will also create a program that uses a loop to print out a list of colors. What is a Loop? A loop is a programming construct that allows us to repeat a set of instructions multiple times. This is useful when we want to perform the same task on multiple items. For example, if we have a list of colors, we can use a loop to print out each color in the list. Types of Loops There are two types of loops in Python: for loops and while loops. A for loop is used when we know how many times we want to repeat the instructions. For example, if we have a list of 10 colors, we can use a for loop to print out each color in the list. A while loop is used when we don't know how many times we want to repeat the instructions. For example, if we want to keep asking the user for input until they enter a certain value, we can use a while loop. Sample Code Let's look at some sample code that uses a for loop to print out a list of colors. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 red green blue Practice Now it's time to practice writing a program that uses a loop to print out a list of colors. Create a list of colors and use a for loop to print out each color in the list. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" , \"yellow\" , \"orange\" , \"purple\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: red green blue yellow orange purple Conclusion Congratulations! You have now learned how to use loops to iterate through a list of items. You have also created a program that uses a loop to print out a list of colors.","title":"Lessons"},{"location":"prompts/06-lessons/#generating-lessons","text":"Lessons are individual units of learning within a course. In order to generate detailed lesson plans we need to give ChatGPT some context about: The audience (grade level) The subject or topic The background The output format (markdown)","title":"Generating Lessons"},{"location":"prompts/06-lessons/#sample-prompt","text":"Create a detailed lesson plan for teaching loops in Python for a junior high-school student about 12 years old. Assume the student has already had a basic introduction to Python and has had lessons on: 1. Syntax 2. Conditionals Generate sample Python code within markdown that will include an input list of colors (red, green blue etc.) and show how to loop through the list of colors to print them each out.","title":"Sample Prompt"},{"location":"prompts/06-lessons/#sample-response","text":"Below is the sample response. Because the response includes markdown and sample code, we don't make it a simple text object.","title":"Sample Response"},{"location":"prompts/06-lessons/#lesson-plan-loops-in-python","text":"","title":"Lesson Plan: Loops in Python"},{"location":"prompts/06-lessons/#objectives","text":"Understand the concept of loops in Python Learn how to use loops to iterate through a list of items Create a program that uses a loop to print out a list of colors","title":"Objectives"},{"location":"prompts/06-lessons/#materials","text":"Computer with Python installed Sample code","title":"Materials"},{"location":"prompts/06-lessons/#introduction","text":"Welcome to our lesson on loops in Python! In this lesson, we will learn how to use loops to iterate through a list of items. We will also create a program that uses a loop to print out a list of colors.","title":"Introduction"},{"location":"prompts/06-lessons/#what-is-a-loop","text":"A loop is a programming construct that allows us to repeat a set of instructions multiple times. This is useful when we want to perform the same task on multiple items. For example, if we have a list of colors, we can use a loop to print out each color in the list.","title":"What is a Loop?"},{"location":"prompts/06-lessons/#types-of-loops","text":"There are two types of loops in Python: for loops and while loops. A for loop is used when we know how many times we want to repeat the instructions. For example, if we have a list of 10 colors, we can use a for loop to print out each color in the list. A while loop is used when we don't know how many times we want to repeat the instructions. For example, if we want to keep asking the user for input until they enter a certain value, we can use a while loop.","title":"Types of Loops"},{"location":"prompts/06-lessons/#sample-code","text":"Let's look at some sample code that uses a for loop to print out a list of colors. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: 1 2 3 red green blue","title":"Sample Code"},{"location":"prompts/06-lessons/#practice","text":"Now it's time to practice writing a program that uses a loop to print out a list of colors. Create a list of colors and use a for loop to print out each color in the list. 1 2 3 4 5 6 7 # Create a list of colors colors = [ \"red\" , \"green\" , \"blue\" , \"yellow\" , \"orange\" , \"purple\" ] # Loop through the list of colors for color in colors : # Print out each color print ( color ) The output of this code will be: red green blue yellow orange purple","title":"Practice"},{"location":"prompts/06-lessons/#conclusion","text":"Congratulations! You have now learned how to use loops to iterate through a list of items. You have also created a program that uses a loop to print out a list of colors.","title":"Conclusion"},{"location":"prompts/07-glossary/","text":"Glossary of Terms One of the best ways for students to validate they understand a topic is to view the terminology used in the lessons. Students can quickly scan the terms and check to see if they understand the defintions. Unfortunately, creating glossaries that have precise definitions that are clear, consistent and age-appropriate takes time. Luckily, ChatGPT can make these tasks much easier. Here is an example. Prompt Create a glossary of terms for an introductory class in Python. For each term, return the markdown format using four hashtags before each term name followed by the definition. #### Term Name Definition Response Variable Definition: A named memory location used to store data Example: x = 5 Function Definition: A block of code that performs a specific task Example: def add_two_numbers(x, y): return x + y Loop Definition: A control flow statement that allows code to be executed repeatedly Example: for i in range(10): print(i) List Definition: An ordered collection of data Example: my_list = [1, 2, 3, 4] Dictionary Definition: A collection of key-value pairs Example: my_dict = {'name': 'John', 'age': 30} String Definition: A sequence of characters Example: my_string = 'Hello World!' References WikiHow: How to Write a Glossary What Is a Glossary? | Definition, Templates, & Examples - Scribbr","title":"Glossary"},{"location":"prompts/07-glossary/#glossary-of-terms","text":"One of the best ways for students to validate they understand a topic is to view the terminology used in the lessons. Students can quickly scan the terms and check to see if they understand the defintions. Unfortunately, creating glossaries that have precise definitions that are clear, consistent and age-appropriate takes time. Luckily, ChatGPT can make these tasks much easier. Here is an example.","title":"Glossary of Terms"},{"location":"prompts/07-glossary/#prompt","text":"Create a glossary of terms for an introductory class in Python. For each term, return the markdown format using four hashtags before each term name followed by the definition. #### Term Name Definition","title":"Prompt"},{"location":"prompts/07-glossary/#response","text":"","title":"Response"},{"location":"prompts/07-glossary/#variable","text":"Definition: A named memory location used to store data Example: x = 5","title":"Variable"},{"location":"prompts/07-glossary/#function","text":"Definition: A block of code that performs a specific task Example: def add_two_numbers(x, y): return x + y","title":"Function"},{"location":"prompts/07-glossary/#loop","text":"Definition: A control flow statement that allows code to be executed repeatedly Example: for i in range(10): print(i)","title":"Loop"},{"location":"prompts/07-glossary/#list","text":"Definition: An ordered collection of data Example: my_list = [1, 2, 3, 4]","title":"List"},{"location":"prompts/07-glossary/#dictionary","text":"Definition: A collection of key-value pairs Example: my_dict = {'name': 'John', 'age': 30}","title":"Dictionary"},{"location":"prompts/07-glossary/#string","text":"Definition: A sequence of characters Example: my_string = 'Hello World!'","title":"String"},{"location":"prompts/07-glossary/#references","text":"WikiHow: How to Write a Glossary What Is a Glossary? | Definition, Templates, & Examples - Scribbr","title":"References"},{"location":"prompts/08-concept-graph/","text":"Concept Graph Teachers frequently have a list of topics that they would like to cover, but they are not expert enough in the topic to know what order to teach the concepts. ChatGPT can help! ChatGPT can return a textual representation of how concepts depend on other concepts. A concept graph is a document that suggests the order that concepts should be taught in a course. The format of the document is usually a dependency structure with each concept being a node on the graph that indicates what other concepts must be mastered before this concept is introduced. Prompt You are an AI that helps teachers figure out what order to teach topics in the classroom. Create an ordered dependency list for the following topics in a Python Course: 1. Introduction 2. Getting Started 3. Variables 4. Conditionals 5. Loops 6. Lists 7. Data Structures 8. Functions 9. Function Parameters 10. Random Numbers 11. Recursion Return the results in Mermaid dependency format like this: Response graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) Response To see if ChatGPT understands the idea of concept order we want to get a response that shows that you need to understand functions before you use function parameters or recursion. here is the response: D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) And here is the rendering: Yes indeed! ChatGPT knew that concept H(Functions) needs to be taught before Function Parameters and Recursion. Here is the entire list graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) Concept Graph References Lost in Knowledge Space - a blog on the topic of how learning management is dependent on a graph representation of concepts and there relationships. Link to Mermaid Live","title":"Concept Graph"},{"location":"prompts/08-concept-graph/#concept-graph","text":"Teachers frequently have a list of topics that they would like to cover, but they are not expert enough in the topic to know what order to teach the concepts. ChatGPT can help! ChatGPT can return a textual representation of how concepts depend on other concepts. A concept graph is a document that suggests the order that concepts should be taught in a course. The format of the document is usually a dependency structure with each concept being a node on the graph that indicates what other concepts must be mastered before this concept is introduced.","title":"Concept Graph"},{"location":"prompts/08-concept-graph/#prompt","text":"You are an AI that helps teachers figure out what order to teach topics in the classroom. Create an ordered dependency list for the following topics in a Python Course: 1. Introduction 2. Getting Started 3. Variables 4. Conditionals 5. Loops 6. Lists 7. Data Structures 8. Functions 9. Function Parameters 10. Random Numbers 11. Recursion Return the results in Mermaid dependency format like this: Response graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists)","title":"Prompt"},{"location":"prompts/08-concept-graph/#response","text":"To see if ChatGPT understands the idea of concept order we want to get a response that shows that you need to understand functions before you use function parameters or recursion. here is the response: D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion) And here is the rendering: Yes indeed! ChatGPT knew that concept H(Functions) needs to be taught before Function Parameters and Recursion. Here is the entire list graph LR A(Intro) --> B(Getting Started) B --> C(Variables) C --> D(Loops) C --> E(Conditionals) C --> F(Lists) D --> G(Data Structures) F --> G G --> H(Functions) H --> I(Function Parameters) H --> J(Random Numbers) H --> K(Recursion)","title":"Response"},{"location":"prompts/08-concept-graph/#concept-graph-references","text":"Lost in Knowledge Space - a blog on the topic of how learning management is dependent on a graph representation of concepts and there relationships. Link to Mermaid Live","title":"Concept Graph References"},{"location":"prompts/09-sample-code/","text":"Generating Sample Code ChatGPT is also very good at generating sample software programs for your classrooms. You can start with simple examples and then dive into more complex examples. There are two ways you can learn this process. First, is to just use the standard ChatGPT. If you have a subscription to ChatGPT Plus you can use the [Code Interpreter] to also generate and execute the code. If there is a Python library that can generate images you can also have ChatGPT Code Interpreter it generate images! Simple Prompt Create a Python program that prints \"Hello World!\" Response 1 print ( \"Hello World!\" ) More Complex Prompt Prompts Single Function: Create a python function that resizes images to all be 512X512 Bulk Transformation Generate a Python function that will take a folder that includes images of many sizes. Have it go through each image and convert it into a 512x512 image and place it in a second folder. The function takes two parameters: the input folder and the output folder. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from PIL import Image import os def resize_images ( input_folder , output_folder ): # Check if output_folder exists. If not, create it if not os . path . exists ( output_folder ): os . makedirs ( output_folder ) # List all files in the input folder for filename in os . listdir ( input_folder ): # Full file path filepath = os . path . join ( input_folder , filename ) # Check if it's a file (and not a directory) if os . path . isfile ( filepath ): try : # Open the image using Pillow with Image . open ( filepath ) as im : # Resize the image to 512x512 im_resized = im . resize (( 512 , 512 )) # Save the resized image to the output folder im_resized . save ( os . path . join ( output_folder , filename )) except Exception as e : print ( f \"Error processing { filename } : { e } \" ) print ( \"Processing completed!\" ) # Example of usage # resize_images('path_to_input_folder', 'path_to_output_folder')","title":"Sample Code"},{"location":"prompts/09-sample-code/#generating-sample-code","text":"ChatGPT is also very good at generating sample software programs for your classrooms. You can start with simple examples and then dive into more complex examples. There are two ways you can learn this process. First, is to just use the standard ChatGPT. If you have a subscription to ChatGPT Plus you can use the [Code Interpreter] to also generate and execute the code. If there is a Python library that can generate images you can also have ChatGPT Code Interpreter it generate images!","title":"Generating Sample Code"},{"location":"prompts/09-sample-code/#simple-prompt","text":"Create a Python program that prints \"Hello World!\"","title":"Simple Prompt"},{"location":"prompts/09-sample-code/#response","text":"1 print ( \"Hello World!\" )","title":"Response"},{"location":"prompts/09-sample-code/#more-complex-prompt","text":"","title":"More Complex Prompt"},{"location":"prompts/09-sample-code/#prompts","text":"Single Function: Create a python function that resizes images to all be 512X512 Bulk Transformation Generate a Python function that will take a folder that includes images of many sizes. Have it go through each image and convert it into a 512x512 image and place it in a second folder. The function takes two parameters: the input folder and the output folder.","title":"Prompts"},{"location":"prompts/09-sample-code/#response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 from PIL import Image import os def resize_images ( input_folder , output_folder ): # Check if output_folder exists. If not, create it if not os . path . exists ( output_folder ): os . makedirs ( output_folder ) # List all files in the input folder for filename in os . listdir ( input_folder ): # Full file path filepath = os . path . join ( input_folder , filename ) # Check if it's a file (and not a directory) if os . path . isfile ( filepath ): try : # Open the image using Pillow with Image . open ( filepath ) as im : # Resize the image to 512x512 im_resized = im . resize (( 512 , 512 )) # Save the resized image to the output folder im_resized . save ( os . path . join ( output_folder , filename )) except Exception as e : print ( f \"Error processing { filename } : { e } \" ) print ( \"Processing completed!\" ) # Example of usage # resize_images('path_to_input_folder', 'path_to_output_folder')","title":"Response"},{"location":"prompts/09a-turtle-graphics/","text":"Turtle Graphics We can use ChatGPT to generate turtle graphics code and then use trinket.io to execute the code. Trinket is a free kid-safe website that runs you turtle graphs programs. In these labs, we will use ChatGPT to generate Python code and then we can copy the code and paste it into Trinket to test the drawing of the code. You might want to create your own account in trinket so you can save your work. We will be using the older (free) Python (not Python 3) for our labs. With turtle graphics, we usually draw on a standard screen that is 400x400 in size and the point (0,0) is in the middle of the screen so that forward(100) will move about 1/4 the length of the screen. When we need to turn a turtle, we need to give it a command such as right(90) that tells it to take a 90-degree right turn. We need 360 degrees to make a turtle turn fully around. The sample code on this page has a small \"copy code\" icon in the upper right corner of the screen. You can use this to copy the prompts into ChatGPT and the code into Trinket. Draw a Square Draw Square Prompt We need to tell ChatGPT to use the Python turtle library. Use the Python turtle library to draw a square. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # GPT Prompt: Use the Python turtle library to draw a square. import turtle # Create a turtle object t = turtle . Turtle () # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) Watch the turtle draw on Trinket.io Challenges Can you ask ChatGPT to change the name of your turtle? Can you ask ChatGPT to use a for loop to draw the square? Can you ask ChatGPT to draw a square with a specific size and starting location? What other patterns can you draw? Can you generate a triangle, a circle, a hexagon, an octagon and a five-pointed star? We learned that just by using a few functions such as forward() and right() that we can create some cool drawings! Using a For Loop Random Squares Let's start with a simple program that draws a bunch of random squares on the screen. Random Squares Prompt #1 Use the Python turtle library to draw a set squares that are filled in with random colors. Place the squares randomly on the page. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import turtle import random # Create a turtle object t = turtle . Turtle () # Set the turtle speed t . speed ( 0 ) # Create a loop to draw the squares for i in range ( 20 ): # Set the random color to be a decimal number from 0 to 1 t . fillcolor ( random . random (), random . random (), random . random ()) # Begin filling the square t . begin_fill () # Move the turtle to a random position t . penup () t . goto ( random . randint ( - 200 , 200 ), random . randint ( - 200 , 200 )) t . pendown () # Draw the square for j in range ( 4 ): t . forward ( 50 ) t . right ( 90 ) # End filling the square t . end_fill () # Keep the window open turtle . done () Run Random Squares (black) on Trinket There are some cool things that ChatGPT just \"knows\". It knows that humans like to see about 20 items on a screen and that a reasonable size of screen is about 400x400 with (0,0) being right in the middle of the screen. This program kind of works. But all the squares are filled with black! Not very colorful. Now lets take a look at what went wrong and how we can give ChatGPT a little hint at how to create better code for us. Fixing the Prompt As a background, there are two different \"standards\" for drawing color levels. One sets the color level in a range of 0 to 1. The drawing library within Trinket uses a color range of 0 to 255. But we didn't tell ChatGPT we were using the 0 to 255 standard so the following lines: 1 2 # Set the random color t . fillcolor ( random . random (), random . random (), random . random ()) The function random.random() generates a random decimal number from 0 to 1 are not correct for Trinket. Here is the correct version: 1 2 # Set the random colors as r,g,b values that are integers from 0 to 255 t . fillcolor ( random . randint ( 0 , 255 ), random . randint ( 0 , 255 ), random . randint ( 0 , 255 )) We could manually fix this by scaling the colors by 255. But that means that we would have to also fix all the other code we generate. How can we tell ChatGPT that we need our color ranges in the range of 0 to 255? The answer is we just add one additional sentence to the prompt. \"Use a color range of 0 to 255.\" Here is the new prompt: Use the Python turtle library to draw a set squares that are filled in with random colors. Place the squares randomly on the page. Use a color range of 0 to 255. Forcing a Function The program above is nice, but it hard to read and hard to figure out where the logic of the square drawing starts and stops. What if we wanted to write a program that draws both squares and circles at random locations. The answer is to force ChatGPT to create a function that draws the squares. We will need to modify the prompt to explicitly ask ChatGPT to create a draw_square() function and tell it to use color, x and y as input parameters. Force Function Prompt Use the Python turtle library to draw a squares of different colors at random locations. Create a function called draw_square that has inputs of color, x and y. Make sure to begin the fill and end the fill and remember that colors range from 0 to 255. Force Function Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import turtle import random def draw_square ( color , x , y ): turtle . penup () turtle . goto ( x , y ) turtle . pendown () turtle . fillcolor ( color ) turtle . begin_fill () for i in range ( 4 ): turtle . forward ( 50 ) turtle . right ( 90 ) turtle . end_fill () for i in range ( 10 ): r = random . randint ( 0 , 255 ) g = random . randint ( 0 , 255 ) b = random . randint ( 0 , 255 ) x = random . randint ( - 200 , 200 ) y = random . randint ( - 200 , 200 ) draw_square (( r , g , b ), x , y ) turtle . done () Random Squares on Trinket Challenge Ask ChatGPT to create new functions for drawing triangles, circles, hexagons and stars.","title":"Turtle Graphics"},{"location":"prompts/09a-turtle-graphics/#turtle-graphics","text":"We can use ChatGPT to generate turtle graphics code and then use trinket.io to execute the code. Trinket is a free kid-safe website that runs you turtle graphs programs. In these labs, we will use ChatGPT to generate Python code and then we can copy the code and paste it into Trinket to test the drawing of the code. You might want to create your own account in trinket so you can save your work. We will be using the older (free) Python (not Python 3) for our labs. With turtle graphics, we usually draw on a standard screen that is 400x400 in size and the point (0,0) is in the middle of the screen so that forward(100) will move about 1/4 the length of the screen. When we need to turn a turtle, we need to give it a command such as right(90) that tells it to take a 90-degree right turn. We need 360 degrees to make a turtle turn fully around. The sample code on this page has a small \"copy code\" icon in the upper right corner of the screen. You can use this to copy the prompts into ChatGPT and the code into Trinket.","title":"Turtle Graphics"},{"location":"prompts/09a-turtle-graphics/#draw-a-square","text":"","title":"Draw a Square"},{"location":"prompts/09a-turtle-graphics/#draw-square-prompt","text":"We need to tell ChatGPT to use the Python turtle library. Use the Python turtle library to draw a square.","title":"Draw Square Prompt"},{"location":"prompts/09a-turtle-graphics/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # GPT Prompt: Use the Python turtle library to draw a square. import turtle # Create a turtle object t = turtle . Turtle () # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) # Move the turtle forward by 100 pixels t . forward ( 100 ) # Turn the turtle 90 degrees to the right t . right ( 90 ) Watch the turtle draw on Trinket.io Challenges Can you ask ChatGPT to change the name of your turtle? Can you ask ChatGPT to use a for loop to draw the square? Can you ask ChatGPT to draw a square with a specific size and starting location? What other patterns can you draw? Can you generate a triangle, a circle, a hexagon, an octagon and a five-pointed star? We learned that just by using a few functions such as forward() and right() that we can create some cool drawings!","title":"Response"},{"location":"prompts/09a-turtle-graphics/#using-a-for-loop","text":"","title":"Using a For Loop"},{"location":"prompts/09a-turtle-graphics/#random-squares","text":"Let's start with a simple program that draws a bunch of random squares on the screen.","title":"Random Squares"},{"location":"prompts/09a-turtle-graphics/#random-squares-prompt-1","text":"Use the Python turtle library to draw a set squares that are filled in with random colors. Place the squares randomly on the page.","title":"Random Squares Prompt #1"},{"location":"prompts/09a-turtle-graphics/#response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import turtle import random # Create a turtle object t = turtle . Turtle () # Set the turtle speed t . speed ( 0 ) # Create a loop to draw the squares for i in range ( 20 ): # Set the random color to be a decimal number from 0 to 1 t . fillcolor ( random . random (), random . random (), random . random ()) # Begin filling the square t . begin_fill () # Move the turtle to a random position t . penup () t . goto ( random . randint ( - 200 , 200 ), random . randint ( - 200 , 200 )) t . pendown () # Draw the square for j in range ( 4 ): t . forward ( 50 ) t . right ( 90 ) # End filling the square t . end_fill () # Keep the window open turtle . done () Run Random Squares (black) on Trinket There are some cool things that ChatGPT just \"knows\". It knows that humans like to see about 20 items on a screen and that a reasonable size of screen is about 400x400 with (0,0) being right in the middle of the screen. This program kind of works. But all the squares are filled with black! Not very colorful. Now lets take a look at what went wrong and how we can give ChatGPT a little hint at how to create better code for us.","title":"Response"},{"location":"prompts/09a-turtle-graphics/#fixing-the-prompt","text":"As a background, there are two different \"standards\" for drawing color levels. One sets the color level in a range of 0 to 1. The drawing library within Trinket uses a color range of 0 to 255. But we didn't tell ChatGPT we were using the 0 to 255 standard so the following lines: 1 2 # Set the random color t . fillcolor ( random . random (), random . random (), random . random ()) The function random.random() generates a random decimal number from 0 to 1 are not correct for Trinket. Here is the correct version: 1 2 # Set the random colors as r,g,b values that are integers from 0 to 255 t . fillcolor ( random . randint ( 0 , 255 ), random . randint ( 0 , 255 ), random . randint ( 0 , 255 )) We could manually fix this by scaling the colors by 255. But that means that we would have to also fix all the other code we generate. How can we tell ChatGPT that we need our color ranges in the range of 0 to 255? The answer is we just add one additional sentence to the prompt. \"Use a color range of 0 to 255.\" Here is the new prompt: Use the Python turtle library to draw a set squares that are filled in with random colors. Place the squares randomly on the page. Use a color range of 0 to 255.","title":"Fixing the Prompt"},{"location":"prompts/09a-turtle-graphics/#forcing-a-function","text":"The program above is nice, but it hard to read and hard to figure out where the logic of the square drawing starts and stops. What if we wanted to write a program that draws both squares and circles at random locations. The answer is to force ChatGPT to create a function that draws the squares. We will need to modify the prompt to explicitly ask ChatGPT to create a draw_square() function and tell it to use color, x and y as input parameters.","title":"Forcing a Function"},{"location":"prompts/09a-turtle-graphics/#force-function-prompt","text":"Use the Python turtle library to draw a squares of different colors at random locations. Create a function called draw_square that has inputs of color, x and y. Make sure to begin the fill and end the fill and remember that colors range from 0 to 255.","title":"Force Function Prompt"},{"location":"prompts/09a-turtle-graphics/#force-function-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import turtle import random def draw_square ( color , x , y ): turtle . penup () turtle . goto ( x , y ) turtle . pendown () turtle . fillcolor ( color ) turtle . begin_fill () for i in range ( 4 ): turtle . forward ( 50 ) turtle . right ( 90 ) turtle . end_fill () for i in range ( 10 ): r = random . randint ( 0 , 255 ) g = random . randint ( 0 , 255 ) b = random . randint ( 0 , 255 ) x = random . randint ( - 200 , 200 ) y = random . randint ( - 200 , 200 ) draw_square (( r , g , b ), x , y ) turtle . done () Random Squares on Trinket Challenge Ask ChatGPT to create new functions for drawing triangles, circles, hexagons and stars.","title":"Force Function Response"},{"location":"prompts/09b-rainbow-boxes/","text":"Rainbow Boxes Initial Prompt Generate a sample python program using the turtle library that will draw 7 boxes filled with the colors of the rainbow. Prompt Generate a sample python program using the turtle library that will draw 7 boxes filled with the colors of the rainbow. Start at (-200,0) and make the boxes 50 on each side. Space the boxes 55 apart. Don't bother with the setup including screen size, background color and title. Results 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import turtle # Create the turtle object and name it \"t\" t = turtle . Turtle () t . penup () t . goto ( - 200 , 0 ) # Define the colors of the rainbow colors = [ \"red\" , \"orange\" , \"yellow\" , \"green\" , \"blue\" , \"indigo\" , \"violet\" ] # Loop through the colors and draw a box for each one for i in range ( 7 ): t . fillcolor ( colors [ i ]) t . begin_fill () for j in range ( 4 ): t . forward ( 50 ) t . right ( 90 ) t . end_fill () t . penup () t . forward ( 55 ) t . pendown () # Hide the turtle cursor when done t . hideturtle () This program sets up a turtle screen with a white background and a title of \"Rainbow Boxes\". It defines a list of colors representing the colors of the rainbow, and then loops through each color, drawing a box and filling it with the corresponding color. It uses the turtle library's fillcolor, begin_fill, end_fill, penup, and pendown functions to draw the boxes, and it spaces them out using a forward movement of 30 pixels between each box. Finally, it hides the turtle cursor and waits for the user to close the window. Notes Some Python turtle libraries require screen setup like this: 1 2 3 4 # Set up the turtle screen turtle . setup ( 500 , 500 ) turtle . bgcolor ( \"white\" ) turtle . title ( \"Rainbow Boxes\" ) You can remove these lines. Rendering Link To Demo on Tinket","title":"Rainbow Boxes"},{"location":"prompts/09b-rainbow-boxes/#rainbow-boxes","text":"","title":"Rainbow Boxes"},{"location":"prompts/09b-rainbow-boxes/#initial-prompt","text":"Generate a sample python program using the turtle library that will draw 7 boxes filled with the colors of the rainbow.","title":"Initial Prompt"},{"location":"prompts/09b-rainbow-boxes/#prompt","text":"Generate a sample python program using the turtle library that will draw 7 boxes filled with the colors of the rainbow. Start at (-200,0) and make the boxes 50 on each side. Space the boxes 55 apart. Don't bother with the setup including screen size, background color and title.","title":"Prompt"},{"location":"prompts/09b-rainbow-boxes/#results","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import turtle # Create the turtle object and name it \"t\" t = turtle . Turtle () t . penup () t . goto ( - 200 , 0 ) # Define the colors of the rainbow colors = [ \"red\" , \"orange\" , \"yellow\" , \"green\" , \"blue\" , \"indigo\" , \"violet\" ] # Loop through the colors and draw a box for each one for i in range ( 7 ): t . fillcolor ( colors [ i ]) t . begin_fill () for j in range ( 4 ): t . forward ( 50 ) t . right ( 90 ) t . end_fill () t . penup () t . forward ( 55 ) t . pendown () # Hide the turtle cursor when done t . hideturtle () This program sets up a turtle screen with a white background and a title of \"Rainbow Boxes\". It defines a list of colors representing the colors of the rainbow, and then loops through each color, drawing a box and filling it with the corresponding color. It uses the turtle library's fillcolor, begin_fill, end_fill, penup, and pendown functions to draw the boxes, and it spaces them out using a forward movement of 30 pixels between each box. Finally, it hides the turtle cursor and waits for the user to close the window.","title":"Results"},{"location":"prompts/09b-rainbow-boxes/#notes","text":"Some Python turtle libraries require screen setup like this: 1 2 3 4 # Set up the turtle screen turtle . setup ( 500 , 500 ) turtle . bgcolor ( \"white\" ) turtle . title ( \"Rainbow Boxes\" ) You can remove these lines.","title":"Notes"},{"location":"prompts/09b-rainbow-boxes/#rendering","text":"Link To Demo on Tinket","title":"Rendering"},{"location":"prompts/09c-scratch-block/","text":"Scratch Lesson Plan Prompt Generate a lesson plan that teaches abstraction using a custom block in Scratch. Return the results in raw markdown format. Response Lesson Plan: Abstraction using Custom Blocks in Scratch Grade Level: 4-6 Objective: Students will learn the concept of abstraction and how to create custom blocks in Scratch to abstract repeated code. Materials: Computers with Scratch installed Scratch accounts for each student Projector or interactive whiteboard Worksheet with exercises Introduction (10 minutes): Begin by asking students if they have ever had to repeat a task over and over again. Explain that repeating the same task can be tedious and time-consuming, and that programming allows us to automate repetitive tasks. Introduce the concept of abstraction, explaining that it involves simplifying complex tasks by breaking them down into smaller, more manageable parts. Show examples of abstraction in everyday life, such as a recipe that breaks down a complex dish into a series of smaller steps. Activity 1: Creating a Custom Block (25 minutes) Open Scratch and start a new project. Explain that a custom block is a block that can be created by the user to perform a specific task. Demonstrate how to create a custom block by selecting \"Make a Block\" in the \"More Blocks\" category. Walk students through creating a custom block that draws a square with a specific size and color. Show how the custom block can be reused to create multiple squares with different sizes and colors. Activity 2: Using a Custom Block (25 minutes) Provide students with a worksheet that contains a series of tasks that involve repeating the same code multiple times. Show students how to use the custom block created in Activity 1 to abstract the repeated code. Ask students to complete the tasks on the worksheet, using the custom block to abstract the repeated code. Circulate around the classroom to provide assistance and answer questions. Conclusion (10 minutes): Recap the concept of abstraction and how it can be used to simplify complex tasks. Ask students to share their experiences with creating and using custom blocks in Scratch. Encourage students to continue exploring abstraction and custom blocks in their own projects. Assessment: Students will be assessed on their ability to create a custom block and use it to abstract repeated code in Scratch. The worksheet completed in Activity 2 will be used to assess student understanding. Extension: For students who finish early or are looking for an additional challenge, encourage them to create more complex custom blocks that can be used in other Scratch projects. They can also be asked to share their projects with the class and explain how they used abstraction to simplify their code.","title":"Scratch"},{"location":"prompts/09c-scratch-block/#scratch-lesson-plan","text":"","title":"Scratch Lesson Plan"},{"location":"prompts/09c-scratch-block/#prompt","text":"Generate a lesson plan that teaches abstraction using a custom block in Scratch. Return the results in raw markdown format.","title":"Prompt"},{"location":"prompts/09c-scratch-block/#response","text":"Lesson Plan: Abstraction using Custom Blocks in Scratch","title":"Response"},{"location":"prompts/09c-scratch-block/#grade-level-4-6","text":"","title":"Grade Level: 4-6"},{"location":"prompts/09c-scratch-block/#objective","text":"Students will learn the concept of abstraction and how to create custom blocks in Scratch to abstract repeated code.","title":"Objective:"},{"location":"prompts/09c-scratch-block/#materials","text":"Computers with Scratch installed Scratch accounts for each student Projector or interactive whiteboard Worksheet with exercises","title":"Materials:"},{"location":"prompts/09c-scratch-block/#introduction-10-minutes","text":"Begin by asking students if they have ever had to repeat a task over and over again. Explain that repeating the same task can be tedious and time-consuming, and that programming allows us to automate repetitive tasks. Introduce the concept of abstraction, explaining that it involves simplifying complex tasks by breaking them down into smaller, more manageable parts. Show examples of abstraction in everyday life, such as a recipe that breaks down a complex dish into a series of smaller steps.","title":"Introduction (10 minutes):"},{"location":"prompts/09c-scratch-block/#activity-1-creating-a-custom-block-25-minutes","text":"Open Scratch and start a new project. Explain that a custom block is a block that can be created by the user to perform a specific task. Demonstrate how to create a custom block by selecting \"Make a Block\" in the \"More Blocks\" category. Walk students through creating a custom block that draws a square with a specific size and color. Show how the custom block can be reused to create multiple squares with different sizes and colors.","title":"Activity 1: Creating a Custom Block (25 minutes)"},{"location":"prompts/09c-scratch-block/#activity-2-using-a-custom-block-25-minutes","text":"Provide students with a worksheet that contains a series of tasks that involve repeating the same code multiple times. Show students how to use the custom block created in Activity 1 to abstract the repeated code. Ask students to complete the tasks on the worksheet, using the custom block to abstract the repeated code. Circulate around the classroom to provide assistance and answer questions.","title":"Activity 2: Using a Custom Block (25 minutes)"},{"location":"prompts/09c-scratch-block/#conclusion-10-minutes","text":"Recap the concept of abstraction and how it can be used to simplify complex tasks. Ask students to share their experiences with creating and using custom blocks in Scratch. Encourage students to continue exploring abstraction and custom blocks in their own projects.","title":"Conclusion (10 minutes):"},{"location":"prompts/09c-scratch-block/#assessment","text":"Students will be assessed on their ability to create a custom block and use it to abstract repeated code in Scratch. The worksheet completed in Activity 2 will be used to assess student understanding.","title":"Assessment:"},{"location":"prompts/09c-scratch-block/#extension","text":"For students who finish early or are looking for an additional challenge, encourage them to create more complex custom blocks that can be used in other Scratch projects. They can also be asked to share their projects with the class and explain how they used abstraction to simplify their code.","title":"Extension:"},{"location":"prompts/10-html/","text":"HTML Output ChatGPT knows how to generate HTML. In this lesson, we will generate a simple button and a formatted table. Format a Button You can tell ChatGPT the colors, size and actions for buttons. Prompt Create an HTML element for a large dark green button with the label \"Press Me\". Make the border of the button black. Make the text white. When clicked the button should take you to the site http://example.com Response 1 2 3 4 5 6 <a href=\"http://example.com\" style=\"background-color: darkgreen; border:2px solid black; padding: 10px 20px; color: #FFFFFF; font-size: 16px; font-weight: bold;\">Press Me</a> Press Me HTML Table Formatting Prompt Create an HTML table with three columns: 1. Full name of a state in the US 2. State abbreviation code 3. State population Make the table head be white text on a blue background. Make the row be alternating white and light gray. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <table style=\"background-color: blue; color: white;\"> <thead> <tr> <th>Full Name of State</th> <th>State Abbreviation Code</th> <th>State Population</th> </tr> </thead> <tbody> <tr style=\"background-color: white; color: black;\"> <td>California</td> <td>CA</td> <td>39.5 million</td> </tr> <tr style=\"background-color: lightgray; color: black;\"> <td>Texas</td> <td>TX</td> <td>28.7 million</td> </tr> <tr style=\"background-color: white; color: black;\"> <td>Florida</td> <td>FL</td> <td>21.3 million</td> </tr> </tbody> </table> Full Name of State State Abbreviation Code State Population California CA 39.5 million Texas TX 28.7 million Florida FL 21.3 million HTML Definition Lists Prompt What are the most common HTML elements used by 7th grade students? List the elements and how they are used in an HTML definition list. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <dl> <dt>Heading</dt> <dd>Used to define the title of a document or section.</dd> <dt>Paragraph</dt> <dd>Used to define a section of text.</dd> <dt>Hyperlink</dt> <dd>Used to link to other webpages or documents.</dd> <dt>Image</dt> <dd>Used to add an image to a webpage.</dd> <dt>List</dt> <dd>Used to create a list of items.</dd> <dt>Table</dt> <dd>Used to create a data table.</dd> <dt>Form</dt> <dd>Used to create an interactive form for collecting user data.</dd> </dl> Heading Used to define the title of a document or section. Paragraph Used to define a section of text. Hyperlink Used to link to other webpages or documents. Image Used to add an image to a webpage. List Used to create a list of items. Table Used to create a data table. Form Used to create an interactive form for collecting user data. HTML Form Prompt Create an HTML form for gathering background information for students. Include questions about their name, birthday, their favorite color and what they did over summer vacation. When the form is complete have them press a \"Save\" button that will send the form data to http://example.com/myschool/mydatabase Response Name: Birthday: Favorite Color: What did you do over summer vacation? Radio Button Create an HTML form for gathering information about a favorite color. Make the form have a radio button with the options red, orange, yellow, green, blue, purple or other. If they select other, add a text field for them to put the name of the color in. Response 1 2 3 4 5 6 7 8 9 10 11 <form> <label><b>What is your favorite color?</b></label><br> <input type=\"radio\" name=\"fav_color\" value=\"red\" >Red<br> <input type=\"radio\" name=\"fav_color\" value=\"orange\" >Orange<br> <input type=\"radio\" name=\"fav_color\" value=\"yellow\" >Yellow<br> <input type=\"radio\" name=\"fav_color\" value=\"green\" >Green<br> <input type=\"radio\" name=\"fav_color\" value=\"blue\" >Blue<br> <input type=\"radio\" name=\"fav_color\" value=\"purple\" >Purple<br> <input type=\"radio\" name=\"fav_color\" value=\"other\" >Other: <input type=\"text\" name=\"other_fav_color\"> </form> What is your favorite color? Red Orange Yellow Green Blue Purple Other:","title":"HTML"},{"location":"prompts/10-html/#html-output","text":"ChatGPT knows how to generate HTML. In this lesson, we will generate a simple button and a formatted table.","title":"HTML Output"},{"location":"prompts/10-html/#format-a-button","text":"You can tell ChatGPT the colors, size and actions for buttons.","title":"Format a Button"},{"location":"prompts/10-html/#prompt","text":"Create an HTML element for a large dark green button with the label \"Press Me\". Make the border of the button black. Make the text white. When clicked the button should take you to the site http://example.com","title":"Prompt"},{"location":"prompts/10-html/#response","text":"1 2 3 4 5 6 <a href=\"http://example.com\" style=\"background-color: darkgreen; border:2px solid black; padding: 10px 20px; color: #FFFFFF; font-size: 16px; font-weight: bold;\">Press Me</a> Press Me","title":"Response"},{"location":"prompts/10-html/#html-table-formatting","text":"","title":"HTML Table Formatting"},{"location":"prompts/10-html/#prompt_1","text":"Create an HTML table with three columns: 1. Full name of a state in the US 2. State abbreviation code 3. State population Make the table head be white text on a blue background. Make the row be alternating white and light gray.","title":"Prompt"},{"location":"prompts/10-html/#response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 <table style=\"background-color: blue; color: white;\"> <thead> <tr> <th>Full Name of State</th> <th>State Abbreviation Code</th> <th>State Population</th> </tr> </thead> <tbody> <tr style=\"background-color: white; color: black;\"> <td>California</td> <td>CA</td> <td>39.5 million</td> </tr> <tr style=\"background-color: lightgray; color: black;\"> <td>Texas</td> <td>TX</td> <td>28.7 million</td> </tr> <tr style=\"background-color: white; color: black;\"> <td>Florida</td> <td>FL</td> <td>21.3 million</td> </tr> </tbody> </table> Full Name of State State Abbreviation Code State Population California CA 39.5 million Texas TX 28.7 million Florida FL 21.3 million","title":"Response"},{"location":"prompts/10-html/#html-definition-lists","text":"","title":"HTML Definition Lists"},{"location":"prompts/10-html/#prompt_2","text":"What are the most common HTML elements used by 7th grade students? List the elements and how they are used in an HTML definition list.","title":"Prompt"},{"location":"prompts/10-html/#response_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 <dl> <dt>Heading</dt> <dd>Used to define the title of a document or section.</dd> <dt>Paragraph</dt> <dd>Used to define a section of text.</dd> <dt>Hyperlink</dt> <dd>Used to link to other webpages or documents.</dd> <dt>Image</dt> <dd>Used to add an image to a webpage.</dd> <dt>List</dt> <dd>Used to create a list of items.</dd> <dt>Table</dt> <dd>Used to create a data table.</dd> <dt>Form</dt> <dd>Used to create an interactive form for collecting user data.</dd> </dl> Heading Used to define the title of a document or section. Paragraph Used to define a section of text. Hyperlink Used to link to other webpages or documents. Image Used to add an image to a webpage. List Used to create a list of items. Table Used to create a data table. Form Used to create an interactive form for collecting user data.","title":"Response"},{"location":"prompts/10-html/#html-form","text":"","title":"HTML Form"},{"location":"prompts/10-html/#prompt_3","text":"Create an HTML form for gathering background information for students. Include questions about their name, birthday, their favorite color and what they did over summer vacation. When the form is complete have them press a \"Save\" button that will send the form data to http://example.com/myschool/mydatabase","title":"Prompt"},{"location":"prompts/10-html/#response_3","text":"Name: Birthday: Favorite Color: What did you do over summer vacation?","title":"Response"},{"location":"prompts/10-html/#radio-button","text":"Create an HTML form for gathering information about a favorite color. Make the form have a radio button with the options red, orange, yellow, green, blue, purple or other. If they select other, add a text field for them to put the name of the color in.","title":"Radio Button"},{"location":"prompts/10-html/#response_4","text":"1 2 3 4 5 6 7 8 9 10 11 <form> <label><b>What is your favorite color?</b></label><br> <input type=\"radio\" name=\"fav_color\" value=\"red\" >Red<br> <input type=\"radio\" name=\"fav_color\" value=\"orange\" >Orange<br> <input type=\"radio\" name=\"fav_color\" value=\"yellow\" >Yellow<br> <input type=\"radio\" name=\"fav_color\" value=\"green\" >Green<br> <input type=\"radio\" name=\"fav_color\" value=\"blue\" >Blue<br> <input type=\"radio\" name=\"fav_color\" value=\"purple\" >Purple<br> <input type=\"radio\" name=\"fav_color\" value=\"other\" >Other: <input type=\"text\" name=\"other_fav_color\"> </form> What is your favorite color? Red Orange Yellow Green Blue Purple Other:","title":"Response"},{"location":"prompts/10-slope-and-intercept/","text":"Slope and Intercept ChatGPT can be used to create interactive \"hands-on\" demos. In this lesson we will generate a program that will interactivly draw a line but allow the students to change the slope of the line. Prompt for Slope Create an HTML page that allows students to change the slope of a line. Add an input range control slider that goes from -2 to 2 and controls a JavaScript variable called \"slope\". When the slider moves, update the slope of a line. Use a 400x400 SVG Grid. Place the origin in the lower left corner. Response for Slope Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Line Slope </ title > < script > var slope = 1 ; // initial value of slope function updateSlope ( value ) { slope = value ; drawLine (); } function drawLine () { var svg = document . getElementById ( \"grid\" ); var x1 = 0 ; var y1 = 400 ; var x2 = 400 ; var y2 = 400 - slope * 400 ; svg . innerHTML = '<line x1=\"' + x1 + '\" y1=\"' + y1 + '\" x2=\"' + x2 + '\" y2=\"' + y2 + '\" stroke=\"black\" stroke-width=\"2\"/>' ; } </ script > </ head > < body > < h1 > Line Slope </ h1 > < input type = \"range\" min = \"-2\" max = \"2\" value = \"1\" step = \"0.1\" oninput = \"updateSlope(this.value);\" > < svg id = \"grid\" width = \"400\" height = \"400\" > < line x1 = \"0\" y1 = \"0\" x2 = \"0\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"0\" y1 = \"400\" x2 = \"400\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"0\" y1 = \"0\" x2 = \"400\" y2 = \"0\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"400\" y1 = \"0\" x2 = \"400\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> </ svg > </ body > </ html > Explanation The following explanation was generated by ChatGPT: This code defines a JavaScript variable called \"slope\" and two functions: \"updateSlope\" and \"drawLine\". The \"updateSlope\" function is called whenever the value of the input range control slider changes. It updates the value of \"slope\" and calls the \"drawLine\" function to redraw the line with the new slope. The \"drawLine\" function calculates the endpoints of the line based on the current value of \"slope\" and updates the SVG element with a new \"line\" element using the \"innerHTML\" property. The HTML code includes an input range control slider, an SVG element with a 400x400 grid, and four \"line\" elements to draw the grid. The origin is in the lower left corner, which means that the y-axis goes up and the x-axis goes to the right. Here is what the user interface looks like: You can run the demo by clicking on the link below: Run the Slope Demo Advanced Version Although generating a high-quality interactive app with over 50 lines is beyond the scope of what ChatGPT can do today, you can break the program down into components and then assemble the components together. For example I wrote a prompt to display the grid lines on a 400x400 grid and another to display the slope and intercept values on the grid. Here is a more detailed demo of this. Slope and Intercept Demo","title":"Slope and Intercept"},{"location":"prompts/10-slope-and-intercept/#slope-and-intercept","text":"ChatGPT can be used to create interactive \"hands-on\" demos. In this lesson we will generate a program that will interactivly draw a line but allow the students to change the slope of the line.","title":"Slope and Intercept"},{"location":"prompts/10-slope-and-intercept/#prompt-for-slope","text":"Create an HTML page that allows students to change the slope of a line. Add an input range control slider that goes from -2 to 2 and controls a JavaScript variable called \"slope\". When the slider moves, update the slope of a line. Use a 400x400 SVG Grid. Place the origin in the lower left corner.","title":"Prompt for Slope"},{"location":"prompts/10-slope-and-intercept/#response-for-slope","text":"","title":"Response for Slope"},{"location":"prompts/10-slope-and-intercept/#code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Line Slope </ title > < script > var slope = 1 ; // initial value of slope function updateSlope ( value ) { slope = value ; drawLine (); } function drawLine () { var svg = document . getElementById ( \"grid\" ); var x1 = 0 ; var y1 = 400 ; var x2 = 400 ; var y2 = 400 - slope * 400 ; svg . innerHTML = '<line x1=\"' + x1 + '\" y1=\"' + y1 + '\" x2=\"' + x2 + '\" y2=\"' + y2 + '\" stroke=\"black\" stroke-width=\"2\"/>' ; } </ script > </ head > < body > < h1 > Line Slope </ h1 > < input type = \"range\" min = \"-2\" max = \"2\" value = \"1\" step = \"0.1\" oninput = \"updateSlope(this.value);\" > < svg id = \"grid\" width = \"400\" height = \"400\" > < line x1 = \"0\" y1 = \"0\" x2 = \"0\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"0\" y1 = \"400\" x2 = \"400\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"0\" y1 = \"0\" x2 = \"400\" y2 = \"0\" stroke = \"gray\" stroke-width = \"1\" /> < line x1 = \"400\" y1 = \"0\" x2 = \"400\" y2 = \"400\" stroke = \"gray\" stroke-width = \"1\" /> </ svg > </ body > </ html >","title":"Code"},{"location":"prompts/10-slope-and-intercept/#explanation","text":"The following explanation was generated by ChatGPT: This code defines a JavaScript variable called \"slope\" and two functions: \"updateSlope\" and \"drawLine\". The \"updateSlope\" function is called whenever the value of the input range control slider changes. It updates the value of \"slope\" and calls the \"drawLine\" function to redraw the line with the new slope. The \"drawLine\" function calculates the endpoints of the line based on the current value of \"slope\" and updates the SVG element with a new \"line\" element using the \"innerHTML\" property. The HTML code includes an input range control slider, an SVG element with a 400x400 grid, and four \"line\" elements to draw the grid. The origin is in the lower left corner, which means that the y-axis goes up and the x-axis goes to the right. Here is what the user interface looks like: You can run the demo by clicking on the link below: Run the Slope Demo","title":"Explanation"},{"location":"prompts/10-slope-and-intercept/#advanced-version","text":"Although generating a high-quality interactive app with over 50 lines is beyond the scope of what ChatGPT can do today, you can break the program down into components and then assemble the components together. For example I wrote a prompt to display the grid lines on a 400x400 grid and another to display the slope and intercept values on the grid. Here is a more detailed demo of this. Slope and Intercept Demo","title":"Advanced Version"},{"location":"prompts/11-svg/","text":"Generating SVG Simple Drawing Prompt Generate the SVG code for a red circle within a blue square. Result 1 2 3 4 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"> <rect width=\"100\" height=\"100\" style=\"fill:blue;\" /> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg> Row Of Colored Circles Create an SVG drawing. First draw a black rectangle background 400px wide. Then draw seven circles in a horizontal row with the colors red, orange, yellow, green, blue, indigo and violet 1 2 3 4 5 6 7 8 9 10 <svg width=\"400\" height=\"100\"> <rect x=\"0\" y=\"0\" width=\"400\" height=\"100\" fill=\"black\" /> <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"red\" /> <circle cx=\"100\" cy=\"50\" r=\"20\" fill=\"orange\" /> <circle cx=\"150\" cy=\"50\" r=\"20\" fill=\"yellow\" /> <circle cx=\"200\" cy=\"50\" r=\"20\" fill=\"green\" /> <circle cx=\"250\" cy=\"50\" r=\"20\" fill=\"blue\" /> <circle cx=\"300\" cy=\"50\" r=\"20\" fill=\"indigo\" /> <circle cx=\"350\" cy=\"50\" r=\"20\" fill=\"violet\" /> </svg> Blink Circles Write Javascript to make the colors in the SVG circles blink black and white every second. 1 2 3 4 5 6 7 8 9 10 < svg width = \"400\" height = \"100\" > < rect x = \"0\" y = \"0\" width = \"400\" height = \"100\" fill = \"black\" /> < circle cx = \"50\" cy = \"50\" r = \"20\" fill = \"red\" /> < circle cx = \"100\" cy = \"50\" r = \"20\" fill = \"orange\" /> < circle cx = \"150\" cy = \"50\" r = \"20\" fill = \"yellow\" /> < circle cx = \"200\" cy = \"50\" r = \"20\" fill = \"green\" /> < circle cx = \"250\" cy = \"50\" r = \"20\" fill = \"blue\" /> < circle cx = \"300\" cy = \"50\" r = \"20\" fill = \"indigo\" /> < circle cx = \"350\" cy = \"50\" r = \"20\" fill = \"violet\" /> </ svg > Response 1 2 3 4 5 6 7 8 9 10 11 let svgCircles = document.querySelectorAll(\"circle\"); setInterval(() => { svgCircles.forEach(circle => { if (circle.getAttribute('fill') === 'white') { circle.setAttribute('fill', 'black'); } else { circle.setAttribute('fill', 'white'); } }); }, 1000); Plotting Create a SVG drawing width=400 and height=400 Draw 10 points in the X-Y plot. Make all the points fall within 10 random pixels of the line y = 4x + 20 Draw a blue least-squares fit line on the plot. Icons with a Heart Heart Icon Prompt Generate a SVG icon with a size of 64X64. Draw a red heart on a light blue background. Response 1 2 3 4 < svg width = \"64\" height = \"64\" viewBox = \"0 0 64 64\" xmlns = \"http://www.w3.org/2000/svg\" > < rect x = \"0\" y = \"0\" width = \"64\" height = \"64\" fill = \"#add8e6\" /> < path d = \"M32,48 C13.4,48 0,34.6 0,16 C0,7.2 7.2,0 16,0 C24.8,0 32,7.2 32,16 C32,34.6 18.6,48 32,48 Z M32,24 C25.5,24 20,28.5 20,35 C20,41.5 25.5,46 32,46 C38.5,46 44,41.5 44,35 C44,28.5 38.5,24 32,24 Z\" fill = \"#ff0000\" /> </ svg >","title":"SVG"},{"location":"prompts/11-svg/#generating-svg","text":"","title":"Generating SVG"},{"location":"prompts/11-svg/#simple-drawing","text":"","title":"Simple Drawing"},{"location":"prompts/11-svg/#prompt","text":"Generate the SVG code for a red circle within a blue square.","title":"Prompt"},{"location":"prompts/11-svg/#result","text":"1 2 3 4 <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"> <rect width=\"100\" height=\"100\" style=\"fill:blue;\" /> <circle cx=\"50\" cy=\"50\" r=\"40\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /> </svg>","title":"Result"},{"location":"prompts/11-svg/#row-of-colored-circles","text":"Create an SVG drawing. First draw a black rectangle background 400px wide. Then draw seven circles in a horizontal row with the colors red, orange, yellow, green, blue, indigo and violet 1 2 3 4 5 6 7 8 9 10 <svg width=\"400\" height=\"100\"> <rect x=\"0\" y=\"0\" width=\"400\" height=\"100\" fill=\"black\" /> <circle cx=\"50\" cy=\"50\" r=\"20\" fill=\"red\" /> <circle cx=\"100\" cy=\"50\" r=\"20\" fill=\"orange\" /> <circle cx=\"150\" cy=\"50\" r=\"20\" fill=\"yellow\" /> <circle cx=\"200\" cy=\"50\" r=\"20\" fill=\"green\" /> <circle cx=\"250\" cy=\"50\" r=\"20\" fill=\"blue\" /> <circle cx=\"300\" cy=\"50\" r=\"20\" fill=\"indigo\" /> <circle cx=\"350\" cy=\"50\" r=\"20\" fill=\"violet\" /> </svg>","title":"Row Of Colored Circles"},{"location":"prompts/11-svg/#blink-circles","text":"Write Javascript to make the colors in the SVG circles blink black and white every second. 1 2 3 4 5 6 7 8 9 10 < svg width = \"400\" height = \"100\" > < rect x = \"0\" y = \"0\" width = \"400\" height = \"100\" fill = \"black\" /> < circle cx = \"50\" cy = \"50\" r = \"20\" fill = \"red\" /> < circle cx = \"100\" cy = \"50\" r = \"20\" fill = \"orange\" /> < circle cx = \"150\" cy = \"50\" r = \"20\" fill = \"yellow\" /> < circle cx = \"200\" cy = \"50\" r = \"20\" fill = \"green\" /> < circle cx = \"250\" cy = \"50\" r = \"20\" fill = \"blue\" /> < circle cx = \"300\" cy = \"50\" r = \"20\" fill = \"indigo\" /> < circle cx = \"350\" cy = \"50\" r = \"20\" fill = \"violet\" /> </ svg >","title":"Blink Circles"},{"location":"prompts/11-svg/#response","text":"1 2 3 4 5 6 7 8 9 10 11 let svgCircles = document.querySelectorAll(\"circle\"); setInterval(() => { svgCircles.forEach(circle => { if (circle.getAttribute('fill') === 'white') { circle.setAttribute('fill', 'black'); } else { circle.setAttribute('fill', 'white'); } }); }, 1000);","title":"Response"},{"location":"prompts/11-svg/#plotting","text":"Create a SVG drawing width=400 and height=400 Draw 10 points in the X-Y plot. Make all the points fall within 10 random pixels of the line y = 4x + 20 Draw a blue least-squares fit line on the plot.","title":"Plotting"},{"location":"prompts/11-svg/#icons-with-a-heart","text":"","title":"Icons with a Heart"},{"location":"prompts/11-svg/#heart-icon-prompt","text":"Generate a SVG icon with a size of 64X64. Draw a red heart on a light blue background.","title":"Heart Icon Prompt"},{"location":"prompts/11-svg/#response_1","text":"1 2 3 4 < svg width = \"64\" height = \"64\" viewBox = \"0 0 64 64\" xmlns = \"http://www.w3.org/2000/svg\" > < rect x = \"0\" y = \"0\" width = \"64\" height = \"64\" fill = \"#add8e6\" /> < path d = \"M32,48 C13.4,48 0,34.6 0,16 C0,7.2 7.2,0 16,0 C24.8,0 32,7.2 32,16 C32,34.6 18.6,48 32,48 Z M32,24 C25.5,24 20,28.5 20,35 C20,41.5 25.5,46 32,46 C38.5,46 44,41.5 44,35 C44,28.5 38.5,24 32,24 Z\" fill = \"#ff0000\" /> </ svg >","title":"Response"},{"location":"prompts/12-debugging/","text":"Debugging You can give GPT a sample program and ask it to find the bugs or change the output. Prompt Find the bug and fix it in this program: # Create a Python program to draw a plot of the function y = 3 * x * x + 4 * x - 5 import matplotlib.pyplot as plt x = range(-10, 11) y = (21,) for i in x: y = [3*i*i + 4*i - 5] plt.plot(x, y) plt.title('y = 3x^2 + 4x - 5') plt.xlabel('x') plt.ylabel('y') plt.show() Response 1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt x = range ( - 10 , 11 ) y = [] for i in x : y . append ( 3 * i * i + 4 * i - 5 ) plt . plot ( x , y ) plt . title ( 'y = 3x^2 + 4x - 5' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ()","title":"Debugging"},{"location":"prompts/12-debugging/#debugging","text":"You can give GPT a sample program and ask it to find the bugs or change the output.","title":"Debugging"},{"location":"prompts/12-debugging/#prompt","text":"Find the bug and fix it in this program: # Create a Python program to draw a plot of the function y = 3 * x * x + 4 * x - 5 import matplotlib.pyplot as plt x = range(-10, 11) y = (21,) for i in x: y = [3*i*i + 4*i - 5] plt.plot(x, y) plt.title('y = 3x^2 + 4x - 5') plt.xlabel('x') plt.ylabel('y') plt.show()","title":"Prompt"},{"location":"prompts/12-debugging/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 import matplotlib.pyplot as plt x = range ( - 10 , 11 ) y = [] for i in x : y . append ( 3 * i * i + 4 * i - 5 ) plt . plot ( x , y ) plt . title ( 'y = 3x^2 + 4x - 5' ) plt . xlabel ( 'x' ) plt . ylabel ( 'y' ) plt . show ()","title":"Response"},{"location":"prompts/13-charts/","text":"Charts You can give GPT a set of points and have it generate the Python code to plot the points. Vertical Bar Chart Vertical Bar Chart Prompt Create a Python plotly program to draw a vertical bar chart showing the area of all the continents. Vertical Bar Chart Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import plotly.graph_objects as go import numpy as np # Data labels = [ 'Africa' , 'Antarctica' , 'Asia' , 'Australia' , 'Europe' , 'North America' , 'South America' ] values = [ 30.37 , 14.2 , 44.6 , 8.5 , 10.2 , 24.2 , 17.8 ] # Create figure fig = go . Figure ( data = [ go . Bar ( x = labels , y = values , text = values , textposition = 'auto' , marker_color = '#FFA500' )]) # Change the bar mode fig . update_layout ( barmode = 'stack' ) # Add title fig . update_layout ( title_text = 'Area of Continents' ) # Show figure fig . show () Note the area is millions of square kilometers. Challenge Add a sentence to your prompt indicating that the data is in millions of square kilometers. Drawing a Sine Wave Drawing a Sine Wave Prompt Create a Python program to draw a sine wave using Plotly. Drawing a Sine Wave Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import plotly.graph_objects as go import numpy as np # Generate data x = np . linspace ( 0 , 10 , 1000 ) y = np . sin ( x ) # Create figure fig = go . Figure () # Add trace fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines' , name = 'sin(x)' )) # Set title fig . update_layout ( title_text = 'Sine Wave' ) # Show figure fig . show () Challenge Modify the prompt to create a cosine Modify the prompt to create a sine wave with double the frequency Can you plot both a sine and cosine together? Can you plot the summation of sine functions with a different frequency? Plot a Polynomial Plot a Polynomial Prompt We can also use ChatGPT to create plots of complex non-linear functions. To do this we need to use a notation for exponents that uses the up arrow character \"^\". Create a Python program to draw a plot of the function y =2x^2 - 20x + 50 from x=0 to 13 using plotly Response 1 2 3 4 5 6 7 8 9 10 11 12 import plotly.graph_objects as go x = list ( range ( 0 , 13 )) y = [] for i in x : y . append ( 2 * i * i - 20 * i + 50 ) print ( y ) fig = go . Figure () fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines+markers' )) fig . update_layout ( title = 'y = 2x^2 - 20x + 50' , xaxis_title = 'x' , yaxis_title = 'y' ) fig . show () Challenge Change the function that you want to plot to another Polynomial. Add multiple polynomial functions. Least Squares Plot One of the key charts we want to create is a scatter plot that shows a correlation between two variables. We will explore this in a future lesson.","title":"Charts and Plotting"},{"location":"prompts/13-charts/#charts","text":"You can give GPT a set of points and have it generate the Python code to plot the points.","title":"Charts"},{"location":"prompts/13-charts/#vertical-bar-chart","text":"","title":"Vertical Bar Chart"},{"location":"prompts/13-charts/#vertical-bar-chart-prompt","text":"Create a Python plotly program to draw a vertical bar chart showing the area of all the continents.","title":"Vertical Bar Chart Prompt"},{"location":"prompts/13-charts/#vertical-bar-chart-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 import plotly.graph_objects as go import numpy as np # Data labels = [ 'Africa' , 'Antarctica' , 'Asia' , 'Australia' , 'Europe' , 'North America' , 'South America' ] values = [ 30.37 , 14.2 , 44.6 , 8.5 , 10.2 , 24.2 , 17.8 ] # Create figure fig = go . Figure ( data = [ go . Bar ( x = labels , y = values , text = values , textposition = 'auto' , marker_color = '#FFA500' )]) # Change the bar mode fig . update_layout ( barmode = 'stack' ) # Add title fig . update_layout ( title_text = 'Area of Continents' ) # Show figure fig . show () Note the area is millions of square kilometers. Challenge Add a sentence to your prompt indicating that the data is in millions of square kilometers.","title":"Vertical Bar Chart Response"},{"location":"prompts/13-charts/#drawing-a-sine-wave","text":"","title":"Drawing a Sine Wave"},{"location":"prompts/13-charts/#drawing-a-sine-wave-prompt","text":"Create a Python program to draw a sine wave using Plotly.","title":"Drawing a Sine Wave Prompt"},{"location":"prompts/13-charts/#drawing-a-sine-wave-response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import plotly.graph_objects as go import numpy as np # Generate data x = np . linspace ( 0 , 10 , 1000 ) y = np . sin ( x ) # Create figure fig = go . Figure () # Add trace fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines' , name = 'sin(x)' )) # Set title fig . update_layout ( title_text = 'Sine Wave' ) # Show figure fig . show () Challenge Modify the prompt to create a cosine Modify the prompt to create a sine wave with double the frequency Can you plot both a sine and cosine together? Can you plot the summation of sine functions with a different frequency?","title":"Drawing a Sine Wave Response"},{"location":"prompts/13-charts/#plot-a-polynomial","text":"","title":"Plot a Polynomial"},{"location":"prompts/13-charts/#plot-a-polynomial-prompt","text":"We can also use ChatGPT to create plots of complex non-linear functions. To do this we need to use a notation for exponents that uses the up arrow character \"^\". Create a Python program to draw a plot of the function y =2x^2 - 20x + 50 from x=0 to 13 using plotly","title":"Plot a Polynomial Prompt"},{"location":"prompts/13-charts/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 import plotly.graph_objects as go x = list ( range ( 0 , 13 )) y = [] for i in x : y . append ( 2 * i * i - 20 * i + 50 ) print ( y ) fig = go . Figure () fig . add_trace ( go . Scatter ( x = x , y = y , mode = 'lines+markers' )) fig . update_layout ( title = 'y = 2x^2 - 20x + 50' , xaxis_title = 'x' , yaxis_title = 'y' ) fig . show () Challenge Change the function that you want to plot to another Polynomial. Add multiple polynomial functions.","title":"Response"},{"location":"prompts/13-charts/#least-squares-plot","text":"One of the key charts we want to create is a scatter plot that shows a correlation between two variables. We will explore this in a future lesson.","title":"Least Squares Plot"},{"location":"prompts/14-tables/","text":"Table Summarization If you have some narrative text with facts in that text, you can use ChatGPT to create a table out of facts in the narrative text. Note that the first line of the Markdown table format is included in the prompt. Sample Prompt Create a markdown table summarizing the fruits from Goocrux: There are many fruits that were found on the recently discovered planet Goocrux. There are neoskizzles that grow there, which are purple and taste like candy. There are also loheckles, which are a grayish blue fruit and are very tart, a little bit like a lemon. Pounits are a bright green color and are more savory than sweet. There are also plenty of loopnovas which are a neon pink flavor and taste like cotton candy. Finally, there are fruits called glowls, which have a very sour and bitter taste which is acidic and caustic, and a pale orange tinge to them. | Fruit | Color | Flavor | Sample response 1 2 3 4 5 | Neoskizzles | Purple | Candy | | Loheckles | Grayish Blue | Tart, like a lemon | | Pounits | Bright Green | Savory | | Loopnovas | Neon Pink | Cotton Candy | | Glowls | Pale Orange | Sour and Bitter, Acidic and Caustic | Here is that sample format rendered in HTML tables using the mkdocs converter: Fruit Color Flavor Neoskizzles Purple Candy Loheckles Grayish Blue Tart, like a lemon Pounits Bright Green Savory Loopnovas Neon Pink Cotton Candy Glowls Pale Orange Sour and Bitter, Acidic and Caustic Tables with Data You can also ask ChatGPT to create tables with data in them. Prompt Create a markdown table with three columns. In the first column, put the name of the countries in north and south america. In the second column, put the average life expectancy. In the third column, put the average annual cost of healthcare. Response Country Average Life Expectancy Average Annual Cost of Healthcare USA 78.9 years $10,348 Canada 82.2 years $4,826 Mexico 75.9 years $1,845 Brazil 75.2 years $1,845 Chile 79.7 years $2,845 Peru 74.9 years $1,845 Argentina 76.7 years $2,845 Colombia 73.7 years $1,845 Venezuela 73.7 years $1,845 Costa Rica 79.2 years $2,845 Data Conversion Prompt: Convert the following into a Pandas dataframe 1 2 3 4 5 6 7 8 9 10 11 12 import pandas as pd # Create a dictionary containing the data data = { 'Country' : [ 'USA' , 'Canada' , 'Mexico' , 'Brazil' , 'Chile' , 'Peru' , 'Argentina' , 'Colombia' , 'Venezuela' , 'Costa Rica' ], 'Life Expectancy' : [ 78.9 , 82.2 , 75.9 , 75.2 , 79.7 , 74.9 , 76.7 , 73.7 , 73.7 , 79.2 ], 'Healthcare Cost' : [ 10348 , 4826 , 1845 , 1845 , 2845 , 1845 , 2845 , 1845 , 1845 , 2845 ]} # Create a DataFrame from the dictionary df = pd . DataFrame ( data ) # Print the DataFrame print ( df )","title":"Tables"},{"location":"prompts/14-tables/#table-summarization","text":"If you have some narrative text with facts in that text, you can use ChatGPT to create a table out of facts in the narrative text. Note that the first line of the Markdown table format is included in the prompt.","title":"Table Summarization"},{"location":"prompts/14-tables/#sample-prompt","text":"Create a markdown table summarizing the fruits from Goocrux: There are many fruits that were found on the recently discovered planet Goocrux. There are neoskizzles that grow there, which are purple and taste like candy. There are also loheckles, which are a grayish blue fruit and are very tart, a little bit like a lemon. Pounits are a bright green color and are more savory than sweet. There are also plenty of loopnovas which are a neon pink flavor and taste like cotton candy. Finally, there are fruits called glowls, which have a very sour and bitter taste which is acidic and caustic, and a pale orange tinge to them. | Fruit | Color | Flavor |","title":"Sample Prompt"},{"location":"prompts/14-tables/#sample-response","text":"1 2 3 4 5 | Neoskizzles | Purple | Candy | | Loheckles | Grayish Blue | Tart, like a lemon | | Pounits | Bright Green | Savory | | Loopnovas | Neon Pink | Cotton Candy | | Glowls | Pale Orange | Sour and Bitter, Acidic and Caustic | Here is that sample format rendered in HTML tables using the mkdocs converter: Fruit Color Flavor Neoskizzles Purple Candy Loheckles Grayish Blue Tart, like a lemon Pounits Bright Green Savory Loopnovas Neon Pink Cotton Candy Glowls Pale Orange Sour and Bitter, Acidic and Caustic","title":"Sample response"},{"location":"prompts/14-tables/#tables-with-data","text":"You can also ask ChatGPT to create tables with data in them.","title":"Tables with Data"},{"location":"prompts/14-tables/#prompt","text":"Create a markdown table with three columns. In the first column, put the name of the countries in north and south america. In the second column, put the average life expectancy. In the third column, put the average annual cost of healthcare.","title":"Prompt"},{"location":"prompts/14-tables/#response","text":"Country Average Life Expectancy Average Annual Cost of Healthcare USA 78.9 years $10,348 Canada 82.2 years $4,826 Mexico 75.9 years $1,845 Brazil 75.2 years $1,845 Chile 79.7 years $2,845 Peru 74.9 years $1,845 Argentina 76.7 years $2,845 Colombia 73.7 years $1,845 Venezuela 73.7 years $1,845 Costa Rica 79.2 years $2,845","title":"Response"},{"location":"prompts/14-tables/#data-conversion","text":"Prompt: Convert the following into a Pandas dataframe 1 2 3 4 5 6 7 8 9 10 11 12 import pandas as pd # Create a dictionary containing the data data = { 'Country' : [ 'USA' , 'Canada' , 'Mexico' , 'Brazil' , 'Chile' , 'Peru' , 'Argentina' , 'Colombia' , 'Venezuela' , 'Costa Rica' ], 'Life Expectancy' : [ 78.9 , 82.2 , 75.9 , 75.2 , 79.7 , 74.9 , 76.7 , 73.7 , 73.7 , 79.2 ], 'Healthcare Cost' : [ 10348 , 4826 , 1845 , 1845 , 2845 , 1845 , 2845 , 1845 , 1845 , 2845 ]} # Create a DataFrame from the dictionary df = pd . DataFrame ( data ) # Print the DataFrame print ( df )","title":"Data Conversion"},{"location":"prompts/15-micropython/","text":"MicroPython Prompt create a micropython program to blink an LED every half second. Response ```python import time from machine import Pin led = Pin(2, Pin.OUT) while True: led.value(not led.value()) time.sleep(0.5) ````","title":"MicroPython"},{"location":"prompts/15-micropython/#micropython","text":"","title":"MicroPython"},{"location":"prompts/15-micropython/#prompt","text":"create a micropython program to blink an LED every half second.","title":"Prompt"},{"location":"prompts/15-micropython/#response","text":"```python import time from machine import Pin led = Pin(2, Pin.OUT) while True: led.value(not led.value()) time.sleep(0.5) ````","title":"Response"},{"location":"prompts/16-quiz/","text":"Generating Quiz Open Answer Prompt Generate a set of questions about the use of Python dataframes for a high school progamming course. Response 1. What is a Python dataframe? 2. How do you create a dataframe in Python? 3. What are the advantages of using a dataframe to store data? 4. What are the different methods used to access data in a dataframe? 5. How do you manipulate data in a dataframe? 6. How do you handle missing data in a dataframe? 7. What are the most commonly used functions to analyze data in a dataframe? 8. What are the performance considerations when using dataframes? 9. What are the best practices for working with dataframes? 10. What are the most important considerations when using dataframes in a programming course? Prompt Create a multiple choice quiz about the use of Python lists. Create 10 questions with four responses each. Make sure there is only one correct response and add the string \"[CORRECT]\" at the end of the correct answer. Return the quiz in Markdown format where each question has a #### followed by a number. Response Warning Some of these answers are incorrect! 1. What is the correct syntax to create an empty list in Python? a) list() [CORRECT] b) [] c) set() d) dict() 2. How do you access the last element of a list in Python? a) list[last] b) list[-1] [CORRECT] c) list[last()] d) list[-last()] 3. Which method in Python is used to add an element at the end of a list? a) add() b) push() c) append() [CORRECT] d) insert() 4. What is the output of the following code? my_list = [1, 2, 3, 4, 5] print(my_list[1:3]) a) [1, 2] b) [2, 3] c) [3, 4] [CORRECT] d) [2, 3, 4] What is the output of the following code? my_list = [1, 2, 3, 4, 5] del my_list[2] print(my_list) a) [1, 2, 3, 4, 5] b) [1, 2, 4, 5] [CORRECT] c) [1, 3, 4, 5] d) [1, 2, 3, 5] Which method in Python is used to sort a list in ascending order? a) sort() b) ascending() c) sorted() d) None of the above [CORRECT] What is the output of the following code? my_list = [1, 2, 3, 4, 5] new_list = my_list.copy() new_list[0] = 0 print(my_list) a) [1, 2, 3, 4, 5] b) [0, 2, 3, 4, 5] c) [1, 2, 3, 4, 5] [CORRECT] d) [0, 0, 0, 0, 0] What is the output of the following code? my_list = [1, 2, 3] my_list.extend([4, 5]) print(my_list) a) [1, 2, 3] b) [4, 5] c) [1, 2, 3, 4, 5] [CORRECT] d) [1, 2, 3, [4, 5]] Which method in Python is used to remove the first occurrence of an element from a list? a) pop() b) remove() [CORRECT] c) discard() d) delete() What is the output of the following code? my_list = [1, 2, 3, 4, 5] print(my_list[-3:-1]) a) [1, 2] b) [2, 3] [CORRECT] c) [3, 4] d) [4, 5] True/False Multiple Choice","title":"Generating Quiz"},{"location":"prompts/16-quiz/#generating-quiz","text":"","title":"Generating Quiz"},{"location":"prompts/16-quiz/#open-answer","text":"","title":"Open Answer"},{"location":"prompts/16-quiz/#prompt","text":"Generate a set of questions about the use of Python dataframes for a high school progamming course.","title":"Prompt"},{"location":"prompts/16-quiz/#response","text":"1. What is a Python dataframe? 2. How do you create a dataframe in Python? 3. What are the advantages of using a dataframe to store data? 4. What are the different methods used to access data in a dataframe? 5. How do you manipulate data in a dataframe? 6. How do you handle missing data in a dataframe? 7. What are the most commonly used functions to analyze data in a dataframe? 8. What are the performance considerations when using dataframes? 9. What are the best practices for working with dataframes? 10. What are the most important considerations when using dataframes in a programming course?","title":"Response"},{"location":"prompts/16-quiz/#prompt_1","text":"Create a multiple choice quiz about the use of Python lists. Create 10 questions with four responses each. Make sure there is only one correct response and add the string \"[CORRECT]\" at the end of the correct answer. Return the quiz in Markdown format where each question has a #### followed by a number.","title":"Prompt"},{"location":"prompts/16-quiz/#response_1","text":"Warning Some of these answers are incorrect! 1. What is the correct syntax to create an empty list in Python? a) list() [CORRECT] b) [] c) set() d) dict() 2. How do you access the last element of a list in Python? a) list[last] b) list[-1] [CORRECT] c) list[last()] d) list[-last()] 3. Which method in Python is used to add an element at the end of a list? a) add() b) push() c) append() [CORRECT] d) insert() 4. What is the output of the following code? my_list = [1, 2, 3, 4, 5] print(my_list[1:3]) a) [1, 2] b) [2, 3] c) [3, 4] [CORRECT] d) [2, 3, 4] What is the output of the following code? my_list = [1, 2, 3, 4, 5] del my_list[2] print(my_list) a) [1, 2, 3, 4, 5] b) [1, 2, 4, 5] [CORRECT] c) [1, 3, 4, 5] d) [1, 2, 3, 5] Which method in Python is used to sort a list in ascending order? a) sort() b) ascending() c) sorted() d) None of the above [CORRECT] What is the output of the following code? my_list = [1, 2, 3, 4, 5] new_list = my_list.copy() new_list[0] = 0 print(my_list) a) [1, 2, 3, 4, 5] b) [0, 2, 3, 4, 5] c) [1, 2, 3, 4, 5] [CORRECT] d) [0, 0, 0, 0, 0] What is the output of the following code? my_list = [1, 2, 3] my_list.extend([4, 5]) print(my_list) a) [1, 2, 3] b) [4, 5] c) [1, 2, 3, 4, 5] [CORRECT] d) [1, 2, 3, [4, 5]] Which method in Python is used to remove the first occurrence of an element from a list? a) pop() b) remove() [CORRECT] c) discard() d) delete() What is the output of the following code? my_list = [1, 2, 3, 4, 5] print(my_list[-3:-1]) a) [1, 2] b) [2, 3] [CORRECT] c) [3, 4] d) [4, 5]","title":"Response"},{"location":"prompts/16-quiz/#truefalse","text":"","title":"True/False"},{"location":"prompts/16-quiz/#multiple-choice","text":"","title":"Multiple Choice"},{"location":"prompts/17-explaining-code/","text":"Explaining Code. We can also give ChatGPT a block of code and have it create an explanation of that code for a given grade level. Prompt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Explain this Python program to a 12-year old student: Explain the following Python program to a 12-year old student: import turtle colorList = ['red', 'orange', 'green', 'blue', 'indigo', 'violet', 'brown'] def draw_branch(turtle, color, size, level): if level > 1: turtle.pendown() turtle.color(color) turtle.forward(size) turtle.right(20) # draw three branches at half length with a branch on the tip of each branch for i in range(0, 3): turtle.forward(size/2) draw_branch(turtle, colorList[i], size/2, level - 1) turtle.backward(size/2) turtle.left(20) turtle.right(40) turtle.backward(size) myTurtle = turtle.Turtle() myTurtle.shape(\"turtle\") myTurtle.speed(50) length = 150 numberPetals = 6 myTurtle.penup() # move to the bottom center myTurtle.goto(0, -200) myTurtle.left(90) draw_branch(myTurtle, colorList[0], length, 4) Response This Python program uses the turtle library to draw a branching pattern with different colors. The draw_branch function takes four parameters: a turtle object, a color, a size, and a level. The turtle object is used to draw the pattern, the color is the color of the branch, the size is the length of the branch, and the level is how many levels of branches there are. The function will draw a branch and then draw three branches at half length with a branch at the tip of each branch. The turtle will then move back to the start and turn to the next branch. Finally, the turtle will move to the bottom center of the page and draw the branching pattern with four levels using the color red.","title":"Explaining Code"},{"location":"prompts/17-explaining-code/#explaining-code","text":"We can also give ChatGPT a block of code and have it create an explanation of that code for a given grade level.","title":"Explaining Code."},{"location":"prompts/17-explaining-code/#prompt","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Explain this Python program to a 12-year old student: Explain the following Python program to a 12-year old student: import turtle colorList = ['red', 'orange', 'green', 'blue', 'indigo', 'violet', 'brown'] def draw_branch(turtle, color, size, level): if level > 1: turtle.pendown() turtle.color(color) turtle.forward(size) turtle.right(20) # draw three branches at half length with a branch on the tip of each branch for i in range(0, 3): turtle.forward(size/2) draw_branch(turtle, colorList[i], size/2, level - 1) turtle.backward(size/2) turtle.left(20) turtle.right(40) turtle.backward(size) myTurtle = turtle.Turtle() myTurtle.shape(\"turtle\") myTurtle.speed(50) length = 150 numberPetals = 6 myTurtle.penup() # move to the bottom center myTurtle.goto(0, -200) myTurtle.left(90) draw_branch(myTurtle, colorList[0], length, 4)","title":"Prompt"},{"location":"prompts/17-explaining-code/#response","text":"This Python program uses the turtle library to draw a branching pattern with different colors. The draw_branch function takes four parameters: a turtle object, a color, a size, and a level. The turtle object is used to draw the pattern, the color is the color of the branch, the size is the length of the branch, and the level is how many levels of branches there are. The function will draw a branch and then draw three branches at half length with a branch at the tip of each branch. The turtle will then move back to the start and turn to the next branch. Finally, the turtle will move to the bottom center of the page and draw the branching pattern with four levels using the color red.","title":"Response"},{"location":"prompts/18-designing-robots/","text":"Designing Robots Not everyone is good at designing fun but low-cost robots. But you have nothing to fear! ChatGPT is here! Here is a sample prompt and response and some analysis of the response from some subject-matter experts. Sample Prompt 1 Design a low-cost robot to teach STEM (science, technology, engineering, and math) concepts. Use low-cost parts so all students could program their own robots with MicroPython. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 The robot design should include: 1. An affordable chassis made from lightweight material such as plastic or cardboard. 2. A motor controller that can be programmed with micropython to control the robot\u2019s movements. 3. Two DC motors with encoders that provide feedback on the robot\u2019s speed and direction. 4. Sensors such as an infrared distance sensor, light sensor, and touch sensor for the robot to interact with its environment. 5. An onboard battery to power the robot. 6. A USB port to connect the robot to a laptop or other device for programming with micropython. 7. A low-cost microcontroller with enough memory to run micropython code. 8. A set of instructions and sample programs to get students started with programming their robot. We agree with everything but a small detail of #3. We find that DC motors only cost about $1.50 each. But motors with encoders usually run around $15. This doubles the cost of the kits and we have also found that the algorithms to control the robots from the encoder data is too complex for most students to understand. Other than this minor point, we agree with all the items on this list. Examples of robots with these designs are listed below: Raspberry Pi Pico Robot Medium Blog on the Raspberry Pi Pico Robot Cytron Robot","title":"Designing Robots"},{"location":"prompts/18-designing-robots/#designing-robots","text":"Not everyone is good at designing fun but low-cost robots. But you have nothing to fear! ChatGPT is here! Here is a sample prompt and response and some analysis of the response from some subject-matter experts.","title":"Designing Robots"},{"location":"prompts/18-designing-robots/#sample-prompt","text":"1 Design a low-cost robot to teach STEM (science, technology, engineering, and math) concepts. Use low-cost parts so all students could program their own robots with MicroPython.","title":"Sample Prompt"},{"location":"prompts/18-designing-robots/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 The robot design should include: 1. An affordable chassis made from lightweight material such as plastic or cardboard. 2. A motor controller that can be programmed with micropython to control the robot\u2019s movements. 3. Two DC motors with encoders that provide feedback on the robot\u2019s speed and direction. 4. Sensors such as an infrared distance sensor, light sensor, and touch sensor for the robot to interact with its environment. 5. An onboard battery to power the robot. 6. A USB port to connect the robot to a laptop or other device for programming with micropython. 7. A low-cost microcontroller with enough memory to run micropython code. 8. A set of instructions and sample programs to get students started with programming their robot. We agree with everything but a small detail of #3. We find that DC motors only cost about $1.50 each. But motors with encoders usually run around $15. This doubles the cost of the kits and we have also found that the algorithms to control the robots from the encoder data is too complex for most students to understand. Other than this minor point, we agree with all the items on this list. Examples of robots with these designs are listed below: Raspberry Pi Pico Robot Medium Blog on the Raspberry Pi Pico Robot Cytron Robot","title":"Response"},{"location":"prompts/19-comparing-microcontrollers/","text":"Comparing Microcontrollers Prompt Create a markdown table that lists the Name, Cost, RAM Memory Size, Flash Memory Size for the following microcontrollers: Arduino Uno Arduino Nano Arduino Mega Raspberry Pi Pico ESP32 Response Name Cost RAM Memory Size Flash Memory Size Arduino Uno $20 2 KB 32 KB Arduino Nano $10 2 KB 32 KB Arduino Mega $45 8 KB 256 KB Raspberry Pi Pico $4 264 KB 2 MB ESP32 $10 520 KB 16 MB","title":"Comparing Microcontrollers"},{"location":"prompts/19-comparing-microcontrollers/#comparing-microcontrollers","text":"","title":"Comparing Microcontrollers"},{"location":"prompts/19-comparing-microcontrollers/#prompt","text":"Create a markdown table that lists the Name, Cost, RAM Memory Size, Flash Memory Size for the following microcontrollers: Arduino Uno Arduino Nano Arduino Mega Raspberry Pi Pico ESP32","title":"Prompt"},{"location":"prompts/19-comparing-microcontrollers/#response","text":"Name Cost RAM Memory Size Flash Memory Size Arduino Uno $20 2 KB 32 KB Arduino Nano $10 2 KB 32 KB Arduino Mega $45 8 KB 256 KB Raspberry Pi Pico $4 264 KB 2 MB ESP32 $10 520 KB 16 MB","title":"Response"},{"location":"prompts/20-website-analytics/","text":"Website Analytics Prompt 1 How do I track how many people are going to my website? Response 1 2 3 4 5 1. Use Google Analytics to track your website visitors. Google Analytics is a free web analytics service that allows you to measure your website\u2019s traffic, visitor behavior and other important data. 2. Use a web server log files to track website visitors. Web server log files provide detailed information about how many people are visiting your website, where they came from, and how they interacted with your website. 3. Use a third-party website traffic monitoring service. There are many third-party services that offer website traffic monitoring, including Alexa, Compete and Quantcast. These services provide detailed information about the number of visitors to your website, where they came from, and how they interacted with your website. Prompt 1 How do use Use Google Analytics? Response 1 2 3 4 5 6 7 8 9 10 11 12 13 1. Create an Account: Sign up for a free Google Analytics account and connect your website to Google Analytics. 2. Install the Tracking Code: Install the Google Analytics tracking code on your website. 3. Set Goals: Set Goals in Google Analytics to measure and track the performance of your website. 4. Monitor Performance: Monitor the performance of your website by using the reporting features available in Google Analytics, including the real-time reports. 5. Track User Interactions: Track user interactions with your website by creating Events and setting up Site Search. 6. Analyze Your Data: Analyze your data by using the Advanced Segments feature in Google Analytics and create custom reports. 7. Optimize Your Site: Optimize your website by using the insights provided by Google Analytics and take corrective action if needed. Prompt 1 How do I install a Google Analytics Tracking Code on my website? Sign in to your Google Analytics account and select the website you want to track. Click on the Admin tab in the top navigation. Select the account and property which you want to track. Click on \u201cTracking Info\u201d and then \u201cTracking Code\u201d. Copy the tracking code from the box in the pop-up window. Paste the tracking code into the source code of your website. It should be placed immediately after the opening tag. Save your changes and test the tracking code on your website. Refresh the page and check to make sure the tracking code is working correctly. Actual process mkdocs material site analytics Open your mkdocs.yml and add the following lines 1 2 3 4 extra: analytics: provider: google property: G-HPYNX9B8QZ Note To use this feature, you must be on mkdocs-material 7.1.8 or later. 1 2 pip3 install --upgrade mkdocs-material Successfully installed mkdocs-material-8.2.11 mkdocs-material-extensions-1.0.3 pygments-2.11.2 pymdown-extensions-9.1 Verify Google Analytics Use the Google Chrome More Tools -> Developer Tools -> Elements menus. Then click on the arrow to open the head element. There you should see the Google Analytics scripts:","title":"Website Analytics"},{"location":"prompts/20-website-analytics/#website-analytics","text":"","title":"Website Analytics"},{"location":"prompts/20-website-analytics/#prompt","text":"1 How do I track how many people are going to my website?","title":"Prompt"},{"location":"prompts/20-website-analytics/#response","text":"1 2 3 4 5 1. Use Google Analytics to track your website visitors. Google Analytics is a free web analytics service that allows you to measure your website\u2019s traffic, visitor behavior and other important data. 2. Use a web server log files to track website visitors. Web server log files provide detailed information about how many people are visiting your website, where they came from, and how they interacted with your website. 3. Use a third-party website traffic monitoring service. There are many third-party services that offer website traffic monitoring, including Alexa, Compete and Quantcast. These services provide detailed information about the number of visitors to your website, where they came from, and how they interacted with your website.","title":"Response"},{"location":"prompts/20-website-analytics/#prompt_1","text":"1 How do use Use Google Analytics?","title":"Prompt"},{"location":"prompts/20-website-analytics/#response_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 1. Create an Account: Sign up for a free Google Analytics account and connect your website to Google Analytics. 2. Install the Tracking Code: Install the Google Analytics tracking code on your website. 3. Set Goals: Set Goals in Google Analytics to measure and track the performance of your website. 4. Monitor Performance: Monitor the performance of your website by using the reporting features available in Google Analytics, including the real-time reports. 5. Track User Interactions: Track user interactions with your website by creating Events and setting up Site Search. 6. Analyze Your Data: Analyze your data by using the Advanced Segments feature in Google Analytics and create custom reports. 7. Optimize Your Site: Optimize your website by using the insights provided by Google Analytics and take corrective action if needed.","title":"Response"},{"location":"prompts/20-website-analytics/#prompt_2","text":"1 How do I install a Google Analytics Tracking Code on my website? Sign in to your Google Analytics account and select the website you want to track. Click on the Admin tab in the top navigation. Select the account and property which you want to track. Click on \u201cTracking Info\u201d and then \u201cTracking Code\u201d. Copy the tracking code from the box in the pop-up window. Paste the tracking code into the source code of your website. It should be placed immediately after the opening tag. Save your changes and test the tracking code on your website. Refresh the page and check to make sure the tracking code is working correctly.","title":"Prompt"},{"location":"prompts/20-website-analytics/#actual-process","text":"mkdocs material site analytics Open your mkdocs.yml and add the following lines 1 2 3 4 extra: analytics: provider: google property: G-HPYNX9B8QZ Note To use this feature, you must be on mkdocs-material 7.1.8 or later. 1 2 pip3 install --upgrade mkdocs-material Successfully installed mkdocs-material-8.2.11 mkdocs-material-extensions-1.0.3 pygments-2.11.2 pymdown-extensions-9.1","title":"Actual process"},{"location":"prompts/20-website-analytics/#verify-google-analytics","text":"Use the Google Chrome More Tools -> Developer Tools -> Elements menus. Then click on the arrow to open the head element. There you should see the Google Analytics scripts:","title":"Verify Google Analytics"},{"location":"prompts/21-scatter-plots/","text":"Scatter Plots We want to create a graph like this: Life Expectancy vs Healthcare Costs We will do this by having ChatGPT generate some sample data and the Python Plotly code to view that data in a scatter plot. There is a tutorial on this topic on the Plotly Line and Scatter website. Prompt 1 2 3 4 Create a Python program that does a scatter plot. For each country place a point on the plot. For the x-axis make it be the average life expectancy. For the y-axis make it be the annual cost of healthcare. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import matplotlib.pyplot as plt import pandas as pd # Assume you have a dataframe \"df\" that contains the columns \"Country\", \"Life Expectancy\" and \"Healthcare Cost\" plt . scatter ( df [ 'Life Expectancy' ], df [ 'Healthcare Cost' ]) plt . xlabel ( 'Life Expectancy' ) plt . ylabel ( 'Healthcare Cost' ) plt . title ( 'Scatter plot of Life Expectancy vs Healthcare Cost' ) for i , txt in enumerate ( df [ 'Country' ]): plt . annotate ( txt , ( df [ 'Life Expectancy' ][ i ], df [ 'Healthcare Cost' ][ i ])) plt . show () The above code will create a scatter plot with each country represented as a point, with the x-axis being the average life expectancy and the y-axis being the annual cost of healthcare. Additionally, each point is labeled with the country name. Please note that you will need to have the dataframe with the 3 columns i.e \"Country\", \"Life Expectancy\" and \"Healthcare Cost\" and replace the 'df' with the actual dataframe name in the code. Prompt #2 Create a pandas dataframe that includes the names of countries in the americas, the average life expectancy, and the average annual healthcare cost. 1 2 3 4 5 6 7 8 9 10 11 12 import pandas as pd # Create a dictionary containing the data data = { 'Country' : [ 'Canada' , 'United States' , 'Mexico' , 'Brazil' , 'Argentina' , 'Colombia' ], 'Life Expectancy' : [ 81.2 , 78.9 , 75.5 , 74.9 , 75.3 , 73.5 ], 'Healthcare Cost' : [ 5200 , 9500 , 1000 , 800 , 1500 , 600 ]} # Create a DataFrame from the dictionary df = pd . DataFrame ( data ) # Print the DataFrame print ( df ) 1 2 3 4 5 6 7 8 9 10 11 Country Life Expectancy Healthcare Cost 0 USA 78.9 10348 1 Canada 82.2 4826 2 Mexico 75.9 1845 3 Brazil 75.2 1845 4 Chile 79.7 2845 5 Peru 74.9 1845 6 Argentina 76.7 2845 7 Colombia 73.7 1845 8 Venezuela 73.7 1845 9 Costa Rica 79.2 2845","title":"Scatter Plots"},{"location":"prompts/21-scatter-plots/#scatter-plots","text":"We want to create a graph like this: Life Expectancy vs Healthcare Costs We will do this by having ChatGPT generate some sample data and the Python Plotly code to view that data in a scatter plot. There is a tutorial on this topic on the Plotly Line and Scatter website.","title":"Scatter Plots"},{"location":"prompts/21-scatter-plots/#prompt","text":"1 2 3 4 Create a Python program that does a scatter plot. For each country place a point on the plot. For the x-axis make it be the average life expectancy. For the y-axis make it be the annual cost of healthcare. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import matplotlib.pyplot as plt import pandas as pd # Assume you have a dataframe \"df\" that contains the columns \"Country\", \"Life Expectancy\" and \"Healthcare Cost\" plt . scatter ( df [ 'Life Expectancy' ], df [ 'Healthcare Cost' ]) plt . xlabel ( 'Life Expectancy' ) plt . ylabel ( 'Healthcare Cost' ) plt . title ( 'Scatter plot of Life Expectancy vs Healthcare Cost' ) for i , txt in enumerate ( df [ 'Country' ]): plt . annotate ( txt , ( df [ 'Life Expectancy' ][ i ], df [ 'Healthcare Cost' ][ i ])) plt . show () The above code will create a scatter plot with each country represented as a point, with the x-axis being the average life expectancy and the y-axis being the annual cost of healthcare. Additionally, each point is labeled with the country name. Please note that you will need to have the dataframe with the 3 columns i.e \"Country\", \"Life Expectancy\" and \"Healthcare Cost\" and replace the 'df' with the actual dataframe name in the code.","title":"Prompt"},{"location":"prompts/21-scatter-plots/#prompt-2","text":"Create a pandas dataframe that includes the names of countries in the americas, the average life expectancy, and the average annual healthcare cost. 1 2 3 4 5 6 7 8 9 10 11 12 import pandas as pd # Create a dictionary containing the data data = { 'Country' : [ 'Canada' , 'United States' , 'Mexico' , 'Brazil' , 'Argentina' , 'Colombia' ], 'Life Expectancy' : [ 81.2 , 78.9 , 75.5 , 74.9 , 75.3 , 73.5 ], 'Healthcare Cost' : [ 5200 , 9500 , 1000 , 800 , 1500 , 600 ]} # Create a DataFrame from the dictionary df = pd . DataFrame ( data ) # Print the DataFrame print ( df ) 1 2 3 4 5 6 7 8 9 10 11 Country Life Expectancy Healthcare Cost 0 USA 78.9 10348 1 Canada 82.2 4826 2 Mexico 75.9 1845 3 Brazil 75.2 1845 4 Chile 79.7 2845 5 Peru 74.9 1845 6 Argentina 76.7 2845 7 Colombia 73.7 1845 8 Venezuela 73.7 1845 9 Costa Rica 79.2 2845","title":"Prompt #2"},{"location":"prompts/22.lists/","text":"Generating Lists create a list of all the countries in the americas","title":"List"},{"location":"prompts/22.lists/#generating-lists","text":"create a list of all the countries in the americas","title":"Generating Lists"},{"location":"prompts/23-dataframes/","text":"DataFrames DataFrames are the standard Python data structure for holding tabular data. Spreadsheets and CSV files are examples of tabular data. DataFrames are part of the Python pandas library. There are hundreds of things that we can do with a DataFrame, but what are the key categories of operations that we should learn? Let's ask ChatGPT: What Are Dataframes Used For? The first thing we want to do is to get a handle on what things people do with DataFrames. ChatGPT can give us a list with the most common functions listed first. Sample Prompt What are the most common operations on a Python Pandas DataFrame? Return the list in markdown with the name of the operations in bold: Result Selection : Selecting rows, columns, or both rows and columns from a Dataframe. Filtering : Creating a new DataFrame with rows that meet certain criteria. Sorting : Sorting the rows of a DataFrame by one or more columns. Grouping : Grouping rows of a DataFrame by one or more columns. Aggregation : Computing summary statistics for each group. Joining : Joining two DataFrames together. Reshaping : Reshaping a DataFrame by pivoting, stacking, or melting. Cleaning : Cleaning up messy data. Visualization : Creating charts and graphs from a DataFrame. For the rest of this lab, we will get a simple dataset and go through the first three areas. In this lab, we will use a list of countries and their life expectancy data from the Plotly Express Library. We will use the famous Gapminder data file that is used in many DataFrame tutorials. Gapminder is an independent educational non-pro\ufb01t \ufb01ghting global misconceptions. Viewing Sample Data How do I view sample data from Gapminder as a Pandas DataFrame? In this lesson, we will explore how ChatGPT can help us quickly learn about an important Python library. DataFrames are the standard Python data structure for holding tabular data. Just like Microsoft Excel(TM) is used to manage tables of data, dataframes are one of the most commonly used data structures in Python. So it is important for data scientists to be familiar with dataframe operations. Note that in our case, we are only concerned with dataframes that are part of the very popular Python pandas library. We should specify \"Python Pandas DataFrame\" when we ask ChatGPAT questions since there might be other libraries that use the term \"DataFrame\". Most data science classes begin with learning pandas first and then proceed to libraries like numpy that focus on multi-dimentional arrays. There are many functions that you can use with dataframes. To start out, let's look at the most commonly used functions. Finding Popular Dataframe Functions Prompt What are the most common functions used in Python pandas dataframes? Return a markdown table with two columns: 1. The name of the function with a header \"Function Name\" 2. A short description of what the function does with the header \"Function Description\" Response: Function Name Function Description head() Returns the first n rows of a DataFrame tail() Returns the last n rows of a DataFrame describe() Generates descriptive statistics of the DataFrame info() Returns information about the DataFrame mean() Computes the mean of the DataFrame sum() Computes the sum of the DataFrame max() Computes the maximum value of the DataFrame min() Computes the minimum value of the DataFrame count() Counts the number of non-null values in the DataFrame median() Computes the median of the DataFrame std() Computes the standard deviation of the DataFrame corr() Computes the correlation between columns in the DataFrame You can see from this table that the first four most common functions are used just to understand what is in the table. The remaining functions in the table are common statistical functions that are used on a single column of numbers. The exception is corr() that works on two columns. In this lab, we will use a list of countries and their life expectancy data from the Plotly Express library. Viewing Sample Data We just need a short prompt to understand how to get the gapminder data into a data frame. Prompt How do I view sample data from gapminder as a Python Pandas DataFrame? Response 1 2 3 import plotly.express as px df = px . data . gapminder () print ( df . head ()) We can execute this in our IDE and we will get the following result: country continent year lifeExp pop gdpPercap iso_alpha iso_num 0 Afghanistan Asia 1952 28.801 8425333 779.445314 AFG 4 1 Afghanistan Asia 1957 30.332 9240934 820.853030 AFG 4 2 Afghanistan Asia 1962 31.997 10267083 853.100710 AFG 4 3 Afghanistan Asia 1967 34.020 11537966 836.197138 AFG 4 4 Afghanistan Asia 1972 36.088 13079460 739.981106 AFG 4 Reading a CSV File Using the plotly.express library is nice because loading gapminder is just a single line that will always work in the future. If we need to load a specific CSV file we can just use pandas and get the result into a dataframe. Because the Gapminer dataset is popular in many classes, the Plotly express library makes it a built-in function that allows us to load it with a single consistent command. Because of this the tutorials will not break when external CSV files are moved around. However, we can also read the same information from any CSV file stored on raw GitHub User Content area. 1 2 3 4 5 6 7 import pandas as pd # Read the Gapminder data into a dataframe # df = pd.read_csv('http://bit.ly/gapminder-data') df = pd . read_csv ( 'https://raw.githubusercontent.com/carpentries-incubator/open-science-with-r/gh-pages/data/gapminder.csv' ) # Print the head of the dataframe print ( df . head ()) As long as this CSV files is not moved around, this code will also work. This returns the same results: country continent year lifeExp pop gdpPercap iso_alpha iso_num 0 Afghanistan Asia 1952 28.801 8425333 779.445314 AFG 4 1 Afghanistan Asia 1957 30.332 9240934 820.853030 AFG 4 2 Afghanistan Asia 1962 31.997 10267083 853.100710 AFG 4 3 Afghanistan Asia 1967 34.020 11537966 836.197138 AFG 4 4 Afghanistan Asia 1972 36.088 13079460 739.981106 AFG 4 Enumerating Column Values We can see from the head() output that one of the names of the continents is \"Asia\". But how can we get a distinct list of all the continents? Prompt How do I list all the distinct values in a column of a Pandas DataFrame? Challenge Use the tail(), describe() and info() functions on the gapminder dataframe Use the sum(), min(), max(), mean(), median() and std() on the data column: year, lifeExp, pop and gdpPercap. Use the corr() function on the leftExp and gdpPercap columns Prompt How do I list all the distinct values in a column of a Pandas dataframe? Response The responses have lots of text, but here is the key new line: 1 types = df [ \"column_name\" ] . unique () So our new code looks like this: 1 2 3 4 import plotly.express as px df = px . data . gapminder () list_of_continents = df [ \"continent\" ] . unique () print ( list_of_continents ) And the result is the following list: 1 [ 'Asia' 'Europe' 'Africa' 'Americas' 'Oceania' ] Filtering Sometimes you don't need all the data in a large file. We only want a subset of the entire data. You can use one of the distinct values in the prior query to filter out only the values you want. Let's ask ChatGPT how to only return rows that have the continent of 'Americas'. Prompt: How do I filter out only the countries in the Americas from the Gapminder data? Response: Use the .query(\"column_name == 'value'\") function on the data. 1 2 3 4 import plotly.express as px # df = px.data.gapminder() df = px . data . gapminder () . query ( \"continent == 'Americas'\" ) print ( df . head ()) Response 48 Argentina Americas 1952 62.485 17876956 5911.315053 ARG 32 49 Argentina Americas 1957 64.399 19610538 6856.856212 ARG 32 50 Argentina Americas 1962 65.142 21283783 7133.166023 ARG 32 51 Argentina Americas 1967 65.634 22934225 8052.953021 ARG 32 52 Argentina Americas 1972 67.065 24779799 9443.038526 ARG 32 Note that now only data from the Americas is returned. Sorting Prompt How do I sort the values of a DataFrame? Response To sort the values of a dataframe, you can use the sort_values() method. This method takes in the column name you would like to sort the values by as an argument. For example, to sort the values of a dataframe by the 'Name' column, you could use the following code: 1 df . sort_values ( by = 'Name' ) 1 2 3 4 5 6 import plotly.express as px df = px . data . gapminder () df = px . data . gapminder () . query ( \"continent == 'Americas'\" ) print ( df . sort_values ( by = 'lifeExp' )) The result is the rows that had the shortest life expectancy in the Americas . country continent year lifeExp pop gdpPercap iso_alpha iso_num 636 Haiti Americas 1952 37.579 3201488 1840.366939 HTI 332 132 Bolivia Americas 1952 40.414 2883315 2677.326347 BOL 68 637 Haiti Americas 1957 40.696 3507701 1726.887882 HTI 332 133 Bolivia Americas 1957 41.890 3211738 2127.686326 BOL 68 648 Honduras Americas 1952 41.912 1517453 2194.926204 HND 340","title":"Dataframes"},{"location":"prompts/23-dataframes/#dataframes","text":"DataFrames are the standard Python data structure for holding tabular data. Spreadsheets and CSV files are examples of tabular data. DataFrames are part of the Python pandas library. There are hundreds of things that we can do with a DataFrame, but what are the key categories of operations that we should learn? Let's ask ChatGPT:","title":"DataFrames"},{"location":"prompts/23-dataframes/#what-are-dataframes-used-for","text":"The first thing we want to do is to get a handle on what things people do with DataFrames. ChatGPT can give us a list with the most common functions listed first.","title":"What Are Dataframes Used For?"},{"location":"prompts/23-dataframes/#sample-prompt","text":"What are the most common operations on a Python Pandas DataFrame? Return the list in markdown with the name of the operations in bold:","title":"Sample Prompt"},{"location":"prompts/23-dataframes/#result","text":"Selection : Selecting rows, columns, or both rows and columns from a Dataframe. Filtering : Creating a new DataFrame with rows that meet certain criteria. Sorting : Sorting the rows of a DataFrame by one or more columns. Grouping : Grouping rows of a DataFrame by one or more columns. Aggregation : Computing summary statistics for each group. Joining : Joining two DataFrames together. Reshaping : Reshaping a DataFrame by pivoting, stacking, or melting. Cleaning : Cleaning up messy data. Visualization : Creating charts and graphs from a DataFrame. For the rest of this lab, we will get a simple dataset and go through the first three areas. In this lab, we will use a list of countries and their life expectancy data from the Plotly Express Library. We will use the famous Gapminder data file that is used in many DataFrame tutorials. Gapminder is an independent educational non-pro\ufb01t \ufb01ghting global misconceptions.","title":"Result"},{"location":"prompts/23-dataframes/#viewing-sample-data","text":"","title":"Viewing Sample Data"},{"location":"prompts/23-dataframes/#how-do-i-view-sample-data-from-gapminder-as-a-pandas-dataframe","text":"In this lesson, we will explore how ChatGPT can help us quickly learn about an important Python library. DataFrames are the standard Python data structure for holding tabular data. Just like Microsoft Excel(TM) is used to manage tables of data, dataframes are one of the most commonly used data structures in Python. So it is important for data scientists to be familiar with dataframe operations. Note that in our case, we are only concerned with dataframes that are part of the very popular Python pandas library. We should specify \"Python Pandas DataFrame\" when we ask ChatGPAT questions since there might be other libraries that use the term \"DataFrame\". Most data science classes begin with learning pandas first and then proceed to libraries like numpy that focus on multi-dimentional arrays. There are many functions that you can use with dataframes. To start out, let's look at the most commonly used functions.","title":"How do I view sample data from Gapminder as a Pandas DataFrame?"},{"location":"prompts/23-dataframes/#finding-popular-dataframe-functions","text":"","title":"Finding Popular Dataframe Functions"},{"location":"prompts/23-dataframes/#prompt","text":"What are the most common functions used in Python pandas dataframes? Return a markdown table with two columns: 1. The name of the function with a header \"Function Name\" 2. A short description of what the function does with the header \"Function Description\"","title":"Prompt"},{"location":"prompts/23-dataframes/#response","text":"Function Name Function Description head() Returns the first n rows of a DataFrame tail() Returns the last n rows of a DataFrame describe() Generates descriptive statistics of the DataFrame info() Returns information about the DataFrame mean() Computes the mean of the DataFrame sum() Computes the sum of the DataFrame max() Computes the maximum value of the DataFrame min() Computes the minimum value of the DataFrame count() Counts the number of non-null values in the DataFrame median() Computes the median of the DataFrame std() Computes the standard deviation of the DataFrame corr() Computes the correlation between columns in the DataFrame You can see from this table that the first four most common functions are used just to understand what is in the table. The remaining functions in the table are common statistical functions that are used on a single column of numbers. The exception is corr() that works on two columns. In this lab, we will use a list of countries and their life expectancy data from the Plotly Express library.","title":"Response:"},{"location":"prompts/23-dataframes/#viewing-sample-data_1","text":"We just need a short prompt to understand how to get the gapminder data into a data frame.","title":"Viewing Sample Data"},{"location":"prompts/23-dataframes/#prompt_1","text":"How do I view sample data from gapminder as a Python Pandas DataFrame?","title":"Prompt"},{"location":"prompts/23-dataframes/#response_1","text":"1 2 3 import plotly.express as px df = px . data . gapminder () print ( df . head ()) We can execute this in our IDE and we will get the following result: country continent year lifeExp pop gdpPercap iso_alpha iso_num 0 Afghanistan Asia 1952 28.801 8425333 779.445314 AFG 4 1 Afghanistan Asia 1957 30.332 9240934 820.853030 AFG 4 2 Afghanistan Asia 1962 31.997 10267083 853.100710 AFG 4 3 Afghanistan Asia 1967 34.020 11537966 836.197138 AFG 4 4 Afghanistan Asia 1972 36.088 13079460 739.981106 AFG 4","title":"Response"},{"location":"prompts/23-dataframes/#reading-a-csv-file","text":"Using the plotly.express library is nice because loading gapminder is just a single line that will always work in the future. If we need to load a specific CSV file we can just use pandas and get the result into a dataframe. Because the Gapminer dataset is popular in many classes, the Plotly express library makes it a built-in function that allows us to load it with a single consistent command. Because of this the tutorials will not break when external CSV files are moved around. However, we can also read the same information from any CSV file stored on raw GitHub User Content area. 1 2 3 4 5 6 7 import pandas as pd # Read the Gapminder data into a dataframe # df = pd.read_csv('http://bit.ly/gapminder-data') df = pd . read_csv ( 'https://raw.githubusercontent.com/carpentries-incubator/open-science-with-r/gh-pages/data/gapminder.csv' ) # Print the head of the dataframe print ( df . head ()) As long as this CSV files is not moved around, this code will also work. This returns the same results: country continent year lifeExp pop gdpPercap iso_alpha iso_num 0 Afghanistan Asia 1952 28.801 8425333 779.445314 AFG 4 1 Afghanistan Asia 1957 30.332 9240934 820.853030 AFG 4 2 Afghanistan Asia 1962 31.997 10267083 853.100710 AFG 4 3 Afghanistan Asia 1967 34.020 11537966 836.197138 AFG 4 4 Afghanistan Asia 1972 36.088 13079460 739.981106 AFG 4","title":"Reading a CSV File"},{"location":"prompts/23-dataframes/#enumerating-column-values","text":"We can see from the head() output that one of the names of the continents is \"Asia\". But how can we get a distinct list of all the continents?","title":"Enumerating Column Values"},{"location":"prompts/23-dataframes/#prompt_2","text":"How do I list all the distinct values in a column of a Pandas DataFrame? Challenge Use the tail(), describe() and info() functions on the gapminder dataframe Use the sum(), min(), max(), mean(), median() and std() on the data column: year, lifeExp, pop and gdpPercap. Use the corr() function on the leftExp and gdpPercap columns","title":"Prompt"},{"location":"prompts/23-dataframes/#prompt_3","text":"How do I list all the distinct values in a column of a Pandas dataframe?","title":"Prompt"},{"location":"prompts/23-dataframes/#response_2","text":"The responses have lots of text, but here is the key new line: 1 types = df [ \"column_name\" ] . unique () So our new code looks like this: 1 2 3 4 import plotly.express as px df = px . data . gapminder () list_of_continents = df [ \"continent\" ] . unique () print ( list_of_continents ) And the result is the following list: 1 [ 'Asia' 'Europe' 'Africa' 'Americas' 'Oceania' ]","title":"Response"},{"location":"prompts/23-dataframes/#filtering","text":"Sometimes you don't need all the data in a large file. We only want a subset of the entire data. You can use one of the distinct values in the prior query to filter out only the values you want. Let's ask ChatGPT how to only return rows that have the continent of 'Americas'. Prompt: How do I filter out only the countries in the Americas from the Gapminder data? Response: Use the .query(\"column_name == 'value'\") function on the data. 1 2 3 4 import plotly.express as px # df = px.data.gapminder() df = px . data . gapminder () . query ( \"continent == 'Americas'\" ) print ( df . head ())","title":"Filtering"},{"location":"prompts/23-dataframes/#response_3","text":"48 Argentina Americas 1952 62.485 17876956 5911.315053 ARG 32 49 Argentina Americas 1957 64.399 19610538 6856.856212 ARG 32 50 Argentina Americas 1962 65.142 21283783 7133.166023 ARG 32 51 Argentina Americas 1967 65.634 22934225 8052.953021 ARG 32 52 Argentina Americas 1972 67.065 24779799 9443.038526 ARG 32 Note that now only data from the Americas is returned.","title":"Response"},{"location":"prompts/23-dataframes/#sorting","text":"","title":"Sorting"},{"location":"prompts/23-dataframes/#prompt_4","text":"How do I sort the values of a DataFrame?","title":"Prompt"},{"location":"prompts/23-dataframes/#response_4","text":"To sort the values of a dataframe, you can use the sort_values() method. This method takes in the column name you would like to sort the values by as an argument. For example, to sort the values of a dataframe by the 'Name' column, you could use the following code: 1 df . sort_values ( by = 'Name' ) 1 2 3 4 5 6 import plotly.express as px df = px . data . gapminder () df = px . data . gapminder () . query ( \"continent == 'Americas'\" ) print ( df . sort_values ( by = 'lifeExp' )) The result is the rows that had the shortest life expectancy in the Americas . country continent year lifeExp pop gdpPercap iso_alpha iso_num 636 Haiti Americas 1952 37.579 3201488 1840.366939 HTI 332 132 Bolivia Americas 1952 40.414 2883315 2677.326347 BOL 68 637 Haiti Americas 1957 40.696 3507701 1726.887882 HTI 332 133 Bolivia Americas 1957 41.890 3211738 2127.686326 BOL 68 648 Honduras Americas 1952 41.912 1517453 2194.926204 HND 340","title":"Response"},{"location":"prompts/24-numpy/","text":"Numpy Boston Housing Dataset Prompt 1 Create a python program using panda dataframes to get the boston housing dataset. Response 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import pandas as pd from sklearn.datasets import load_boston # Load the Boston housing dataset boston_dataset = load_boston () # Create a dataframe from the dataset boston_df = pd . DataFrame ( boston_dataset . data , columns = boston_dataset . feature_names ) # Add the target variable to the dataframe boston_df [ 'MEDV' ] = boston_dataset . target # Print the first 5 rows of the dataframe print ( boston_df . head ())","title":"NumPy"},{"location":"prompts/24-numpy/#numpy","text":"","title":"Numpy"},{"location":"prompts/24-numpy/#boston-housing-dataset","text":"","title":"Boston Housing Dataset"},{"location":"prompts/24-numpy/#prompt","text":"1 Create a python program using panda dataframes to get the boston housing dataset.","title":"Prompt"},{"location":"prompts/24-numpy/#response","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 import pandas as pd from sklearn.datasets import load_boston # Load the Boston housing dataset boston_dataset = load_boston () # Create a dataframe from the dataset boston_df = pd . DataFrame ( boston_dataset . data , columns = boston_dataset . feature_names ) # Add the target variable to the dataframe boston_df [ 'MEDV' ] = boston_dataset . target # Print the first 5 rows of the dataframe print ( boston_df . head ())","title":"Response"},{"location":"prompts/25-linear-regression/","text":"Linear Regression Linear regression is a way to find a line that goes through some points on a graph. Use a Metaphor Prompt: Use a metaphor to explain linear regression. Linear regression can be metaphorically compared to fitting a straight line through a scatterplot of data points. Just like how a tailor takes a piece of cloth and cuts and stitches it to fit a person's body, linear regression takes a set of data points and calculates the best-fit line that describes the relationship between two variables. The line acts as a measuring tape that stretches across the data points, revealing the patterns and trends hidden within. And just as a tailor may need to make adjustments to get the perfect fit, linear regression can be fine-tuned to accurately capture the nuances of the data. Examples of Linear Regression For example, let's say you wanted to see if there is a relationship between the amount of time you spend studying and the grade you get on a test. You could collect data on how long you study and what grade you get on each test, then plot that data on a graph. Linear regression would help you find a line that best fits the points on the graph, which would help you see if there's a pattern or trend in the data. In everyday life, linear regression is used to make predictions about things. For example, if you're a farmer and you want to know how much corn you're likely to harvest based on how much fertilizer you use, you could use linear regression to find a line that best fits the data you collect on how much fertilizer you use and how much corn you harvest. Then, you could use that line to predict how much corn you're likely to harvest if you use a certain amount of fertilizer. Another example could be if a company wants to predict how much money it will make in the future based on its current revenue, it could use linear regression to find a line that best fits its revenue data. Then, they could use that line to predict how much money they will make in the future based on their projected revenue. Here is a sample dataset for linear regression that shows the price of houses based on their square footage: Square Footage Price of House (in $) 1,200 150,000 1,500 175,000 1,800 200,000 2,200 250,000 2,600 300,000 3,000 350,000 To create a formula that predicts the price of a house based on its square footage, we can again use linear regression. First, we need to plot the data points on a graph with the square footage on the x-axis and the price of the house on the y-axis. We can see from the data that there appears to be a positive correlation between the square footage and the price of the house. Next, we can use a linear regression calculator or software to find the equation of the line of best fit for the data points. This line will have the form of y = mx + b , where y is the price of the house, x is the square footage, m is the slope of the line, and b is the y-intercept. Using the sample dataset, the equation of the line of best fit would be: y = 83.33x - 10,000 This means that for every additional square footage of the house, the price of the house increases by $83.33, and the initial price of the house (when x=0) is -$10,000, which is not realistic, so we can ignore the y-intercept in this case. So if you wanted to predict the price of a new house with a square footage of 2500 sq. ft., you could use the formula: y = 83.33(2500) - 10,000 y = 208,325 This predicts that the price of the house with a square footage of 2500 sq. ft. would be $208,325. However, it's important to note that this is just a prediction based on the data we have, and there may be other factors that affect the price of a house beyond its square footage, such as location, age, number of bedrooms/bathrooms, and more. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import plotly.graph_objects as go import numpy as np # create data sq_ft = np . array ([ 1200 , 1500 , 1800 , 2200 , 2600 , 3000 ]) price = np . array ([ 150000 , 175000 , 200000 , 250000 , 300000 , 350000 ]) # calculate line of best fit m , b = np . polyfit ( sq_ft , price , 1 ) line = m * sq_ft + b # create plotly chart fig = go . Figure () # add data points fig . add_trace ( go . Scatter ( x = sq_ft , y = price , mode = 'markers' , marker = dict ( color = 'blue' ))) # add line of best fit fig . add_trace ( go . Scatter ( x = sq_ft , y = line , mode = 'lines' , line = dict ( color = 'red' ))) # set axis labels and title fig . update_layout ( title = 'Relationship Between House Price and Square Footage' , xaxis_title = 'Square Footage (sq. ft.)' , yaxis_title = 'Price of House ($)' ) fig . show () Story Telling Prompt Create a story about a student learning linear regression as it would be told by Joseph Campbell. Response Once upon a time, there was a young student named Alex who was studying data science at a prestigious university. Alex had a burning passion for understanding the patterns and relationships hidden within data, and spent countless hours poring over statistical models and data sets. One day, Alex was introduced to the concept of linear regression, a powerful tool for modeling relationships between variables. At first, Alex was overwhelmed by the complexity of this new concept, but soon felt a stirring within themselves - a call to adventure. As Alex delved deeper into the world of linear regression, they encountered challenges and obstacles that tested their resolve. There were equations to solve and models to build, and at times it seemed as though the path ahead was shrouded in darkness. But Alex persisted, driven by a sense of purpose and a desire to unlock the secrets hidden within the data. Along the way, they met mentors and fellow travelers who offered guidance and wisdom, and together they journeyed through the mysterious and often treacherous realm of linear regression. As Alex approached the final stages of their quest, they found themselves faced with a daunting task: to apply their newfound knowledge to a real-world problem and deliver a solution that would make a difference in the lives of others. With steely determination and unwavering focus, Alex forged ahead, drawing upon all the skills and insights they had gained throughout their journey. And in the end, their efforts were rewarded: the model they created was hailed as a breakthrough, and Alex emerged as a hero, having successfully navigated the perils of linear regression and emerged victorious. From that day forward, Alex was known not just as a student of data science, but as a hero of linear regression - a brave adventurer who had journeyed into the unknown and emerged triumphant. And the lessons they had learned along the way would stay with them always, guiding them on future quests and adventures yet to come. Using Analogies Prompt: Can you use an analogy that includes springs used to adjust the distance from points to a line? Response: Sure, here's an analogy that includes springs used to adjust the distance from points to a line in linear regression: Imagine you have a set of points suspended by springs above a line. The springs can be adjusted to move the points closer or farther away from the line. The goal is to adjust the springs in such a way that the points are as close as possible to the line. In this analogy, the line represents the linear model that we are trying to fit to the data, and the points represent the actual data points. The springs represent the coefficients of the model that we adjust to minimize the distance between the data points and the line. We can think of the distance between each point and the line as the tension in the spring connecting the point to the line. Our goal is to adjust the springs (i.e., the coefficients) in such a way that the tension in each spring is minimized, or in other words, the distance between the point and the line is minimized. Through the process of linear regression, we adjust the coefficients (i.e., the springs) until we have the best possible fit between the data points and the line. This fit allows us to make predictions about the dependent variable (the points) based on the independent variable (the line). Generate JavaScript SVG demo We can now ask ChatGPT to generate an interactive JavaScript Demo: Linear Regression Demo with JavaScript and SVG - use your browser refresh to generate new values Linear Regression with Grid Lines Sliders for Slope and Intercept Least Squares V1 Least Squares V2 Least Squares V1","title":"Linear Regression"},{"location":"prompts/25-linear-regression/#linear-regression","text":"Linear regression is a way to find a line that goes through some points on a graph.","title":"Linear Regression"},{"location":"prompts/25-linear-regression/#use-a-metaphor","text":"Prompt: Use a metaphor to explain linear regression. Linear regression can be metaphorically compared to fitting a straight line through a scatterplot of data points. Just like how a tailor takes a piece of cloth and cuts and stitches it to fit a person's body, linear regression takes a set of data points and calculates the best-fit line that describes the relationship between two variables. The line acts as a measuring tape that stretches across the data points, revealing the patterns and trends hidden within. And just as a tailor may need to make adjustments to get the perfect fit, linear regression can be fine-tuned to accurately capture the nuances of the data.","title":"Use a Metaphor"},{"location":"prompts/25-linear-regression/#examples-of-linear-regression","text":"For example, let's say you wanted to see if there is a relationship between the amount of time you spend studying and the grade you get on a test. You could collect data on how long you study and what grade you get on each test, then plot that data on a graph. Linear regression would help you find a line that best fits the points on the graph, which would help you see if there's a pattern or trend in the data. In everyday life, linear regression is used to make predictions about things. For example, if you're a farmer and you want to know how much corn you're likely to harvest based on how much fertilizer you use, you could use linear regression to find a line that best fits the data you collect on how much fertilizer you use and how much corn you harvest. Then, you could use that line to predict how much corn you're likely to harvest if you use a certain amount of fertilizer. Another example could be if a company wants to predict how much money it will make in the future based on its current revenue, it could use linear regression to find a line that best fits its revenue data. Then, they could use that line to predict how much money they will make in the future based on their projected revenue. Here is a sample dataset for linear regression that shows the price of houses based on their square footage: Square Footage Price of House (in $) 1,200 150,000 1,500 175,000 1,800 200,000 2,200 250,000 2,600 300,000 3,000 350,000 To create a formula that predicts the price of a house based on its square footage, we can again use linear regression. First, we need to plot the data points on a graph with the square footage on the x-axis and the price of the house on the y-axis. We can see from the data that there appears to be a positive correlation between the square footage and the price of the house. Next, we can use a linear regression calculator or software to find the equation of the line of best fit for the data points. This line will have the form of y = mx + b , where y is the price of the house, x is the square footage, m is the slope of the line, and b is the y-intercept. Using the sample dataset, the equation of the line of best fit would be: y = 83.33x - 10,000 This means that for every additional square footage of the house, the price of the house increases by $83.33, and the initial price of the house (when x=0) is -$10,000, which is not realistic, so we can ignore the y-intercept in this case. So if you wanted to predict the price of a new house with a square footage of 2500 sq. ft., you could use the formula: y = 83.33(2500) - 10,000 y = 208,325 This predicts that the price of the house with a square footage of 2500 sq. ft. would be $208,325. However, it's important to note that this is just a prediction based on the data we have, and there may be other factors that affect the price of a house beyond its square footage, such as location, age, number of bedrooms/bathrooms, and more. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import plotly.graph_objects as go import numpy as np # create data sq_ft = np . array ([ 1200 , 1500 , 1800 , 2200 , 2600 , 3000 ]) price = np . array ([ 150000 , 175000 , 200000 , 250000 , 300000 , 350000 ]) # calculate line of best fit m , b = np . polyfit ( sq_ft , price , 1 ) line = m * sq_ft + b # create plotly chart fig = go . Figure () # add data points fig . add_trace ( go . Scatter ( x = sq_ft , y = price , mode = 'markers' , marker = dict ( color = 'blue' ))) # add line of best fit fig . add_trace ( go . Scatter ( x = sq_ft , y = line , mode = 'lines' , line = dict ( color = 'red' ))) # set axis labels and title fig . update_layout ( title = 'Relationship Between House Price and Square Footage' , xaxis_title = 'Square Footage (sq. ft.)' , yaxis_title = 'Price of House ($)' ) fig . show ()","title":"Examples of Linear Regression"},{"location":"prompts/25-linear-regression/#story-telling","text":"","title":"Story Telling"},{"location":"prompts/25-linear-regression/#prompt","text":"Create a story about a student learning linear regression as it would be told by Joseph Campbell.","title":"Prompt"},{"location":"prompts/25-linear-regression/#response","text":"Once upon a time, there was a young student named Alex who was studying data science at a prestigious university. Alex had a burning passion for understanding the patterns and relationships hidden within data, and spent countless hours poring over statistical models and data sets. One day, Alex was introduced to the concept of linear regression, a powerful tool for modeling relationships between variables. At first, Alex was overwhelmed by the complexity of this new concept, but soon felt a stirring within themselves - a call to adventure. As Alex delved deeper into the world of linear regression, they encountered challenges and obstacles that tested their resolve. There were equations to solve and models to build, and at times it seemed as though the path ahead was shrouded in darkness. But Alex persisted, driven by a sense of purpose and a desire to unlock the secrets hidden within the data. Along the way, they met mentors and fellow travelers who offered guidance and wisdom, and together they journeyed through the mysterious and often treacherous realm of linear regression. As Alex approached the final stages of their quest, they found themselves faced with a daunting task: to apply their newfound knowledge to a real-world problem and deliver a solution that would make a difference in the lives of others. With steely determination and unwavering focus, Alex forged ahead, drawing upon all the skills and insights they had gained throughout their journey. And in the end, their efforts were rewarded: the model they created was hailed as a breakthrough, and Alex emerged as a hero, having successfully navigated the perils of linear regression and emerged victorious. From that day forward, Alex was known not just as a student of data science, but as a hero of linear regression - a brave adventurer who had journeyed into the unknown and emerged triumphant. And the lessons they had learned along the way would stay with them always, guiding them on future quests and adventures yet to come.","title":"Response"},{"location":"prompts/25-linear-regression/#using-analogies","text":"Prompt: Can you use an analogy that includes springs used to adjust the distance from points to a line? Response: Sure, here's an analogy that includes springs used to adjust the distance from points to a line in linear regression: Imagine you have a set of points suspended by springs above a line. The springs can be adjusted to move the points closer or farther away from the line. The goal is to adjust the springs in such a way that the points are as close as possible to the line. In this analogy, the line represents the linear model that we are trying to fit to the data, and the points represent the actual data points. The springs represent the coefficients of the model that we adjust to minimize the distance between the data points and the line. We can think of the distance between each point and the line as the tension in the spring connecting the point to the line. Our goal is to adjust the springs (i.e., the coefficients) in such a way that the tension in each spring is minimized, or in other words, the distance between the point and the line is minimized. Through the process of linear regression, we adjust the coefficients (i.e., the springs) until we have the best possible fit between the data points and the line. This fit allows us to make predictions about the dependent variable (the points) based on the independent variable (the line).","title":"Using Analogies"},{"location":"prompts/25-linear-regression/#generate-javascript-svg-demo","text":"We can now ask ChatGPT to generate an interactive JavaScript Demo: Linear Regression Demo with JavaScript and SVG - use your browser refresh to generate new values Linear Regression with Grid Lines Sliders for Slope and Intercept Least Squares V1 Least Squares V2 Least Squares V1","title":"Generate JavaScript SVG demo"},{"location":"prompts/25-scikit-learn/","text":"Scikit Learn Scikit Learn is a Python library for predictive data analysis. Given a dataset of numbers, it can build a predictive model that can be used to predict new values for similar inputs. Scikit Learn is built on NumPy, SciPy, and matplotlib. Installation We can use the pip program to install the Scikit-learn Python libraries. 1 pip install -U scikit-learn This will typically take a few minutes to run. At the end of the installation, you should see the text Successfully installed scikit-learn . 1 2 3 4 5 6 7 8 9 10 11 12 Collecting scikit-learn Downloading scikit_learn-0.24.2-cp36-cp36m-macosx_10_13_x86_64.whl (7.2 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7.2 MB 2.5 MB/s Requirement already satisfied: numpy>=1.13.3 in /Users/dan/opt/miniconda3/envs/mkdocs/lib/python3.6/site-packages (from scikit-learn) (1.19.5) Requirement already satisfied: joblib>=0.11 in /Users/dan/opt/miniconda3/envs/mkdocs/lib/python3.6/site-packages (from scikit-learn) (1.0.0) Collecting scipy>=0.19.1 Downloading scipy-1.5.4-cp36-cp36m-macosx_10_9_x86_64.whl (28.8 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 28.8 MB 7.0 MB/s Collecting threadpoolctl>=2.0.0 Using cached threadpoolctl-3.1.0-py3-none-any.whl (14 kB) Installing collected packages: threadpoolctl, scipy, scikit-learn Successfully installed scikit-learn-0.24.2 scipy-1.5.4 threadpoolctl-3.1.0 Note Some users might need to use the following user install: 1 pip install --user --install-option=\"--prefix=\" -U scikit-learn Testing Scikit Learn 1 2 import sklearn print ( 'The scikit-learn version is {} .' . format ( sklearn . __version__ )) 1 The scikit-learn version is 0.24.2. Simple Linear Regression Linear regression attempts to draw a straight line on a chart that will best fit some data points. From this line, we can derive a simple model of the form y = mx + b where m is the slope and b is the intercept. Sample Table of Home Prices We can use ChatGPT to generate some sample data for us. Prompt: 1 Generate a list of 20 home sales in two columns using pipe delimited format. Put a pipe before and at the end of each line. Make the square footage range from 1,000 to 3,000 square feet and the home prices range from $130,000 to $300,000. Square Feet Home Sale Price 1000 $130,000 1200 $146,000 1400 $162,000 1600 $178,000 1800 $194,000 2000 $210,000 2200 $226,000 2400 $242,000 2600 $258,000 2800 $274,000 3000 $290,000 1100 $136,000 1300 $152,000 1500 $168,000 1700 $184,000 1900 $200,000 2100 $216,000 2300 $232,000 2500 $248,000 2700 $264,000 Regenerated response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Create synthetic dataset np . random . seed ( 42 ) sqft = np . random . randint ( low = 1000 , high = 5000 , size = 20 ) price = sqft * 300 + np . random . randint ( low =- 50000 , high = 50000 , size = 20 ) # Fit linear regression model model = LinearRegression () model . fit ( sqft . reshape ( - 1 , 1 ), price ) # Generate predictions x_pred = np . linspace ( start = 0 , stop = 5000 , num = 100 ) y_pred = model . predict ( x_pred . reshape ( - 1 , 1 )) # Plot data and linear regression line plt . scatter ( sqft , price ) plt . plot ( x_pred , y_pred , color = 'red' ) plt . xlabel ( 'Square Footage' ) plt . ylabel ( 'Sale Price' ) plt . title ( 'Linear Regression Plot of Home Prices' ) plt . show () References Scikit Learn Website Scikit Learn Linear Regression Tutorial Linear Regression Model","title":"SciKit Learn"},{"location":"prompts/25-scikit-learn/#scikit-learn","text":"Scikit Learn is a Python library for predictive data analysis. Given a dataset of numbers, it can build a predictive model that can be used to predict new values for similar inputs. Scikit Learn is built on NumPy, SciPy, and matplotlib.","title":"Scikit Learn"},{"location":"prompts/25-scikit-learn/#installation","text":"We can use the pip program to install the Scikit-learn Python libraries. 1 pip install -U scikit-learn This will typically take a few minutes to run. At the end of the installation, you should see the text Successfully installed scikit-learn . 1 2 3 4 5 6 7 8 9 10 11 12 Collecting scikit-learn Downloading scikit_learn-0.24.2-cp36-cp36m-macosx_10_13_x86_64.whl (7.2 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 7.2 MB 2.5 MB/s Requirement already satisfied: numpy>=1.13.3 in /Users/dan/opt/miniconda3/envs/mkdocs/lib/python3.6/site-packages (from scikit-learn) (1.19.5) Requirement already satisfied: joblib>=0.11 in /Users/dan/opt/miniconda3/envs/mkdocs/lib/python3.6/site-packages (from scikit-learn) (1.0.0) Collecting scipy>=0.19.1 Downloading scipy-1.5.4-cp36-cp36m-macosx_10_9_x86_64.whl (28.8 MB) |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 28.8 MB 7.0 MB/s Collecting threadpoolctl>=2.0.0 Using cached threadpoolctl-3.1.0-py3-none-any.whl (14 kB) Installing collected packages: threadpoolctl, scipy, scikit-learn Successfully installed scikit-learn-0.24.2 scipy-1.5.4 threadpoolctl-3.1.0 Note Some users might need to use the following user install: 1 pip install --user --install-option=\"--prefix=\" -U scikit-learn","title":"Installation"},{"location":"prompts/25-scikit-learn/#testing-scikit-learn","text":"1 2 import sklearn print ( 'The scikit-learn version is {} .' . format ( sklearn . __version__ )) 1 The scikit-learn version is 0.24.2.","title":"Testing Scikit Learn"},{"location":"prompts/25-scikit-learn/#simple-linear-regression","text":"Linear regression attempts to draw a straight line on a chart that will best fit some data points. From this line, we can derive a simple model of the form y = mx + b where m is the slope and b is the intercept.","title":"Simple Linear Regression"},{"location":"prompts/25-scikit-learn/#sample-table-of-home-prices","text":"We can use ChatGPT to generate some sample data for us. Prompt: 1 Generate a list of 20 home sales in two columns using pipe delimited format. Put a pipe before and at the end of each line. Make the square footage range from 1,000 to 3,000 square feet and the home prices range from $130,000 to $300,000. Square Feet Home Sale Price 1000 $130,000 1200 $146,000 1400 $162,000 1600 $178,000 1800 $194,000 2000 $210,000 2200 $226,000 2400 $242,000 2600 $258,000 2800 $274,000 3000 $290,000 1100 $136,000 1300 $152,000 1500 $168,000 1700 $184,000 1900 $200,000 2100 $216,000 2300 $232,000 2500 $248,000 2700 $264,000 Regenerated response: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Create synthetic dataset np . random . seed ( 42 ) sqft = np . random . randint ( low = 1000 , high = 5000 , size = 20 ) price = sqft * 300 + np . random . randint ( low =- 50000 , high = 50000 , size = 20 ) # Fit linear regression model model = LinearRegression () model . fit ( sqft . reshape ( - 1 , 1 ), price ) # Generate predictions x_pred = np . linspace ( start = 0 , stop = 5000 , num = 100 ) y_pred = model . predict ( x_pred . reshape ( - 1 , 1 )) # Plot data and linear regression line plt . scatter ( sqft , price ) plt . plot ( x_pred , y_pred , color = 'red' ) plt . xlabel ( 'Square Footage' ) plt . ylabel ( 'Sale Price' ) plt . title ( 'Linear Regression Plot of Home Prices' ) plt . show ()","title":"Sample Table of Home Prices"},{"location":"prompts/25-scikit-learn/#references","text":"Scikit Learn Website Scikit Learn Linear Regression Tutorial Linear Regression Model","title":"References"},{"location":"prompts/26-systems-thinking/","text":"System Thinking Systems thinking is an analytical skill for understanding how systems interact. The core diagram in systems thinking is a causal look diagram. ChatGPT can create simple causal loop diagrams using Mermaid format but the diagrams lack details such as \"B\" and \"R\" for balancing and reinforcing loops. Prompt Create a causal loop diagram to illustrate the population of rabbits and wolves in mermaid dependency graph format. Response 1 2 3 4 5 graph LR A((Rabbits)) -->|increase| B((Food)) B -->|increase| C((Wolves)) C -->|decrease| A C -->|decrease| B Render on Mermaid.live Copy this code into the following site: Mermaid.live . You should see the following diagram: Thermostat Create a balancing causal loop diagram for a thermostat using mermaid causal diagram markup format. 1 2 3 4 5 6 graph LR A((Temperature)) -->|Deviation from Setpoint| B((Thermostat)) B -->|Control Signal| C((Heater/Cooler)) C -->|Heat/Cooling| A B -->|Feedback| D((Error)) D -->|Opposes Change| B","title":"System Thinking"},{"location":"prompts/26-systems-thinking/#system-thinking","text":"Systems thinking is an analytical skill for understanding how systems interact. The core diagram in systems thinking is a causal look diagram. ChatGPT can create simple causal loop diagrams using Mermaid format but the diagrams lack details such as \"B\" and \"R\" for balancing and reinforcing loops.","title":"System Thinking"},{"location":"prompts/26-systems-thinking/#prompt","text":"Create a causal loop diagram to illustrate the population of rabbits and wolves in mermaid dependency graph format.","title":"Prompt"},{"location":"prompts/26-systems-thinking/#response","text":"1 2 3 4 5 graph LR A((Rabbits)) -->|increase| B((Food)) B -->|increase| C((Wolves)) C -->|decrease| A C -->|decrease| B","title":"Response"},{"location":"prompts/26-systems-thinking/#render-on-mermaidlive","text":"Copy this code into the following site: Mermaid.live . You should see the following diagram:","title":"Render on Mermaid.live"},{"location":"prompts/26-systems-thinking/#thermostat","text":"Create a balancing causal loop diagram for a thermostat using mermaid causal diagram markup format. 1 2 3 4 5 6 graph LR A((Temperature)) -->|Deviation from Setpoint| B((Thermostat)) B -->|Control Signal| C((Heater/Cooler)) C -->|Heat/Cooling| A B -->|Feedback| D((Error)) D -->|Opposes Change| B","title":"Thermostat"},{"location":"prompts/27-regression-line/","text":"Regression Line Prompt Create and run a Python program that creates a scatter plot of sample home sales. The vertical axis should be the price of the home and the horizontal axis should be the square footage of the home. Generate synthetic home sales for 20 homes. Add a regression fit line and draw a vertical line between the regression line and each point that represents a home sale. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Generate synthetic home sales data np . random . seed ( 0 ) # for reproducibility square_footage = np . random . normal ( 2000 , 500 , 20 ) # normal distribution around 2000 sqft with std dev of 500 prices = square_footage * 150 + np . random . normal ( 0 , 50000 , 20 ) # price is $150 per sqft plus some noise # Fit a linear regression model model = LinearRegression () model . fit ( square_footage . reshape ( - 1 , 1 ), prices ) # Generate regression line points x_reg = np . linspace ( square_footage . min (), square_footage . max (), 100 ) y_reg = model . predict ( x_reg . reshape ( - 1 , 1 )) # Plot the points plt . scatter ( square_footage , prices , color = 'blue' , label = 'Home sales' ) plt . plot ( x_reg , y_reg , color = 'red' , label = 'Regression line' ) # Draw vertical lines from the points to the regression line for sqft , price in zip ( square_footage , prices ): reg_price = model . predict ( np . array ([[ sqft ]])) plt . vlines ( sqft , min ( price , reg_price ), max ( price , reg_price ), linestyles = 'dashed' , colors = 'green' ) plt . xlabel ( 'Square Footage' ) plt . ylabel ( 'Price' ) plt . title ( 'Home Sales vs Square Footage' ) plt . legend () plt . grid ( True ) plt . show ()","title":"Regression Line"},{"location":"prompts/27-regression-line/#regression-line","text":"Prompt Create and run a Python program that creates a scatter plot of sample home sales. The vertical axis should be the price of the home and the horizontal axis should be the square footage of the home. Generate synthetic home sales for 20 homes. Add a regression fit line and draw a vertical line between the regression line and each point that represents a home sale. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Generate synthetic home sales data np . random . seed ( 0 ) # for reproducibility square_footage = np . random . normal ( 2000 , 500 , 20 ) # normal distribution around 2000 sqft with std dev of 500 prices = square_footage * 150 + np . random . normal ( 0 , 50000 , 20 ) # price is $150 per sqft plus some noise # Fit a linear regression model model = LinearRegression () model . fit ( square_footage . reshape ( - 1 , 1 ), prices ) # Generate regression line points x_reg = np . linspace ( square_footage . min (), square_footage . max (), 100 ) y_reg = model . predict ( x_reg . reshape ( - 1 , 1 )) # Plot the points plt . scatter ( square_footage , prices , color = 'blue' , label = 'Home sales' ) plt . plot ( x_reg , y_reg , color = 'red' , label = 'Regression line' ) # Draw vertical lines from the points to the regression line for sqft , price in zip ( square_footage , prices ): reg_price = model . predict ( np . array ([[ sqft ]])) plt . vlines ( sqft , min ( price , reg_price ), max ( price , reg_price ), linestyles = 'dashed' , colors = 'green' ) plt . xlabel ( 'Square Footage' ) plt . ylabel ( 'Price' ) plt . title ( 'Home Sales vs Square Footage' ) plt . legend () plt . grid ( True ) plt . show ()","title":"Regression Line"}]}